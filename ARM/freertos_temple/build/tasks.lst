ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvTaskIsTaskSuspended:
  25              	.LFB16:
  26              		.file 1 "../FreeRTOS/Source/tasks.c"
   1:../FreeRTOS/Source/tasks.c **** /*
   2:../FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.0.1
   3:../FreeRTOS/Source/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../FreeRTOS/Source/tasks.c ****  *
   5:../FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:../FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:../FreeRTOS/Source/tasks.c ****  *
  12:../FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:../FreeRTOS/Source/tasks.c ****  *
  15:../FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../FreeRTOS/Source/tasks.c ****  *
  22:../FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:../FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:../FreeRTOS/Source/tasks.c ****  *
  25:../FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:../FreeRTOS/Source/tasks.c ****  */
  27:../FreeRTOS/Source/tasks.c **** 
  28:../FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:../FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:../FreeRTOS/Source/tasks.c **** #include <string.h>
  31:../FreeRTOS/Source/tasks.c **** 
  32:../FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 2


  33:../FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:../FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:../FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:../FreeRTOS/Source/tasks.c **** 
  37:../FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:../FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:../FreeRTOS/Source/tasks.c **** #include "task.h"
  40:../FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:../FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:../FreeRTOS/Source/tasks.c **** 
  43:../FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  44:../FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  45:../FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  46:../FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  47:../FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  48:../FreeRTOS/Source/tasks.c **** 
  49:../FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:../FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:../FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:../FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:../FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:../FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:../FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:../FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:../FreeRTOS/Source/tasks.c **** 
  59:../FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:../FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:../FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:../FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:../FreeRTOS/Source/tasks.c **** #else
  64:../FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:../FreeRTOS/Source/tasks.c **** #endif
  66:../FreeRTOS/Source/tasks.c **** 
  67:../FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:../FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:../FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:../FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:../FreeRTOS/Source/tasks.c **** 
  72:../FreeRTOS/Source/tasks.c **** /*
  73:../FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:../FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:../FreeRTOS/Source/tasks.c ****  */
  76:../FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:../FreeRTOS/Source/tasks.c **** 
  78:../FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:../FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:../FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:../FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:../FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:../FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:../FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:../FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:../FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:../FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:../FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
  89:../FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 3


  90:../FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:../FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  92:../FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:../FreeRTOS/Source/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:../FreeRTOS/Source/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:../FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:../FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:../FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:../FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:../FreeRTOS/Source/tasks.c **** 
 100:../FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:../FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:../FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:../FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:../FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:../FreeRTOS/Source/tasks.c **** #else
 106:../FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:../FreeRTOS/Source/tasks.c **** #endif
 108:../FreeRTOS/Source/tasks.c **** 
 109:../FreeRTOS/Source/tasks.c **** /*
 110:../FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:../FreeRTOS/Source/tasks.c ****  */
 112:../FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:../FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:../FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:../FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:../FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:../FreeRTOS/Source/tasks.c **** 
 118:../FreeRTOS/Source/tasks.c **** /*
 119:../FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:../FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 121:../FreeRTOS/Source/tasks.c ****  */
 122:../FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:../FreeRTOS/Source/tasks.c **** 	#define static
 124:../FreeRTOS/Source/tasks.c **** #endif
 125:../FreeRTOS/Source/tasks.c **** 
 126:../FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:../FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:../FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:../FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:../FreeRTOS/Source/tasks.c **** #endif
 131:../FreeRTOS/Source/tasks.c **** 
 132:../FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:../FreeRTOS/Source/tasks.c **** 
 134:../FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:../FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:../FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 137:../FreeRTOS/Source/tasks.c **** 
 138:../FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:../FreeRTOS/Source/tasks.c **** 	state task. */
 140:../FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:../FreeRTOS/Source/tasks.c **** 	{																									\
 142:../FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:../FreeRTOS/Source/tasks.c **** 		{																								\
 144:../FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:../FreeRTOS/Source/tasks.c **** 		}																								\
 146:../FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 4


 147:../FreeRTOS/Source/tasks.c **** 
 148:../FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 149:../FreeRTOS/Source/tasks.c **** 
 150:../FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:../FreeRTOS/Source/tasks.c **** 	{																									\
 152:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:../FreeRTOS/Source/tasks.c **** 																										\
 154:../FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:../FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:../FreeRTOS/Source/tasks.c **** 		{																								\
 157:../FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:../FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 159:../FreeRTOS/Source/tasks.c **** 		}																								\
 160:../FreeRTOS/Source/tasks.c **** 																										\
 161:../FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:../FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:../FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:../FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:../FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:../FreeRTOS/Source/tasks.c **** 
 167:../FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:../FreeRTOS/Source/tasks.c **** 
 169:../FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:../FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:../FreeRTOS/Source/tasks.c **** 	being used. */
 172:../FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:../FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:../FreeRTOS/Source/tasks.c **** 
 175:../FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:../FreeRTOS/Source/tasks.c **** 
 177:../FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:../FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:../FreeRTOS/Source/tasks.c **** 	architecture being used. */
 180:../FreeRTOS/Source/tasks.c **** 
 181:../FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:../FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:../FreeRTOS/Source/tasks.c **** 
 184:../FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 185:../FreeRTOS/Source/tasks.c **** 
 186:../FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:../FreeRTOS/Source/tasks.c **** 	{																								\
 188:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:../FreeRTOS/Source/tasks.c **** 																									\
 190:../FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:../FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:../FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:../FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:../FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:../FreeRTOS/Source/tasks.c **** 
 196:../FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 197:../FreeRTOS/Source/tasks.c **** 
 198:../FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:../FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:../FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:../FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:../FreeRTOS/Source/tasks.c **** 	{																									\
 203:../FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 5


 204:../FreeRTOS/Source/tasks.c **** 		{																								\
 205:../FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:../FreeRTOS/Source/tasks.c **** 		}																								\
 207:../FreeRTOS/Source/tasks.c **** 	}
 208:../FreeRTOS/Source/tasks.c **** 
 209:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:../FreeRTOS/Source/tasks.c **** 
 211:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 212:../FreeRTOS/Source/tasks.c **** 
 213:../FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:../FreeRTOS/Source/tasks.c **** count overflows. */
 215:../FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:../FreeRTOS/Source/tasks.c **** {																									\
 217:../FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 218:../FreeRTOS/Source/tasks.c **** 																									\
 219:../FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:../FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:../FreeRTOS/Source/tasks.c **** 																									\
 222:../FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:../FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:../FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:../FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 226:../FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:../FreeRTOS/Source/tasks.c **** }
 228:../FreeRTOS/Source/tasks.c **** 
 229:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 230:../FreeRTOS/Source/tasks.c **** 
 231:../FreeRTOS/Source/tasks.c **** /*
 232:../FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:../FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:../FreeRTOS/Source/tasks.c ****  */
 235:../FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:../FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:../FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:../FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:../FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 241:../FreeRTOS/Source/tasks.c **** 
 242:../FreeRTOS/Source/tasks.c **** /*
 243:../FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:../FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:../FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:../FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:../FreeRTOS/Source/tasks.c ****  */
 248:../FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:../FreeRTOS/Source/tasks.c **** 
 250:../FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:../FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:../FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:../FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:../FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:../FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:../FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:../FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 258:../FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:../FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 260:../FreeRTOS/Source/tasks.c **** #else
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 6


 261:../FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:../FreeRTOS/Source/tasks.c **** #endif
 263:../FreeRTOS/Source/tasks.c **** 
 264:../FreeRTOS/Source/tasks.c **** /*
 265:../FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:../FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:../FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 268:../FreeRTOS/Source/tasks.c ****  */
 269:../FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 270:../FreeRTOS/Source/tasks.c **** {
 271:../FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:../FreeRTOS/Source/tasks.c **** 
 273:../FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:../FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:../FreeRTOS/Source/tasks.c **** 	#endif
 276:../FreeRTOS/Source/tasks.c **** 
 277:../FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:../FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:../FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:../FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:../FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:../FreeRTOS/Source/tasks.c **** 
 283:../FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:../FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:../FreeRTOS/Source/tasks.c **** 	#endif
 286:../FreeRTOS/Source/tasks.c **** 
 287:../FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:../FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:../FreeRTOS/Source/tasks.c **** 	#endif
 290:../FreeRTOS/Source/tasks.c **** 
 291:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:../FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:../FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:../FreeRTOS/Source/tasks.c **** 	#endif
 295:../FreeRTOS/Source/tasks.c **** 
 296:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:../FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:../FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:../FreeRTOS/Source/tasks.c **** 	#endif
 300:../FreeRTOS/Source/tasks.c **** 
 301:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:../FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:../FreeRTOS/Source/tasks.c **** 	#endif
 304:../FreeRTOS/Source/tasks.c **** 
 305:../FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:../FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:../FreeRTOS/Source/tasks.c **** 	#endif
 308:../FreeRTOS/Source/tasks.c **** 
 309:../FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:../FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:../FreeRTOS/Source/tasks.c **** 	#endif
 312:../FreeRTOS/Source/tasks.c **** 
 313:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:../FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:../FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:../FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 317:../FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 7


 318:../FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:../FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:../FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:../FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 322:../FreeRTOS/Source/tasks.c **** 	#endif
 323:../FreeRTOS/Source/tasks.c **** 
 324:../FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:../FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:../FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:../FreeRTOS/Source/tasks.c **** 	#endif
 328:../FreeRTOS/Source/tasks.c **** 
 329:../FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 330:../FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:../FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:../FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:../FreeRTOS/Source/tasks.c **** 	#endif
 334:../FreeRTOS/Source/tasks.c **** 
 335:../FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:../FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 337:../FreeRTOS/Source/tasks.c **** 	#endif
 338:../FreeRTOS/Source/tasks.c **** 
 339:../FreeRTOS/Source/tasks.c **** } tskTCB;
 340:../FreeRTOS/Source/tasks.c **** 
 341:../FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:../FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:../FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 344:../FreeRTOS/Source/tasks.c **** 
 345:../FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:../FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 347:../FreeRTOS/Source/tasks.c **** 
 348:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:../FreeRTOS/Source/tasks.c **** 
 350:../FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ];/*< Prioritised ready tasks
 352:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1;						/*< Delayed tasks. */
 353:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2;						/*< Delayed tasks (two lists are used - one f
 354:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList;				/*< Points to the delayed task list 
 355:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList;		/*< Points to the delayed task
 356:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList;						/*< Tasks that have been readied while the sc
 357:../FreeRTOS/Source/tasks.c **** 
 358:../FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:../FreeRTOS/Source/tasks.c **** 
 360:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination;				/*< Tasks that have been deleted - but 
 361:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:../FreeRTOS/Source/tasks.c **** 
 363:../FreeRTOS/Source/tasks.c **** #endif
 364:../FreeRTOS/Source/tasks.c **** 
 365:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:../FreeRTOS/Source/tasks.c **** 
 367:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList;					/*< Tasks that are currently suspended. */
 368:../FreeRTOS/Source/tasks.c **** 
 369:../FreeRTOS/Source/tasks.c **** #endif
 370:../FreeRTOS/Source/tasks.c **** 
 371:../FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 372:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 373:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 374:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 8


 375:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 377:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:../FreeRTOS/Source/tasks.c **** 
 383:../FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:../FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:../FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:../FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:../FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:../FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:../FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:../FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 391:../FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:../FreeRTOS/Source/tasks.c **** 
 393:../FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:../FreeRTOS/Source/tasks.c **** 
 395:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:../FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:../FreeRTOS/Source/tasks.c **** 
 398:../FreeRTOS/Source/tasks.c **** #endif
 399:../FreeRTOS/Source/tasks.c **** 
 400:../FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:../FreeRTOS/Source/tasks.c **** 
 402:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:../FreeRTOS/Source/tasks.c **** 
 404:../FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:../FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:../FreeRTOS/Source/tasks.c **** 
 407:../FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 408:../FreeRTOS/Source/tasks.c **** 
 409:../FreeRTOS/Source/tasks.c **** #endif
 410:../FreeRTOS/Source/tasks.c **** 
 411:../FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 412:../FreeRTOS/Source/tasks.c **** 
 413:../FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 414:../FreeRTOS/Source/tasks.c **** 
 415:../FreeRTOS/Source/tasks.c **** #endif
 416:../FreeRTOS/Source/tasks.c **** 
 417:../FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 418:../FreeRTOS/Source/tasks.c **** 
 419:../FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 420:../FreeRTOS/Source/tasks.c **** 
 421:../FreeRTOS/Source/tasks.c **** #endif
 422:../FreeRTOS/Source/tasks.c **** 
 423:../FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 424:../FreeRTOS/Source/tasks.c **** 
 425:../FreeRTOS/Source/tasks.c **** /**
 426:../FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 427:../FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 428:../FreeRTOS/Source/tasks.c ****  * is in any other state.
 429:../FreeRTOS/Source/tasks.c ****  */
 430:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 431:../FreeRTOS/Source/tasks.c **** 
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 9


 432:../FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 433:../FreeRTOS/Source/tasks.c **** 
 434:../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 435:../FreeRTOS/Source/tasks.c **** 
 436:../FreeRTOS/Source/tasks.c **** /*
 437:../FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
 438:../FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 439:../FreeRTOS/Source/tasks.c ****  */
 440:../FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 441:../FreeRTOS/Source/tasks.c **** 
 442:../FreeRTOS/Source/tasks.c **** /*
 443:../FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 444:../FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 445:../FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 446:../FreeRTOS/Source/tasks.c ****  *
 447:../FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 448:../FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 449:../FreeRTOS/Source/tasks.c ****  *
 450:../FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 451:../FreeRTOS/Source/tasks.c ****  *
 452:../FreeRTOS/Source/tasks.c ****  */
 453:../FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 454:../FreeRTOS/Source/tasks.c **** 
 455:../FreeRTOS/Source/tasks.c **** /*
 456:../FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 457:../FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 458:../FreeRTOS/Source/tasks.c ****  *
 459:../FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 460:../FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 461:../FreeRTOS/Source/tasks.c ****  */
 462:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 463:../FreeRTOS/Source/tasks.c **** 
 464:../FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 465:../FreeRTOS/Source/tasks.c **** 
 466:../FreeRTOS/Source/tasks.c **** #endif
 467:../FreeRTOS/Source/tasks.c **** 
 468:../FreeRTOS/Source/tasks.c **** /*
 469:../FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 470:../FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 471:../FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 472:../FreeRTOS/Source/tasks.c ****  */
 473:../FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 474:../FreeRTOS/Source/tasks.c **** 
 475:../FreeRTOS/Source/tasks.c **** /*
 476:../FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 477:../FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 478:../FreeRTOS/Source/tasks.c ****  */
 479:../FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 480:../FreeRTOS/Source/tasks.c **** 
 481:../FreeRTOS/Source/tasks.c **** /*
 482:../FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 483:../FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 484:../FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 485:../FreeRTOS/Source/tasks.c ****  *
 486:../FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 487:../FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 488:../FreeRTOS/Source/tasks.c ****  */
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 10


 489:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 490:../FreeRTOS/Source/tasks.c **** 
 491:../FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 492:../FreeRTOS/Source/tasks.c **** 
 493:../FreeRTOS/Source/tasks.c **** #endif
 494:../FreeRTOS/Source/tasks.c **** 
 495:../FreeRTOS/Source/tasks.c **** /*
 496:../FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 497:../FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 498:../FreeRTOS/Source/tasks.c ****  */
 499:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 500:../FreeRTOS/Source/tasks.c **** 
 501:../FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 502:../FreeRTOS/Source/tasks.c **** 
 503:../FreeRTOS/Source/tasks.c **** #endif
 504:../FreeRTOS/Source/tasks.c **** 
 505:../FreeRTOS/Source/tasks.c **** /*
 506:../FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 507:../FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 508:../FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 509:../FreeRTOS/Source/tasks.c ****  */
 510:../FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 511:../FreeRTOS/Source/tasks.c **** 
 512:../FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 513:../FreeRTOS/Source/tasks.c **** 
 514:../FreeRTOS/Source/tasks.c **** #endif
 515:../FreeRTOS/Source/tasks.c **** 
 516:../FreeRTOS/Source/tasks.c **** /*
 517:../FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 518:../FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 519:../FreeRTOS/Source/tasks.c ****  *
 520:../FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 521:../FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 522:../FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 523:../FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 524:../FreeRTOS/Source/tasks.c ****  */
 525:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 526:../FreeRTOS/Source/tasks.c **** 
 527:../FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 528:../FreeRTOS/Source/tasks.c **** 
 529:../FreeRTOS/Source/tasks.c **** #endif
 530:../FreeRTOS/Source/tasks.c **** 
 531:../FreeRTOS/Source/tasks.c **** /*
 532:../FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 533:../FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 534:../FreeRTOS/Source/tasks.c ****  */
 535:../FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 536:../FreeRTOS/Source/tasks.c **** 
 537:../FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 538:../FreeRTOS/Source/tasks.c **** 
 539:../FreeRTOS/Source/tasks.c **** 	/*
 540:../FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 541:../FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 542:../FreeRTOS/Source/tasks.c **** 	 */
 543:../FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 544:../FreeRTOS/Source/tasks.c **** 
 545:../FreeRTOS/Source/tasks.c **** #endif
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 11


 546:../FreeRTOS/Source/tasks.c **** 
 547:../FreeRTOS/Source/tasks.c **** /*
 548:../FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 549:../FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 550:../FreeRTOS/Source/tasks.c ****  */
 551:../FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 552:../FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 553:../FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 554:../FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 555:../FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 556:../FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 557:../FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 558:../FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 559:../FreeRTOS/Source/tasks.c **** 
 560:../FreeRTOS/Source/tasks.c **** /*
 561:../FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 562:../FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 563:../FreeRTOS/Source/tasks.c ****  */
 564:../FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 565:../FreeRTOS/Source/tasks.c **** 
 566:../FreeRTOS/Source/tasks.c **** /*
 567:../FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 568:../FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 569:../FreeRTOS/Source/tasks.c ****  * called by the function.
 570:../FreeRTOS/Source/tasks.c ****  */
 571:../FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 572:../FreeRTOS/Source/tasks.c **** 
 573:../FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 574:../FreeRTOS/Source/tasks.c **** 
 575:../FreeRTOS/Source/tasks.c **** #endif
 576:../FreeRTOS/Source/tasks.c **** 
 577:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 578:../FreeRTOS/Source/tasks.c **** 
 579:../FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 580:../FreeRTOS/Source/tasks.c **** 
 581:../FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 582:../FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 583:../FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 584:../FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 585:../FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 586:../FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 587:../FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 588:../FreeRTOS/Source/tasks.c **** 	{
 589:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 590:../FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 591:../FreeRTOS/Source/tasks.c **** 
 592:../FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 593:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 594:../FreeRTOS/Source/tasks.c **** 
 595:../FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 596:../FreeRTOS/Source/tasks.c **** 		{
 597:../FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 598:../FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 599:../FreeRTOS/Source/tasks.c **** 			structure. */
 600:../FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 601:../FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 602:../FreeRTOS/Source/tasks.c **** 		}
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 12


 603:../FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 604:../FreeRTOS/Source/tasks.c **** 
 605:../FreeRTOS/Source/tasks.c **** 
 606:../FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 607:../FreeRTOS/Source/tasks.c **** 		{
 608:../FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
 609:../FreeRTOS/Source/tasks.c **** 			function - use them. */
 610:../FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 611:../FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 612:../FreeRTOS/Source/tasks.c **** 
 613:../FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 614:../FreeRTOS/Source/tasks.c **** 			{
 615:../FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 616:../FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 617:../FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 618:../FreeRTOS/Source/tasks.c **** 			}
 619:../FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 620:../FreeRTOS/Source/tasks.c **** 
 621:../FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 622:../FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 623:../FreeRTOS/Source/tasks.c **** 		}
 624:../FreeRTOS/Source/tasks.c **** 		else
 625:../FreeRTOS/Source/tasks.c **** 		{
 626:../FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 627:../FreeRTOS/Source/tasks.c **** 		}
 628:../FreeRTOS/Source/tasks.c **** 
 629:../FreeRTOS/Source/tasks.c **** 		return xReturn;
 630:../FreeRTOS/Source/tasks.c **** 	}
 631:../FreeRTOS/Source/tasks.c **** 
 632:../FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 633:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 634:../FreeRTOS/Source/tasks.c **** 
 635:../FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 636:../FreeRTOS/Source/tasks.c **** 
 637:../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 638:../FreeRTOS/Source/tasks.c **** 	{
 639:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 640:../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 641:../FreeRTOS/Source/tasks.c **** 
 642:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 643:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 644:../FreeRTOS/Source/tasks.c **** 
 645:../FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 646:../FreeRTOS/Source/tasks.c **** 		{
 647:../FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 648:../FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 649:../FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 650:../FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 651:../FreeRTOS/Source/tasks.c **** 
 652:../FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 653:../FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 654:../FreeRTOS/Source/tasks.c **** 
 655:../FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 656:../FreeRTOS/Source/tasks.c **** 			{
 657:../FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 658:../FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 659:../FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 13


 660:../FreeRTOS/Source/tasks.c **** 			}
 661:../FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 662:../FreeRTOS/Source/tasks.c **** 
 663:../FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 664:../FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 665:../FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
 666:../FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 667:../FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 668:../FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 669:../FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 670:../FreeRTOS/Source/tasks.c **** 
 671:../FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 672:../FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 673:../FreeRTOS/Source/tasks.c **** 		}
 674:../FreeRTOS/Source/tasks.c **** 
 675:../FreeRTOS/Source/tasks.c **** 		return xReturn;
 676:../FreeRTOS/Source/tasks.c **** 	}
 677:../FreeRTOS/Source/tasks.c **** 
 678:../FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 679:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 680:../FreeRTOS/Source/tasks.c **** 
 681:../FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 682:../FreeRTOS/Source/tasks.c **** 
 683:../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 684:../FreeRTOS/Source/tasks.c **** 	{
 685:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 686:../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 687:../FreeRTOS/Source/tasks.c **** 
 688:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 689:../FreeRTOS/Source/tasks.c **** 
 690:../FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 691:../FreeRTOS/Source/tasks.c **** 		{
 692:../FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 693:../FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 694:../FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 695:../FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 696:../FreeRTOS/Source/tasks.c **** 
 697:../FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 698:../FreeRTOS/Source/tasks.c **** 			{
 699:../FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 700:../FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 701:../FreeRTOS/Source/tasks.c **** 
 702:../FreeRTOS/Source/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 703:../FreeRTOS/Source/tasks.c **** 				{
 704:../FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 705:../FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 706:../FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 707:../FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 708:../FreeRTOS/Source/tasks.c **** 				}
 709:../FreeRTOS/Source/tasks.c **** 				#endif
 710:../FreeRTOS/Source/tasks.c **** 
 711:../FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 712:../FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 713:../FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 714:../FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 715:../FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 716:../FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 14


 717:../FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 718:../FreeRTOS/Source/tasks.c **** 
 719:../FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 720:../FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 721:../FreeRTOS/Source/tasks.c **** 			}
 722:../FreeRTOS/Source/tasks.c **** 		}
 723:../FreeRTOS/Source/tasks.c **** 
 724:../FreeRTOS/Source/tasks.c **** 		return xReturn;
 725:../FreeRTOS/Source/tasks.c **** 	}
 726:../FreeRTOS/Source/tasks.c **** 
 727:../FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 728:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 729:../FreeRTOS/Source/tasks.c **** 
 730:../FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 731:../FreeRTOS/Source/tasks.c **** 
 732:../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 733:../FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 734:../FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 735:../FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 736:../FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 737:../FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 738:../FreeRTOS/Source/tasks.c **** 	{
 739:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 740:../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 741:../FreeRTOS/Source/tasks.c **** 
 742:../FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 743:../FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 744:../FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 745:../FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 746:../FreeRTOS/Source/tasks.c **** 		{
 747:../FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 748:../FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 749:../FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 750:../FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 751:../FreeRTOS/Source/tasks.c **** 
 752:../FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 753:../FreeRTOS/Source/tasks.c **** 			{
 754:../FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 755:../FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 756:../FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 757:../FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 758:../FreeRTOS/Source/tasks.c **** 
 759:../FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 760:../FreeRTOS/Source/tasks.c **** 				{
 761:../FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 762:../FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 763:../FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 764:../FreeRTOS/Source/tasks.c **** 				}
 765:../FreeRTOS/Source/tasks.c **** 			}
 766:../FreeRTOS/Source/tasks.c **** 		}
 767:../FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 768:../FreeRTOS/Source/tasks.c **** 		{
 769:../FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 770:../FreeRTOS/Source/tasks.c **** 
 771:../FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 772:../FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 773:../FreeRTOS/Source/tasks.c **** 
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 15


 774:../FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 775:../FreeRTOS/Source/tasks.c **** 			{
 776:../FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 777:../FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 778:../FreeRTOS/Source/tasks.c **** 
 779:../FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
 780:../FreeRTOS/Source/tasks.c **** 				{
 781:../FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 782:../FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 783:../FreeRTOS/Source/tasks.c **** 				}
 784:../FreeRTOS/Source/tasks.c **** 				else
 785:../FreeRTOS/Source/tasks.c **** 				{
 786:../FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 787:../FreeRTOS/Source/tasks.c **** 					it again. */
 788:../FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 789:../FreeRTOS/Source/tasks.c **** 				}
 790:../FreeRTOS/Source/tasks.c **** 			}
 791:../FreeRTOS/Source/tasks.c **** 			else
 792:../FreeRTOS/Source/tasks.c **** 			{
 793:../FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 794:../FreeRTOS/Source/tasks.c **** 			}
 795:../FreeRTOS/Source/tasks.c **** 		}
 796:../FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 797:../FreeRTOS/Source/tasks.c **** 
 798:../FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 799:../FreeRTOS/Source/tasks.c **** 		{
 800:../FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 801:../FreeRTOS/Source/tasks.c **** 			{
 802:../FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 803:../FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 804:../FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 805:../FreeRTOS/Source/tasks.c **** 			}
 806:../FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 807:../FreeRTOS/Source/tasks.c **** 
 808:../FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 809:../FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 810:../FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 811:../FreeRTOS/Source/tasks.c **** 		}
 812:../FreeRTOS/Source/tasks.c **** 		else
 813:../FreeRTOS/Source/tasks.c **** 		{
 814:../FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 815:../FreeRTOS/Source/tasks.c **** 		}
 816:../FreeRTOS/Source/tasks.c **** 
 817:../FreeRTOS/Source/tasks.c **** 		return xReturn;
 818:../FreeRTOS/Source/tasks.c **** 	}
 819:../FreeRTOS/Source/tasks.c **** 
 820:../FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 821:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 822:../FreeRTOS/Source/tasks.c **** 
 823:../FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 824:../FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 825:../FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 826:../FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 827:../FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 828:../FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 829:../FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 830:../FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 16


 831:../FreeRTOS/Source/tasks.c **** {
 832:../FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 833:../FreeRTOS/Source/tasks.c **** UBaseType_t x;
 834:../FreeRTOS/Source/tasks.c **** 
 835:../FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 836:../FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
 837:../FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 838:../FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 839:../FreeRTOS/Source/tasks.c **** 		{
 840:../FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 841:../FreeRTOS/Source/tasks.c **** 		}
 842:../FreeRTOS/Source/tasks.c **** 		else
 843:../FreeRTOS/Source/tasks.c **** 		{
 844:../FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 845:../FreeRTOS/Source/tasks.c **** 		}
 846:../FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 847:../FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 848:../FreeRTOS/Source/tasks.c **** 
 849:../FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 850:../FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 851:../FreeRTOS/Source/tasks.c **** 	{
 852:../FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 853:../FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 854:../FreeRTOS/Source/tasks.c **** 	}
 855:../FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 856:../FreeRTOS/Source/tasks.c **** 
 857:../FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 858:../FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 859:../FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 860:../FreeRTOS/Source/tasks.c **** 	by the port. */
 861:../FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 862:../FreeRTOS/Source/tasks.c **** 	{
 863:../FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 864:../FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 865:../FreeRTOS/Source/tasks.c **** 
 866:../FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 867:../FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 868:../FreeRTOS/Source/tasks.c **** 
 869:../FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 870:../FreeRTOS/Source/tasks.c **** 		{
 871:../FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 872:../FreeRTOS/Source/tasks.c **** 			debugging. */
 873:../FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 874:../FreeRTOS/Source/tasks.c **** 		}
 875:../FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 876:../FreeRTOS/Source/tasks.c **** 	}
 877:../FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 878:../FreeRTOS/Source/tasks.c **** 	{
 879:../FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 880:../FreeRTOS/Source/tasks.c **** 
 881:../FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 882:../FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 883:../FreeRTOS/Source/tasks.c **** 
 884:../FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 885:../FreeRTOS/Source/tasks.c **** 		performed. */
 886:../FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 887:../FreeRTOS/Source/tasks.c **** 	}
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 17


 888:../FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 889:../FreeRTOS/Source/tasks.c **** 
 890:../FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 891:../FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 892:../FreeRTOS/Source/tasks.c **** 	{
 893:../FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 894:../FreeRTOS/Source/tasks.c **** 
 895:../FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 896:../FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 897:../FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 898:../FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 899:../FreeRTOS/Source/tasks.c **** 		{
 900:../FreeRTOS/Source/tasks.c **** 			break;
 901:../FreeRTOS/Source/tasks.c **** 		}
 902:../FreeRTOS/Source/tasks.c **** 		else
 903:../FreeRTOS/Source/tasks.c **** 		{
 904:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 905:../FreeRTOS/Source/tasks.c **** 		}
 906:../FreeRTOS/Source/tasks.c **** 	}
 907:../FreeRTOS/Source/tasks.c **** 
 908:../FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 909:../FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 910:../FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 911:../FreeRTOS/Source/tasks.c **** 
 912:../FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 913:../FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 914:../FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 915:../FreeRTOS/Source/tasks.c **** 	{
 916:../FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 917:../FreeRTOS/Source/tasks.c **** 	}
 918:../FreeRTOS/Source/tasks.c **** 	else
 919:../FreeRTOS/Source/tasks.c **** 	{
 920:../FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 921:../FreeRTOS/Source/tasks.c **** 	}
 922:../FreeRTOS/Source/tasks.c **** 
 923:../FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 924:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 925:../FreeRTOS/Source/tasks.c **** 	{
 926:../FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 927:../FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 928:../FreeRTOS/Source/tasks.c **** 	}
 929:../FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 930:../FreeRTOS/Source/tasks.c **** 
 931:../FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 932:../FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 933:../FreeRTOS/Source/tasks.c **** 
 934:../FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 935:../FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 936:../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 937:../FreeRTOS/Source/tasks.c **** 
 938:../FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 939:../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 940:../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 941:../FreeRTOS/Source/tasks.c **** 
 942:../FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 943:../FreeRTOS/Source/tasks.c **** 	{
 944:../FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 18


 945:../FreeRTOS/Source/tasks.c **** 	}
 946:../FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 947:../FreeRTOS/Source/tasks.c **** 
 948:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 949:../FreeRTOS/Source/tasks.c **** 	{
 950:../FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
 951:../FreeRTOS/Source/tasks.c **** 	}
 952:../FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 953:../FreeRTOS/Source/tasks.c **** 
 954:../FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 955:../FreeRTOS/Source/tasks.c **** 	{
 956:../FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 957:../FreeRTOS/Source/tasks.c **** 	}
 958:../FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 959:../FreeRTOS/Source/tasks.c **** 
 960:../FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 961:../FreeRTOS/Source/tasks.c **** 	{
 962:../FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 963:../FreeRTOS/Source/tasks.c **** 	}
 964:../FreeRTOS/Source/tasks.c **** 	#else
 965:../FreeRTOS/Source/tasks.c **** 	{
 966:../FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 967:../FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 968:../FreeRTOS/Source/tasks.c **** 	}
 969:../FreeRTOS/Source/tasks.c **** 	#endif
 970:../FreeRTOS/Source/tasks.c **** 
 971:../FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 972:../FreeRTOS/Source/tasks.c **** 	{
 973:../FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 974:../FreeRTOS/Source/tasks.c **** 		{
 975:../FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 976:../FreeRTOS/Source/tasks.c **** 		}
 977:../FreeRTOS/Source/tasks.c **** 	}
 978:../FreeRTOS/Source/tasks.c **** 	#endif
 979:../FreeRTOS/Source/tasks.c **** 
 980:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 981:../FreeRTOS/Source/tasks.c **** 	{
 982:../FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 983:../FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 984:../FreeRTOS/Source/tasks.c **** 	}
 985:../FreeRTOS/Source/tasks.c **** 	#endif
 986:../FreeRTOS/Source/tasks.c **** 
 987:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 988:../FreeRTOS/Source/tasks.c **** 	{
 989:../FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 990:../FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 991:../FreeRTOS/Source/tasks.c **** 	}
 992:../FreeRTOS/Source/tasks.c **** 	#endif
 993:../FreeRTOS/Source/tasks.c **** 
 994:../FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 995:../FreeRTOS/Source/tasks.c **** 	{
 996:../FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 997:../FreeRTOS/Source/tasks.c **** 	}
 998:../FreeRTOS/Source/tasks.c **** 	#endif
 999:../FreeRTOS/Source/tasks.c **** 
1000:../FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
1001:../FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 19


1002:../FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
1003:../FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
1004:../FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
1005:../FreeRTOS/Source/tasks.c **** 	{
1006:../FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1007:../FreeRTOS/Source/tasks.c **** 	}
1008:../FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1009:../FreeRTOS/Source/tasks.c **** 	{
1010:../FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1011:../FreeRTOS/Source/tasks.c **** 	}
1012:../FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1013:../FreeRTOS/Source/tasks.c **** 
1014:../FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
1015:../FreeRTOS/Source/tasks.c **** 	{
1016:../FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1017:../FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1018:../FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1019:../FreeRTOS/Source/tasks.c **** 	}
1020:../FreeRTOS/Source/tasks.c **** 	else
1021:../FreeRTOS/Source/tasks.c **** 	{
1022:../FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1023:../FreeRTOS/Source/tasks.c **** 	}
1024:../FreeRTOS/Source/tasks.c **** }
1025:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1026:../FreeRTOS/Source/tasks.c **** 
1027:../FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1028:../FreeRTOS/Source/tasks.c **** {
1029:../FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1030:../FreeRTOS/Source/tasks.c **** 	updated. */
1031:../FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1032:../FreeRTOS/Source/tasks.c **** 	{
1033:../FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1034:../FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1035:../FreeRTOS/Source/tasks.c **** 		{
1036:../FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1037:../FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1038:../FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1039:../FreeRTOS/Source/tasks.c **** 
1040:../FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1041:../FreeRTOS/Source/tasks.c **** 			{
1042:../FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1043:../FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1044:../FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1045:../FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1046:../FreeRTOS/Source/tasks.c **** 			}
1047:../FreeRTOS/Source/tasks.c **** 			else
1048:../FreeRTOS/Source/tasks.c **** 			{
1049:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1050:../FreeRTOS/Source/tasks.c **** 			}
1051:../FreeRTOS/Source/tasks.c **** 		}
1052:../FreeRTOS/Source/tasks.c **** 		else
1053:../FreeRTOS/Source/tasks.c **** 		{
1054:../FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1055:../FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1056:../FreeRTOS/Source/tasks.c **** 			so far. */
1057:../FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1058:../FreeRTOS/Source/tasks.c **** 			{
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 20


1059:../FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1060:../FreeRTOS/Source/tasks.c **** 				{
1061:../FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1062:../FreeRTOS/Source/tasks.c **** 				}
1063:../FreeRTOS/Source/tasks.c **** 				else
1064:../FreeRTOS/Source/tasks.c **** 				{
1065:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1066:../FreeRTOS/Source/tasks.c **** 				}
1067:../FreeRTOS/Source/tasks.c **** 			}
1068:../FreeRTOS/Source/tasks.c **** 			else
1069:../FreeRTOS/Source/tasks.c **** 			{
1070:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1071:../FreeRTOS/Source/tasks.c **** 			}
1072:../FreeRTOS/Source/tasks.c **** 		}
1073:../FreeRTOS/Source/tasks.c **** 
1074:../FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1075:../FreeRTOS/Source/tasks.c **** 
1076:../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1077:../FreeRTOS/Source/tasks.c **** 		{
1078:../FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1079:../FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1080:../FreeRTOS/Source/tasks.c **** 		}
1081:../FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1082:../FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1083:../FreeRTOS/Source/tasks.c **** 
1084:../FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1085:../FreeRTOS/Source/tasks.c **** 
1086:../FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1087:../FreeRTOS/Source/tasks.c **** 	}
1088:../FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1089:../FreeRTOS/Source/tasks.c **** 
1090:../FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1091:../FreeRTOS/Source/tasks.c **** 	{
1092:../FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1093:../FreeRTOS/Source/tasks.c **** 		then it should run now. */
1094:../FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1095:../FreeRTOS/Source/tasks.c **** 		{
1096:../FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1097:../FreeRTOS/Source/tasks.c **** 		}
1098:../FreeRTOS/Source/tasks.c **** 		else
1099:../FreeRTOS/Source/tasks.c **** 		{
1100:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1101:../FreeRTOS/Source/tasks.c **** 		}
1102:../FreeRTOS/Source/tasks.c **** 	}
1103:../FreeRTOS/Source/tasks.c **** 	else
1104:../FreeRTOS/Source/tasks.c **** 	{
1105:../FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1106:../FreeRTOS/Source/tasks.c **** 	}
1107:../FreeRTOS/Source/tasks.c **** }
1108:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1109:../FreeRTOS/Source/tasks.c **** 
1110:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1111:../FreeRTOS/Source/tasks.c **** 
1112:../FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1113:../FreeRTOS/Source/tasks.c **** 	{
1114:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1115:../FreeRTOS/Source/tasks.c **** 
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 21


1116:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1117:../FreeRTOS/Source/tasks.c **** 		{
1118:../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1119:../FreeRTOS/Source/tasks.c **** 			being deleted. */
1120:../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1121:../FreeRTOS/Source/tasks.c **** 
1122:../FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1123:../FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1124:../FreeRTOS/Source/tasks.c **** 			{
1125:../FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1126:../FreeRTOS/Source/tasks.c **** 			}
1127:../FreeRTOS/Source/tasks.c **** 			else
1128:../FreeRTOS/Source/tasks.c **** 			{
1129:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1130:../FreeRTOS/Source/tasks.c **** 			}
1131:../FreeRTOS/Source/tasks.c **** 
1132:../FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1133:../FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1134:../FreeRTOS/Source/tasks.c **** 			{
1135:../FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1136:../FreeRTOS/Source/tasks.c **** 			}
1137:../FreeRTOS/Source/tasks.c **** 			else
1138:../FreeRTOS/Source/tasks.c **** 			{
1139:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1140:../FreeRTOS/Source/tasks.c **** 			}
1141:../FreeRTOS/Source/tasks.c **** 
1142:../FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1143:../FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1144:../FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1145:../FreeRTOS/Source/tasks.c **** 			not return. */
1146:../FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1147:../FreeRTOS/Source/tasks.c **** 
1148:../FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1149:../FreeRTOS/Source/tasks.c **** 			{
1150:../FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1151:../FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1152:../FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1153:../FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1154:../FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1155:../FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1156:../FreeRTOS/Source/tasks.c **** 
1157:../FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1158:../FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1159:../FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1160:../FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1161:../FreeRTOS/Source/tasks.c **** 
1162:../FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1163:../FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1164:../FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1165:../FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1166:../FreeRTOS/Source/tasks.c **** 				required. */
1167:../FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1168:../FreeRTOS/Source/tasks.c **** 			}
1169:../FreeRTOS/Source/tasks.c **** 			else
1170:../FreeRTOS/Source/tasks.c **** 			{
1171:../FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1172:../FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 22


1173:../FreeRTOS/Source/tasks.c **** 
1174:../FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1175:../FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1176:../FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1177:../FreeRTOS/Source/tasks.c **** 			}
1178:../FreeRTOS/Source/tasks.c **** 
1179:../FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1180:../FreeRTOS/Source/tasks.c **** 		}
1181:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1182:../FreeRTOS/Source/tasks.c **** 
1183:../FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1184:../FreeRTOS/Source/tasks.c **** 		been deleted. */
1185:../FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1186:../FreeRTOS/Source/tasks.c **** 		{
1187:../FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1188:../FreeRTOS/Source/tasks.c **** 			{
1189:../FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1190:../FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1191:../FreeRTOS/Source/tasks.c **** 			}
1192:../FreeRTOS/Source/tasks.c **** 			else
1193:../FreeRTOS/Source/tasks.c **** 			{
1194:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1195:../FreeRTOS/Source/tasks.c **** 			}
1196:../FreeRTOS/Source/tasks.c **** 		}
1197:../FreeRTOS/Source/tasks.c **** 	}
1198:../FreeRTOS/Source/tasks.c **** 
1199:../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1200:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1201:../FreeRTOS/Source/tasks.c **** 
1202:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1203:../FreeRTOS/Source/tasks.c **** 
1204:../FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1205:../FreeRTOS/Source/tasks.c **** 	{
1206:../FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1207:../FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1208:../FreeRTOS/Source/tasks.c **** 
1209:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1210:../FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1211:../FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1212:../FreeRTOS/Source/tasks.c **** 
1213:../FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1214:../FreeRTOS/Source/tasks.c **** 		{
1215:../FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1216:../FreeRTOS/Source/tasks.c **** 			block. */
1217:../FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1218:../FreeRTOS/Source/tasks.c **** 
1219:../FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1220:../FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1221:../FreeRTOS/Source/tasks.c **** 
1222:../FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1223:../FreeRTOS/Source/tasks.c **** 			{
1224:../FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1225:../FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1226:../FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1227:../FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1228:../FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1229:../FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 23


1230:../FreeRTOS/Source/tasks.c **** 				{
1231:../FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1232:../FreeRTOS/Source/tasks.c **** 				}
1233:../FreeRTOS/Source/tasks.c **** 				else
1234:../FreeRTOS/Source/tasks.c **** 				{
1235:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1236:../FreeRTOS/Source/tasks.c **** 				}
1237:../FreeRTOS/Source/tasks.c **** 			}
1238:../FreeRTOS/Source/tasks.c **** 			else
1239:../FreeRTOS/Source/tasks.c **** 			{
1240:../FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1241:../FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1242:../FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1243:../FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1244:../FreeRTOS/Source/tasks.c **** 				{
1245:../FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1246:../FreeRTOS/Source/tasks.c **** 				}
1247:../FreeRTOS/Source/tasks.c **** 				else
1248:../FreeRTOS/Source/tasks.c **** 				{
1249:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1250:../FreeRTOS/Source/tasks.c **** 				}
1251:../FreeRTOS/Source/tasks.c **** 			}
1252:../FreeRTOS/Source/tasks.c **** 
1253:../FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1254:../FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1255:../FreeRTOS/Source/tasks.c **** 
1256:../FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1257:../FreeRTOS/Source/tasks.c **** 			{
1258:../FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1259:../FreeRTOS/Source/tasks.c **** 
1260:../FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1261:../FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1262:../FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1263:../FreeRTOS/Source/tasks.c **** 			}
1264:../FreeRTOS/Source/tasks.c **** 			else
1265:../FreeRTOS/Source/tasks.c **** 			{
1266:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1267:../FreeRTOS/Source/tasks.c **** 			}
1268:../FreeRTOS/Source/tasks.c **** 		}
1269:../FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1270:../FreeRTOS/Source/tasks.c **** 
1271:../FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1272:../FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1273:../FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1274:../FreeRTOS/Source/tasks.c **** 		{
1275:../FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1276:../FreeRTOS/Source/tasks.c **** 		}
1277:../FreeRTOS/Source/tasks.c **** 		else
1278:../FreeRTOS/Source/tasks.c **** 		{
1279:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1280:../FreeRTOS/Source/tasks.c **** 		}
1281:../FreeRTOS/Source/tasks.c **** 	}
1282:../FreeRTOS/Source/tasks.c **** 
1283:../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1284:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1285:../FreeRTOS/Source/tasks.c **** 
1286:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 24


1287:../FreeRTOS/Source/tasks.c **** 
1288:../FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1289:../FreeRTOS/Source/tasks.c **** 	{
1290:../FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1291:../FreeRTOS/Source/tasks.c **** 
1292:../FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
1293:../FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1294:../FreeRTOS/Source/tasks.c **** 		{
1295:../FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1296:../FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1297:../FreeRTOS/Source/tasks.c **** 			{
1298:../FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1299:../FreeRTOS/Source/tasks.c **** 
1300:../FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1301:../FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1302:../FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1303:../FreeRTOS/Source/tasks.c **** 				is resumed.
1304:../FreeRTOS/Source/tasks.c **** 
1305:../FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1306:../FreeRTOS/Source/tasks.c **** 				executing task. */
1307:../FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1308:../FreeRTOS/Source/tasks.c **** 			}
1309:../FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1310:../FreeRTOS/Source/tasks.c **** 		}
1311:../FreeRTOS/Source/tasks.c **** 		else
1312:../FreeRTOS/Source/tasks.c **** 		{
1313:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1314:../FreeRTOS/Source/tasks.c **** 		}
1315:../FreeRTOS/Source/tasks.c **** 
1316:../FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1317:../FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1318:../FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1319:../FreeRTOS/Source/tasks.c **** 		{
1320:../FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1321:../FreeRTOS/Source/tasks.c **** 		}
1322:../FreeRTOS/Source/tasks.c **** 		else
1323:../FreeRTOS/Source/tasks.c **** 		{
1324:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1325:../FreeRTOS/Source/tasks.c **** 		}
1326:../FreeRTOS/Source/tasks.c **** 	}
1327:../FreeRTOS/Source/tasks.c **** 
1328:../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1329:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1330:../FreeRTOS/Source/tasks.c **** 
1331:../FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1332:../FreeRTOS/Source/tasks.c **** 
1333:../FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1334:../FreeRTOS/Source/tasks.c **** 	{
1335:../FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1336:../FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1337:../FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1338:../FreeRTOS/Source/tasks.c **** 
1339:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1340:../FreeRTOS/Source/tasks.c **** 
1341:../FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1342:../FreeRTOS/Source/tasks.c **** 		{
1343:../FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 25


1344:../FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1345:../FreeRTOS/Source/tasks.c **** 		}
1346:../FreeRTOS/Source/tasks.c **** 		else
1347:../FreeRTOS/Source/tasks.c **** 		{
1348:../FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1349:../FreeRTOS/Source/tasks.c **** 			{
1350:../FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1351:../FreeRTOS/Source/tasks.c **** 			}
1352:../FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1353:../FreeRTOS/Source/tasks.c **** 
1354:../FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1355:../FreeRTOS/Source/tasks.c **** 			{
1356:../FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1357:../FreeRTOS/Source/tasks.c **** 				lists. */
1358:../FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1359:../FreeRTOS/Source/tasks.c **** 			}
1360:../FreeRTOS/Source/tasks.c **** 
1361:../FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1362:../FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1363:../FreeRTOS/Source/tasks.c **** 				{
1364:../FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1365:../FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1366:../FreeRTOS/Source/tasks.c **** 					indefinitely? */
1367:../FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1368:../FreeRTOS/Source/tasks.c **** 					{
1369:../FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1370:../FreeRTOS/Source/tasks.c **** 					}
1371:../FreeRTOS/Source/tasks.c **** 					else
1372:../FreeRTOS/Source/tasks.c **** 					{
1373:../FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1374:../FreeRTOS/Source/tasks.c **** 					}
1375:../FreeRTOS/Source/tasks.c **** 				}
1376:../FreeRTOS/Source/tasks.c **** 			#endif
1377:../FreeRTOS/Source/tasks.c **** 
1378:../FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1379:../FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1380:../FreeRTOS/Source/tasks.c **** 				{
1381:../FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1382:../FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1383:../FreeRTOS/Source/tasks.c **** 					all. */
1384:../FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1385:../FreeRTOS/Source/tasks.c **** 				}
1386:../FreeRTOS/Source/tasks.c **** 			#endif
1387:../FreeRTOS/Source/tasks.c **** 
1388:../FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1389:../FreeRTOS/Source/tasks.c **** 			{
1390:../FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1391:../FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1392:../FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1393:../FreeRTOS/Source/tasks.c **** 			}
1394:../FreeRTOS/Source/tasks.c **** 		}
1395:../FreeRTOS/Source/tasks.c **** 
1396:../FreeRTOS/Source/tasks.c **** 		return eReturn;
1397:../FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1398:../FreeRTOS/Source/tasks.c **** 
1399:../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1400:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 26


1401:../FreeRTOS/Source/tasks.c **** 
1402:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1403:../FreeRTOS/Source/tasks.c **** 
1404:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1405:../FreeRTOS/Source/tasks.c **** 	{
1406:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1407:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1408:../FreeRTOS/Source/tasks.c **** 
1409:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1410:../FreeRTOS/Source/tasks.c **** 		{
1411:../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1412:../FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1413:../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1414:../FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1415:../FreeRTOS/Source/tasks.c **** 		}
1416:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1417:../FreeRTOS/Source/tasks.c **** 
1418:../FreeRTOS/Source/tasks.c **** 		return uxReturn;
1419:../FreeRTOS/Source/tasks.c **** 	}
1420:../FreeRTOS/Source/tasks.c **** 
1421:../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1422:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1423:../FreeRTOS/Source/tasks.c **** 
1424:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1425:../FreeRTOS/Source/tasks.c **** 
1426:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1427:../FreeRTOS/Source/tasks.c **** 	{
1428:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1429:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1430:../FreeRTOS/Source/tasks.c **** 
1431:../FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1432:../FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1433:../FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1434:../FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1435:../FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1436:../FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1437:../FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1438:../FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1439:../FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1440:../FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1441:../FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1442:../FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1443:../FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1444:../FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1445:../FreeRTOS/Source/tasks.c **** 		provided on the following link:
1446:../FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1447:../FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1448:../FreeRTOS/Source/tasks.c **** 
1449:../FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1450:../FreeRTOS/Source/tasks.c **** 		{
1451:../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1452:../FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1453:../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1454:../FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1455:../FreeRTOS/Source/tasks.c **** 		}
1456:../FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1457:../FreeRTOS/Source/tasks.c **** 
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 27


1458:../FreeRTOS/Source/tasks.c **** 		return uxReturn;
1459:../FreeRTOS/Source/tasks.c **** 	}
1460:../FreeRTOS/Source/tasks.c **** 
1461:../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1462:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1463:../FreeRTOS/Source/tasks.c **** 
1464:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1465:../FreeRTOS/Source/tasks.c **** 
1466:../FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1467:../FreeRTOS/Source/tasks.c **** 	{
1468:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1469:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1470:../FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1471:../FreeRTOS/Source/tasks.c **** 
1472:../FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1473:../FreeRTOS/Source/tasks.c **** 
1474:../FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1475:../FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1476:../FreeRTOS/Source/tasks.c **** 		{
1477:../FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1478:../FreeRTOS/Source/tasks.c **** 		}
1479:../FreeRTOS/Source/tasks.c **** 		else
1480:../FreeRTOS/Source/tasks.c **** 		{
1481:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1482:../FreeRTOS/Source/tasks.c **** 		}
1483:../FreeRTOS/Source/tasks.c **** 
1484:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1485:../FreeRTOS/Source/tasks.c **** 		{
1486:../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1487:../FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1488:../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1489:../FreeRTOS/Source/tasks.c **** 
1490:../FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1491:../FreeRTOS/Source/tasks.c **** 
1492:../FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1493:../FreeRTOS/Source/tasks.c **** 			{
1494:../FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1495:../FreeRTOS/Source/tasks.c **** 			}
1496:../FreeRTOS/Source/tasks.c **** 			#else
1497:../FreeRTOS/Source/tasks.c **** 			{
1498:../FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1499:../FreeRTOS/Source/tasks.c **** 			}
1500:../FreeRTOS/Source/tasks.c **** 			#endif
1501:../FreeRTOS/Source/tasks.c **** 
1502:../FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1503:../FreeRTOS/Source/tasks.c **** 			{
1504:../FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1505:../FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1506:../FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1507:../FreeRTOS/Source/tasks.c **** 				{
1508:../FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1509:../FreeRTOS/Source/tasks.c **** 					{
1510:../FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1511:../FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1512:../FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1513:../FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1514:../FreeRTOS/Source/tasks.c **** 						{
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 28


1515:../FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1516:../FreeRTOS/Source/tasks.c **** 						}
1517:../FreeRTOS/Source/tasks.c **** 						else
1518:../FreeRTOS/Source/tasks.c **** 						{
1519:../FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1520:../FreeRTOS/Source/tasks.c **** 						}
1521:../FreeRTOS/Source/tasks.c **** 					}
1522:../FreeRTOS/Source/tasks.c **** 					else
1523:../FreeRTOS/Source/tasks.c **** 					{
1524:../FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1525:../FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1526:../FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1527:../FreeRTOS/Source/tasks.c **** 					}
1528:../FreeRTOS/Source/tasks.c **** 				}
1529:../FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1530:../FreeRTOS/Source/tasks.c **** 				{
1531:../FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1532:../FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1533:../FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1534:../FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1535:../FreeRTOS/Source/tasks.c **** 				}
1536:../FreeRTOS/Source/tasks.c **** 				else
1537:../FreeRTOS/Source/tasks.c **** 				{
1538:../FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1539:../FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1540:../FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1541:../FreeRTOS/Source/tasks.c **** 				}
1542:../FreeRTOS/Source/tasks.c **** 
1543:../FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1544:../FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1545:../FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1546:../FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1547:../FreeRTOS/Source/tasks.c **** 
1548:../FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1549:../FreeRTOS/Source/tasks.c **** 				{
1550:../FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1551:../FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1552:../FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1553:../FreeRTOS/Source/tasks.c **** 					{
1554:../FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1555:../FreeRTOS/Source/tasks.c **** 					}
1556:../FreeRTOS/Source/tasks.c **** 					else
1557:../FreeRTOS/Source/tasks.c **** 					{
1558:../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1559:../FreeRTOS/Source/tasks.c **** 					}
1560:../FreeRTOS/Source/tasks.c **** 
1561:../FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1562:../FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1563:../FreeRTOS/Source/tasks.c **** 				}
1564:../FreeRTOS/Source/tasks.c **** 				#else
1565:../FreeRTOS/Source/tasks.c **** 				{
1566:../FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1567:../FreeRTOS/Source/tasks.c **** 				}
1568:../FreeRTOS/Source/tasks.c **** 				#endif
1569:../FreeRTOS/Source/tasks.c **** 
1570:../FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1571:../FreeRTOS/Source/tasks.c **** 				being used for anything else. */
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 29


1572:../FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1573:../FreeRTOS/Source/tasks.c **** 				{
1574:../FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1575:../FreeRTOS/Source/tasks.c **** 				}
1576:../FreeRTOS/Source/tasks.c **** 				else
1577:../FreeRTOS/Source/tasks.c **** 				{
1578:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1579:../FreeRTOS/Source/tasks.c **** 				}
1580:../FreeRTOS/Source/tasks.c **** 
1581:../FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1582:../FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1583:../FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1584:../FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1585:../FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1586:../FreeRTOS/Source/tasks.c **** 				{
1587:../FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1588:../FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1589:../FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1590:../FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1591:../FreeRTOS/Source/tasks.c **** 					{
1592:../FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1593:../FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1594:../FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1595:../FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1596:../FreeRTOS/Source/tasks.c **** 					}
1597:../FreeRTOS/Source/tasks.c **** 					else
1598:../FreeRTOS/Source/tasks.c **** 					{
1599:../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1600:../FreeRTOS/Source/tasks.c **** 					}
1601:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1602:../FreeRTOS/Source/tasks.c **** 				}
1603:../FreeRTOS/Source/tasks.c **** 				else
1604:../FreeRTOS/Source/tasks.c **** 				{
1605:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1606:../FreeRTOS/Source/tasks.c **** 				}
1607:../FreeRTOS/Source/tasks.c **** 
1608:../FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1609:../FreeRTOS/Source/tasks.c **** 				{
1610:../FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1611:../FreeRTOS/Source/tasks.c **** 				}
1612:../FreeRTOS/Source/tasks.c **** 				else
1613:../FreeRTOS/Source/tasks.c **** 				{
1614:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1615:../FreeRTOS/Source/tasks.c **** 				}
1616:../FreeRTOS/Source/tasks.c **** 
1617:../FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1618:../FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1619:../FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1620:../FreeRTOS/Source/tasks.c **** 			}
1621:../FreeRTOS/Source/tasks.c **** 		}
1622:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1623:../FreeRTOS/Source/tasks.c **** 	}
1624:../FreeRTOS/Source/tasks.c **** 
1625:../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1626:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1627:../FreeRTOS/Source/tasks.c **** 
1628:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 30


1629:../FreeRTOS/Source/tasks.c **** 
1630:../FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1631:../FreeRTOS/Source/tasks.c **** 	{
1632:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1633:../FreeRTOS/Source/tasks.c **** 
1634:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1635:../FreeRTOS/Source/tasks.c **** 		{
1636:../FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1637:../FreeRTOS/Source/tasks.c **** 			being suspended. */
1638:../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1639:../FreeRTOS/Source/tasks.c **** 
1640:../FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1641:../FreeRTOS/Source/tasks.c **** 
1642:../FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1643:../FreeRTOS/Source/tasks.c **** 			suspended list. */
1644:../FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1645:../FreeRTOS/Source/tasks.c **** 			{
1646:../FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1647:../FreeRTOS/Source/tasks.c **** 			}
1648:../FreeRTOS/Source/tasks.c **** 			else
1649:../FreeRTOS/Source/tasks.c **** 			{
1650:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1651:../FreeRTOS/Source/tasks.c **** 			}
1652:../FreeRTOS/Source/tasks.c **** 
1653:../FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1654:../FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1655:../FreeRTOS/Source/tasks.c **** 			{
1656:../FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1657:../FreeRTOS/Source/tasks.c **** 			}
1658:../FreeRTOS/Source/tasks.c **** 			else
1659:../FreeRTOS/Source/tasks.c **** 			{
1660:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1661:../FreeRTOS/Source/tasks.c **** 			}
1662:../FreeRTOS/Source/tasks.c **** 
1663:../FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1664:../FreeRTOS/Source/tasks.c **** 
1665:../FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1666:../FreeRTOS/Source/tasks.c **** 			{
1667:../FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1668:../FreeRTOS/Source/tasks.c **** 				{
1669:../FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1670:../FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1671:../FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1672:../FreeRTOS/Source/tasks.c **** 				}
1673:../FreeRTOS/Source/tasks.c **** 			}
1674:../FreeRTOS/Source/tasks.c **** 			#endif
1675:../FreeRTOS/Source/tasks.c **** 		}
1676:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1677:../FreeRTOS/Source/tasks.c **** 
1678:../FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1679:../FreeRTOS/Source/tasks.c **** 		{
1680:../FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1681:../FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1682:../FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1683:../FreeRTOS/Source/tasks.c **** 			{
1684:../FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1685:../FreeRTOS/Source/tasks.c **** 			}
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 31


1686:../FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1687:../FreeRTOS/Source/tasks.c **** 		}
1688:../FreeRTOS/Source/tasks.c **** 		else
1689:../FreeRTOS/Source/tasks.c **** 		{
1690:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1691:../FreeRTOS/Source/tasks.c **** 		}
1692:../FreeRTOS/Source/tasks.c **** 
1693:../FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1694:../FreeRTOS/Source/tasks.c **** 		{
1695:../FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1696:../FreeRTOS/Source/tasks.c **** 			{
1697:../FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1698:../FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1699:../FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1700:../FreeRTOS/Source/tasks.c **** 			}
1701:../FreeRTOS/Source/tasks.c **** 			else
1702:../FreeRTOS/Source/tasks.c **** 			{
1703:../FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1704:../FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1705:../FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1706:../FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1707:../FreeRTOS/Source/tasks.c **** 				{
1708:../FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1709:../FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1710:../FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1711:../FreeRTOS/Source/tasks.c **** 					is. */
1712:../FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1713:../FreeRTOS/Source/tasks.c **** 				}
1714:../FreeRTOS/Source/tasks.c **** 				else
1715:../FreeRTOS/Source/tasks.c **** 				{
1716:../FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1717:../FreeRTOS/Source/tasks.c **** 				}
1718:../FreeRTOS/Source/tasks.c **** 			}
1719:../FreeRTOS/Source/tasks.c **** 		}
1720:../FreeRTOS/Source/tasks.c **** 		else
1721:../FreeRTOS/Source/tasks.c **** 		{
1722:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1723:../FreeRTOS/Source/tasks.c **** 		}
1724:../FreeRTOS/Source/tasks.c **** 	}
1725:../FreeRTOS/Source/tasks.c **** 
1726:../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1727:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1728:../FreeRTOS/Source/tasks.c **** 
1729:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1730:../FreeRTOS/Source/tasks.c **** 
1731:../FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1732:../FreeRTOS/Source/tasks.c **** 	{
  27              		.loc 1 1732 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1733:../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1734:../FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1735:../FreeRTOS/Source/tasks.c **** 
1736:../FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 32


1737:../FreeRTOS/Source/tasks.c **** 		section. */
1738:../FreeRTOS/Source/tasks.c **** 
1739:../FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1740:../FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  33              		.loc 1 1740 0
  34 0000 50B1     		cbz	r0, .L8
1741:../FreeRTOS/Source/tasks.c **** 
1742:../FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1743:../FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  35              		.loc 1 1743 0
  36 0002 4169     		ldr	r1, [r0, #20]
  37 0004 0C4A     		ldr	r2, .L9
  38 0006 9142     		cmp	r1, r2
  39 0008 0FD1     		bne	.L5
1744:../FreeRTOS/Source/tasks.c **** 		{
1745:../FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1746:../FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  40              		.loc 1 1746 0
  41 000a 836A     		ldr	r3, [r0, #40]
  42 000c 0B4A     		ldr	r2, .L9+4
  43 000e 9342     		cmp	r3, r2
  44 0010 0DD0     		beq	.L6
1747:../FreeRTOS/Source/tasks.c **** 			{
1748:../FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1749:../FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1750:../FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  45              		.loc 1 1750 0
  46 0012 73B1     		cbz	r3, .L7
1733:../FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  47              		.loc 1 1733 0
  48 0014 0020     		movs	r0, #0
  49              	.LVL1:
  50 0016 7047     		bx	lr
  51              	.LVL2:
  52              	.L8:
  53              	.LBB106:
  54              	.LBB107:
  55              		.file 2 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 33


  20:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 34


  77:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 35


 134:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 36


 191:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  56              		.loc 2 195 0
  57              		.syntax unified
  58              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  59 0018 4FF05003 			mov r3, #80												
  60 001c 83F31188 		msr basepri, r3											
  61 0020 BFF36F8F 		isb														
  62 0024 BFF34F8F 		dsb														
  63              	
  64              	@ 0 "" 2
  65              	.LVL3:
  66              		.thumb
  67              		.syntax unified
  68              	.L3:
  69 0028 FEE7     		b	.L3
  70              	.L5:
  71              	.LBE107:
  72              	.LBE106:
1733:../FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  73              		.loc 1 1733 0
  74 002a 0020     		movs	r0, #0
  75              	.LVL4:
  76 002c 7047     		bx	lr
  77              	.LVL5:
  78              	.L6:
  79 002e 0020     		movs	r0, #0
  80              	.LVL6:
  81 0030 7047     		bx	lr
  82              	.LVL7:
  83              	.L7:
1751:../FreeRTOS/Source/tasks.c **** 				{
1752:../FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  84              		.loc 1 1752 0
  85 0032 0120     		movs	r0, #1
  86              	.LVL8:
1753:../FreeRTOS/Source/tasks.c **** 				}
1754:../FreeRTOS/Source/tasks.c **** 				else
1755:../FreeRTOS/Source/tasks.c **** 				{
1756:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1757:../FreeRTOS/Source/tasks.c **** 				}
1758:../FreeRTOS/Source/tasks.c **** 			}
1759:../FreeRTOS/Source/tasks.c **** 			else
1760:../FreeRTOS/Source/tasks.c **** 			{
1761:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1762:../FreeRTOS/Source/tasks.c **** 			}
1763:../FreeRTOS/Source/tasks.c **** 		}
1764:../FreeRTOS/Source/tasks.c **** 		else
1765:../FreeRTOS/Source/tasks.c **** 		{
1766:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1767:../FreeRTOS/Source/tasks.c **** 		}
1768:../FreeRTOS/Source/tasks.c **** 
1769:../FreeRTOS/Source/tasks.c **** 		return xReturn;
1770:../FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 37


  87              		.loc 1 1770 0
  88 0034 7047     		bx	lr
  89              	.L10:
  90 0036 00BF     		.align	2
  91              	.L9:
  92 0038 00000000 		.word	.LANCHOR0
  93 003c 00000000 		.word	.LANCHOR1
  94              		.cfi_endproc
  95              	.LFE16:
  97              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
  98              		.align	1
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 102              		.fpu fpv4-sp-d16
 104              	prvTaskCheckFreeStackSpace:
 105              	.LFB46:
1771:../FreeRTOS/Source/tasks.c **** 
1772:../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1773:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1774:../FreeRTOS/Source/tasks.c **** 
1775:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1776:../FreeRTOS/Source/tasks.c **** 
1777:../FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1778:../FreeRTOS/Source/tasks.c **** 	{
1779:../FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1780:../FreeRTOS/Source/tasks.c **** 
1781:../FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1782:../FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1783:../FreeRTOS/Source/tasks.c **** 
1784:../FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1785:../FreeRTOS/Source/tasks.c **** 		currently executing task. */
1786:../FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1787:../FreeRTOS/Source/tasks.c **** 		{
1788:../FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1789:../FreeRTOS/Source/tasks.c **** 			{
1790:../FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1791:../FreeRTOS/Source/tasks.c **** 				{
1792:../FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1793:../FreeRTOS/Source/tasks.c **** 
1794:../FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1795:../FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1796:../FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1797:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1798:../FreeRTOS/Source/tasks.c **** 
1799:../FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1800:../FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1801:../FreeRTOS/Source/tasks.c **** 					{
1802:../FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1803:../FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1804:../FreeRTOS/Source/tasks.c **** 						next yield. */
1805:../FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1806:../FreeRTOS/Source/tasks.c **** 					}
1807:../FreeRTOS/Source/tasks.c **** 					else
1808:../FreeRTOS/Source/tasks.c **** 					{
1809:../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1810:../FreeRTOS/Source/tasks.c **** 					}
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 38


1811:../FreeRTOS/Source/tasks.c **** 				}
1812:../FreeRTOS/Source/tasks.c **** 				else
1813:../FreeRTOS/Source/tasks.c **** 				{
1814:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1815:../FreeRTOS/Source/tasks.c **** 				}
1816:../FreeRTOS/Source/tasks.c **** 			}
1817:../FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1818:../FreeRTOS/Source/tasks.c **** 		}
1819:../FreeRTOS/Source/tasks.c **** 		else
1820:../FreeRTOS/Source/tasks.c **** 		{
1821:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1822:../FreeRTOS/Source/tasks.c **** 		}
1823:../FreeRTOS/Source/tasks.c **** 	}
1824:../FreeRTOS/Source/tasks.c **** 
1825:../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1826:../FreeRTOS/Source/tasks.c **** 
1827:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1828:../FreeRTOS/Source/tasks.c **** 
1829:../FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1830:../FreeRTOS/Source/tasks.c **** 
1831:../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1832:../FreeRTOS/Source/tasks.c **** 	{
1833:../FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1834:../FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1835:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1836:../FreeRTOS/Source/tasks.c **** 
1837:../FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1838:../FreeRTOS/Source/tasks.c **** 
1839:../FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1840:../FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1841:../FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1842:../FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1843:../FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1844:../FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1845:../FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1846:../FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1847:../FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1848:../FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1849:../FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1850:../FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1851:../FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1852:../FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1853:../FreeRTOS/Source/tasks.c **** 		provided on the following link:
1854:../FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1855:../FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1856:../FreeRTOS/Source/tasks.c **** 
1857:../FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1858:../FreeRTOS/Source/tasks.c **** 		{
1859:../FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1860:../FreeRTOS/Source/tasks.c **** 			{
1861:../FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
1862:../FreeRTOS/Source/tasks.c **** 
1863:../FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1864:../FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1865:../FreeRTOS/Source/tasks.c **** 				{
1866:../FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1867:../FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 39


1868:../FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1869:../FreeRTOS/Source/tasks.c **** 					{
1870:../FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1871:../FreeRTOS/Source/tasks.c **** 					}
1872:../FreeRTOS/Source/tasks.c **** 					else
1873:../FreeRTOS/Source/tasks.c **** 					{
1874:../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1875:../FreeRTOS/Source/tasks.c **** 					}
1876:../FreeRTOS/Source/tasks.c **** 
1877:../FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1878:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1879:../FreeRTOS/Source/tasks.c **** 				}
1880:../FreeRTOS/Source/tasks.c **** 				else
1881:../FreeRTOS/Source/tasks.c **** 				{
1882:../FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1883:../FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1884:../FreeRTOS/Source/tasks.c **** 					unsuspended. */
1885:../FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1886:../FreeRTOS/Source/tasks.c **** 				}
1887:../FreeRTOS/Source/tasks.c **** 			}
1888:../FreeRTOS/Source/tasks.c **** 			else
1889:../FreeRTOS/Source/tasks.c **** 			{
1890:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1891:../FreeRTOS/Source/tasks.c **** 			}
1892:../FreeRTOS/Source/tasks.c **** 		}
1893:../FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1894:../FreeRTOS/Source/tasks.c **** 
1895:../FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1896:../FreeRTOS/Source/tasks.c **** 	}
1897:../FreeRTOS/Source/tasks.c **** 
1898:../FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1899:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1900:../FreeRTOS/Source/tasks.c **** 
1901:../FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1902:../FreeRTOS/Source/tasks.c **** {
1903:../FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1904:../FreeRTOS/Source/tasks.c **** 
1905:../FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1906:../FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1907:../FreeRTOS/Source/tasks.c **** 	{
1908:../FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1909:../FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1910:../FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1911:../FreeRTOS/Source/tasks.c **** 
1912:../FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1913:../FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1914:../FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1915:../FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1916:../FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1917:../FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1918:../FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
1919:../FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1920:../FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1921:../FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1922:../FreeRTOS/Source/tasks.c **** 
1923:../FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1924:../FreeRTOS/Source/tasks.c **** 		{
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 40


1925:../FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1926:../FreeRTOS/Source/tasks.c **** 		}
1927:../FreeRTOS/Source/tasks.c **** 		else
1928:../FreeRTOS/Source/tasks.c **** 		{
1929:../FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1930:../FreeRTOS/Source/tasks.c **** 		}
1931:../FreeRTOS/Source/tasks.c **** 	}
1932:../FreeRTOS/Source/tasks.c **** 	#else
1933:../FreeRTOS/Source/tasks.c **** 	{
1934:../FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1935:../FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1936:../FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
1937:../FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
1938:../FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1939:../FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1940:../FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1941:../FreeRTOS/Source/tasks.c **** 	}
1942:../FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1943:../FreeRTOS/Source/tasks.c **** 
1944:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1945:../FreeRTOS/Source/tasks.c **** 	{
1946:../FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1947:../FreeRTOS/Source/tasks.c **** 		{
1948:../FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1949:../FreeRTOS/Source/tasks.c **** 		}
1950:../FreeRTOS/Source/tasks.c **** 		else
1951:../FreeRTOS/Source/tasks.c **** 		{
1952:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1953:../FreeRTOS/Source/tasks.c **** 		}
1954:../FreeRTOS/Source/tasks.c **** 	}
1955:../FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1956:../FreeRTOS/Source/tasks.c **** 
1957:../FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1958:../FreeRTOS/Source/tasks.c **** 	{
1959:../FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1960:../FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1961:../FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
1962:../FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1963:../FreeRTOS/Source/tasks.c **** 		{
1964:../FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
1965:../FreeRTOS/Source/tasks.c **** 		}
1966:../FreeRTOS/Source/tasks.c **** 		#endif
1967:../FreeRTOS/Source/tasks.c **** 
1968:../FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1969:../FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1970:../FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1971:../FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1972:../FreeRTOS/Source/tasks.c **** 		starts to run. */
1973:../FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1974:../FreeRTOS/Source/tasks.c **** 
1975:../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
1976:../FreeRTOS/Source/tasks.c **** 		{
1977:../FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1978:../FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1979:../FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1980:../FreeRTOS/Source/tasks.c **** 		}
1981:../FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 41


1982:../FreeRTOS/Source/tasks.c **** 
1983:../FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1984:../FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1985:../FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1986:../FreeRTOS/Source/tasks.c **** 
1987:../FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1988:../FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1989:../FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1990:../FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1991:../FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1992:../FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
1993:../FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1994:../FreeRTOS/Source/tasks.c **** 
1995:../FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1996:../FreeRTOS/Source/tasks.c **** 		portable interface. */
1997:../FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1998:../FreeRTOS/Source/tasks.c **** 		{
1999:../FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
2000:../FreeRTOS/Source/tasks.c **** 			function will not return. */
2001:../FreeRTOS/Source/tasks.c **** 		}
2002:../FreeRTOS/Source/tasks.c **** 		else
2003:../FreeRTOS/Source/tasks.c **** 		{
2004:../FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
2005:../FreeRTOS/Source/tasks.c **** 		}
2006:../FreeRTOS/Source/tasks.c **** 	}
2007:../FreeRTOS/Source/tasks.c **** 	else
2008:../FreeRTOS/Source/tasks.c **** 	{
2009:../FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2010:../FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2011:../FreeRTOS/Source/tasks.c **** 		or the timer task. */
2012:../FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2013:../FreeRTOS/Source/tasks.c **** 	}
2014:../FreeRTOS/Source/tasks.c **** 
2015:../FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2016:../FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2017:../FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2018:../FreeRTOS/Source/tasks.c **** }
2019:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2020:../FreeRTOS/Source/tasks.c **** 
2021:../FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2022:../FreeRTOS/Source/tasks.c **** {
2023:../FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2024:../FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2025:../FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2026:../FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2027:../FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2028:../FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2029:../FreeRTOS/Source/tasks.c **** }
2030:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2031:../FreeRTOS/Source/tasks.c **** 
2032:../FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
2033:../FreeRTOS/Source/tasks.c **** {
2034:../FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2035:../FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2036:../FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2037:../FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2038:../FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 42


2039:../FreeRTOS/Source/tasks.c **** }
2040:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2041:../FreeRTOS/Source/tasks.c **** 
2042:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2043:../FreeRTOS/Source/tasks.c **** 
2044:../FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2045:../FreeRTOS/Source/tasks.c **** 	{
2046:../FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2047:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2048:../FreeRTOS/Source/tasks.c **** 
2049:../FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2050:../FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2051:../FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2052:../FreeRTOS/Source/tasks.c **** 		running. */
2053:../FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2054:../FreeRTOS/Source/tasks.c **** 		{
2055:../FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2056:../FreeRTOS/Source/tasks.c **** 			{
2057:../FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2058:../FreeRTOS/Source/tasks.c **** 			}
2059:../FreeRTOS/Source/tasks.c **** 		}
2060:../FreeRTOS/Source/tasks.c **** 		#else
2061:../FreeRTOS/Source/tasks.c **** 		{
2062:../FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2063:../FreeRTOS/Source/tasks.c **** 
2064:../FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2065:../FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2066:../FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2067:../FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2068:../FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2069:../FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2070:../FreeRTOS/Source/tasks.c **** 			{
2071:../FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2072:../FreeRTOS/Source/tasks.c **** 			}
2073:../FreeRTOS/Source/tasks.c **** 		}
2074:../FreeRTOS/Source/tasks.c **** 		#endif
2075:../FreeRTOS/Source/tasks.c **** 
2076:../FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2077:../FreeRTOS/Source/tasks.c **** 		{
2078:../FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2079:../FreeRTOS/Source/tasks.c **** 		}
2080:../FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2081:../FreeRTOS/Source/tasks.c **** 		{
2082:../FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2083:../FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2084:../FreeRTOS/Source/tasks.c **** 			processed. */
2085:../FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2086:../FreeRTOS/Source/tasks.c **** 		}
2087:../FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2088:../FreeRTOS/Source/tasks.c **** 		{
2089:../FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
2090:../FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2091:../FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2092:../FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2093:../FreeRTOS/Source/tasks.c **** 		}
2094:../FreeRTOS/Source/tasks.c **** 		else
2095:../FreeRTOS/Source/tasks.c **** 		{
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 43


2096:../FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2097:../FreeRTOS/Source/tasks.c **** 		}
2098:../FreeRTOS/Source/tasks.c **** 
2099:../FreeRTOS/Source/tasks.c **** 		return xReturn;
2100:../FreeRTOS/Source/tasks.c **** 	}
2101:../FreeRTOS/Source/tasks.c **** 
2102:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2103:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2104:../FreeRTOS/Source/tasks.c **** 
2105:../FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2106:../FreeRTOS/Source/tasks.c **** {
2107:../FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2108:../FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2109:../FreeRTOS/Source/tasks.c **** 
2110:../FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2111:../FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2112:../FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2113:../FreeRTOS/Source/tasks.c **** 
2114:../FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2115:../FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2116:../FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2117:../FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2118:../FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2119:../FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2120:../FreeRTOS/Source/tasks.c **** 	{
2121:../FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2122:../FreeRTOS/Source/tasks.c **** 
2123:../FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2124:../FreeRTOS/Source/tasks.c **** 		{
2125:../FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2126:../FreeRTOS/Source/tasks.c **** 			{
2127:../FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2128:../FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2129:../FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2130:../FreeRTOS/Source/tasks.c **** 				{
2131:../FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2132:../FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2133:../FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2134:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2135:../FreeRTOS/Source/tasks.c **** 
2136:../FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2137:../FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2138:../FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2139:../FreeRTOS/Source/tasks.c **** 					{
2140:../FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2141:../FreeRTOS/Source/tasks.c **** 					}
2142:../FreeRTOS/Source/tasks.c **** 					else
2143:../FreeRTOS/Source/tasks.c **** 					{
2144:../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2145:../FreeRTOS/Source/tasks.c **** 					}
2146:../FreeRTOS/Source/tasks.c **** 				}
2147:../FreeRTOS/Source/tasks.c **** 
2148:../FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2149:../FreeRTOS/Source/tasks.c **** 				{
2150:../FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2151:../FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2152:../FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 44


2153:../FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2154:../FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2155:../FreeRTOS/Source/tasks.c **** 					state. */
2156:../FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2157:../FreeRTOS/Source/tasks.c **** 				}
2158:../FreeRTOS/Source/tasks.c **** 
2159:../FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2160:../FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2161:../FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2162:../FreeRTOS/Source/tasks.c **** 				time. */
2163:../FreeRTOS/Source/tasks.c **** 				{
2164:../FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2165:../FreeRTOS/Source/tasks.c **** 
2166:../FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2167:../FreeRTOS/Source/tasks.c **** 					{
2168:../FreeRTOS/Source/tasks.c **** 						do
2169:../FreeRTOS/Source/tasks.c **** 						{
2170:../FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2171:../FreeRTOS/Source/tasks.c **** 							{
2172:../FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2173:../FreeRTOS/Source/tasks.c **** 							}
2174:../FreeRTOS/Source/tasks.c **** 							else
2175:../FreeRTOS/Source/tasks.c **** 							{
2176:../FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2177:../FreeRTOS/Source/tasks.c **** 							}
2178:../FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2179:../FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2180:../FreeRTOS/Source/tasks.c **** 
2181:../FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2182:../FreeRTOS/Source/tasks.c **** 					}
2183:../FreeRTOS/Source/tasks.c **** 					else
2184:../FreeRTOS/Source/tasks.c **** 					{
2185:../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2186:../FreeRTOS/Source/tasks.c **** 					}
2187:../FreeRTOS/Source/tasks.c **** 				}
2188:../FreeRTOS/Source/tasks.c **** 
2189:../FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2190:../FreeRTOS/Source/tasks.c **** 				{
2191:../FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2192:../FreeRTOS/Source/tasks.c **** 					{
2193:../FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2194:../FreeRTOS/Source/tasks.c **** 					}
2195:../FreeRTOS/Source/tasks.c **** 					#endif
2196:../FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2197:../FreeRTOS/Source/tasks.c **** 				}
2198:../FreeRTOS/Source/tasks.c **** 				else
2199:../FreeRTOS/Source/tasks.c **** 				{
2200:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2201:../FreeRTOS/Source/tasks.c **** 				}
2202:../FreeRTOS/Source/tasks.c **** 			}
2203:../FreeRTOS/Source/tasks.c **** 		}
2204:../FreeRTOS/Source/tasks.c **** 		else
2205:../FreeRTOS/Source/tasks.c **** 		{
2206:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2207:../FreeRTOS/Source/tasks.c **** 		}
2208:../FreeRTOS/Source/tasks.c **** 	}
2209:../FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 45


2210:../FreeRTOS/Source/tasks.c **** 
2211:../FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2212:../FreeRTOS/Source/tasks.c **** }
2213:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2214:../FreeRTOS/Source/tasks.c **** 
2215:../FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2216:../FreeRTOS/Source/tasks.c **** {
2217:../FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2218:../FreeRTOS/Source/tasks.c **** 
2219:../FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2220:../FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2221:../FreeRTOS/Source/tasks.c **** 	{
2222:../FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2223:../FreeRTOS/Source/tasks.c **** 	}
2224:../FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2225:../FreeRTOS/Source/tasks.c **** 
2226:../FreeRTOS/Source/tasks.c **** 	return xTicks;
2227:../FreeRTOS/Source/tasks.c **** }
2228:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2229:../FreeRTOS/Source/tasks.c **** 
2230:../FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2231:../FreeRTOS/Source/tasks.c **** {
2232:../FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2233:../FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2234:../FreeRTOS/Source/tasks.c **** 
2235:../FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2236:../FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2237:../FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2238:../FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2239:../FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2240:../FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2241:../FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2242:../FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2243:../FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2244:../FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2245:../FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2246:../FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2247:../FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2248:../FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2249:../FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2250:../FreeRTOS/Source/tasks.c **** 
2251:../FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2252:../FreeRTOS/Source/tasks.c **** 	{
2253:../FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2254:../FreeRTOS/Source/tasks.c **** 	}
2255:../FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2256:../FreeRTOS/Source/tasks.c **** 
2257:../FreeRTOS/Source/tasks.c **** 	return xReturn;
2258:../FreeRTOS/Source/tasks.c **** }
2259:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2260:../FreeRTOS/Source/tasks.c **** 
2261:../FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2262:../FreeRTOS/Source/tasks.c **** {
2263:../FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2264:../FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2265:../FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2266:../FreeRTOS/Source/tasks.c **** }
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 46


2267:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2268:../FreeRTOS/Source/tasks.c **** 
2269:../FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2270:../FreeRTOS/Source/tasks.c **** {
2271:../FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2272:../FreeRTOS/Source/tasks.c **** 
2273:../FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2274:../FreeRTOS/Source/tasks.c **** 	queried. */
2275:../FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2276:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2277:../FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2278:../FreeRTOS/Source/tasks.c **** }
2279:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2280:../FreeRTOS/Source/tasks.c **** 
2281:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2282:../FreeRTOS/Source/tasks.c **** 
2283:../FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2284:../FreeRTOS/Source/tasks.c **** 	{
2285:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2286:../FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2287:../FreeRTOS/Source/tasks.c **** 	char cNextChar;
2288:../FreeRTOS/Source/tasks.c **** 
2289:../FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2290:../FreeRTOS/Source/tasks.c **** 
2291:../FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2292:../FreeRTOS/Source/tasks.c **** 		{
2293:../FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2294:../FreeRTOS/Source/tasks.c **** 
2295:../FreeRTOS/Source/tasks.c **** 			do
2296:../FreeRTOS/Source/tasks.c **** 			{
2297:../FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2298:../FreeRTOS/Source/tasks.c **** 
2299:../FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2300:../FreeRTOS/Source/tasks.c **** 				mismatch. */
2301:../FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2302:../FreeRTOS/Source/tasks.c **** 				{
2303:../FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2304:../FreeRTOS/Source/tasks.c **** 
2305:../FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2306:../FreeRTOS/Source/tasks.c **** 					{
2307:../FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2308:../FreeRTOS/Source/tasks.c **** 						break;
2309:../FreeRTOS/Source/tasks.c **** 					}
2310:../FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2311:../FreeRTOS/Source/tasks.c **** 					{
2312:../FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2313:../FreeRTOS/Source/tasks.c **** 						found. */
2314:../FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2315:../FreeRTOS/Source/tasks.c **** 						break;
2316:../FreeRTOS/Source/tasks.c **** 					}
2317:../FreeRTOS/Source/tasks.c **** 					else
2318:../FreeRTOS/Source/tasks.c **** 					{
2319:../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2320:../FreeRTOS/Source/tasks.c **** 					}
2321:../FreeRTOS/Source/tasks.c **** 				}
2322:../FreeRTOS/Source/tasks.c **** 
2323:../FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 47


2324:../FreeRTOS/Source/tasks.c **** 				{
2325:../FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2326:../FreeRTOS/Source/tasks.c **** 					break;
2327:../FreeRTOS/Source/tasks.c **** 				}
2328:../FreeRTOS/Source/tasks.c **** 
2329:../FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2330:../FreeRTOS/Source/tasks.c **** 		}
2331:../FreeRTOS/Source/tasks.c **** 		else
2332:../FreeRTOS/Source/tasks.c **** 		{
2333:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2334:../FreeRTOS/Source/tasks.c **** 		}
2335:../FreeRTOS/Source/tasks.c **** 
2336:../FreeRTOS/Source/tasks.c **** 		return pxReturn;
2337:../FreeRTOS/Source/tasks.c **** 	}
2338:../FreeRTOS/Source/tasks.c **** 
2339:../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2340:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2341:../FreeRTOS/Source/tasks.c **** 
2342:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2343:../FreeRTOS/Source/tasks.c **** 
2344:../FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2345:../FreeRTOS/Source/tasks.c **** 	{
2346:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2347:../FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2348:../FreeRTOS/Source/tasks.c **** 
2349:../FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2350:../FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2351:../FreeRTOS/Source/tasks.c **** 
2352:../FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2353:../FreeRTOS/Source/tasks.c **** 		{
2354:../FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2355:../FreeRTOS/Source/tasks.c **** 			do
2356:../FreeRTOS/Source/tasks.c **** 			{
2357:../FreeRTOS/Source/tasks.c **** 				uxQueue--;
2358:../FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2359:../FreeRTOS/Source/tasks.c **** 
2360:../FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2361:../FreeRTOS/Source/tasks.c **** 				{
2362:../FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2363:../FreeRTOS/Source/tasks.c **** 					break;
2364:../FreeRTOS/Source/tasks.c **** 				}
2365:../FreeRTOS/Source/tasks.c **** 
2366:../FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2367:../FreeRTOS/Source/tasks.c **** 
2368:../FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2369:../FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2370:../FreeRTOS/Source/tasks.c **** 			{
2371:../FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2372:../FreeRTOS/Source/tasks.c **** 			}
2373:../FreeRTOS/Source/tasks.c **** 
2374:../FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2375:../FreeRTOS/Source/tasks.c **** 			{
2376:../FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2377:../FreeRTOS/Source/tasks.c **** 			}
2378:../FreeRTOS/Source/tasks.c **** 
2379:../FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2380:../FreeRTOS/Source/tasks.c **** 			{
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 48


2381:../FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2382:../FreeRTOS/Source/tasks.c **** 				{
2383:../FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2384:../FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2385:../FreeRTOS/Source/tasks.c **** 				}
2386:../FreeRTOS/Source/tasks.c **** 			}
2387:../FreeRTOS/Source/tasks.c **** 			#endif
2388:../FreeRTOS/Source/tasks.c **** 
2389:../FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2390:../FreeRTOS/Source/tasks.c **** 			{
2391:../FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2392:../FreeRTOS/Source/tasks.c **** 				{
2393:../FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2394:../FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2395:../FreeRTOS/Source/tasks.c **** 				}
2396:../FreeRTOS/Source/tasks.c **** 			}
2397:../FreeRTOS/Source/tasks.c **** 			#endif
2398:../FreeRTOS/Source/tasks.c **** 		}
2399:../FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2400:../FreeRTOS/Source/tasks.c **** 
2401:../FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2402:../FreeRTOS/Source/tasks.c **** 	}
2403:../FreeRTOS/Source/tasks.c **** 
2404:../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2405:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2406:../FreeRTOS/Source/tasks.c **** 
2407:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2408:../FreeRTOS/Source/tasks.c **** 
2409:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2410:../FreeRTOS/Source/tasks.c **** 	{
2411:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2412:../FreeRTOS/Source/tasks.c **** 
2413:../FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2414:../FreeRTOS/Source/tasks.c **** 		{
2415:../FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2416:../FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2417:../FreeRTOS/Source/tasks.c **** 			{
2418:../FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2419:../FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2420:../FreeRTOS/Source/tasks.c **** 				do
2421:../FreeRTOS/Source/tasks.c **** 				{
2422:../FreeRTOS/Source/tasks.c **** 					uxQueue--;
2423:../FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2424:../FreeRTOS/Source/tasks.c **** 
2425:../FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2426:../FreeRTOS/Source/tasks.c **** 
2427:../FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2428:../FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2429:../FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2430:../FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2431:../FreeRTOS/Source/tasks.c **** 
2432:../FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2433:../FreeRTOS/Source/tasks.c **** 				{
2434:../FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2435:../FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2436:../FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2437:../FreeRTOS/Source/tasks.c **** 				}
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 49


2438:../FreeRTOS/Source/tasks.c **** 				#endif
2439:../FreeRTOS/Source/tasks.c **** 
2440:../FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2441:../FreeRTOS/Source/tasks.c **** 				{
2442:../FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2443:../FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2444:../FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2445:../FreeRTOS/Source/tasks.c **** 				}
2446:../FreeRTOS/Source/tasks.c **** 				#endif
2447:../FreeRTOS/Source/tasks.c **** 
2448:../FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2449:../FreeRTOS/Source/tasks.c **** 				{
2450:../FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2451:../FreeRTOS/Source/tasks.c **** 					{
2452:../FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2453:../FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2454:../FreeRTOS/Source/tasks.c **** 						#else
2455:../FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2456:../FreeRTOS/Source/tasks.c **** 						#endif
2457:../FreeRTOS/Source/tasks.c **** 					}
2458:../FreeRTOS/Source/tasks.c **** 				}
2459:../FreeRTOS/Source/tasks.c **** 				#else
2460:../FreeRTOS/Source/tasks.c **** 				{
2461:../FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2462:../FreeRTOS/Source/tasks.c **** 					{
2463:../FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2464:../FreeRTOS/Source/tasks.c **** 					}
2465:../FreeRTOS/Source/tasks.c **** 				}
2466:../FreeRTOS/Source/tasks.c **** 				#endif
2467:../FreeRTOS/Source/tasks.c **** 			}
2468:../FreeRTOS/Source/tasks.c **** 			else
2469:../FreeRTOS/Source/tasks.c **** 			{
2470:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2471:../FreeRTOS/Source/tasks.c **** 			}
2472:../FreeRTOS/Source/tasks.c **** 		}
2473:../FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2474:../FreeRTOS/Source/tasks.c **** 
2475:../FreeRTOS/Source/tasks.c **** 		return uxTask;
2476:../FreeRTOS/Source/tasks.c **** 	}
2477:../FreeRTOS/Source/tasks.c **** 
2478:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2479:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2480:../FreeRTOS/Source/tasks.c **** 
2481:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2482:../FreeRTOS/Source/tasks.c **** 
2483:../FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2484:../FreeRTOS/Source/tasks.c **** 	{
2485:../FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2486:../FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2487:../FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2488:../FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
2489:../FreeRTOS/Source/tasks.c **** 	}
2490:../FreeRTOS/Source/tasks.c **** 
2491:../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2492:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2493:../FreeRTOS/Source/tasks.c **** 
2494:../FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 50


2495:../FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2496:../FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2497:../FreeRTOS/Source/tasks.c **** 1. */
2498:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2499:../FreeRTOS/Source/tasks.c **** 
2500:../FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2501:../FreeRTOS/Source/tasks.c **** 	{
2502:../FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2503:../FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2504:../FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2505:../FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2506:../FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2507:../FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2508:../FreeRTOS/Source/tasks.c **** 	}
2509:../FreeRTOS/Source/tasks.c **** 
2510:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2511:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2512:../FreeRTOS/Source/tasks.c **** 
2513:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2514:../FreeRTOS/Source/tasks.c **** 
2515:../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2516:../FreeRTOS/Source/tasks.c **** 	{
2517:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2518:../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2519:../FreeRTOS/Source/tasks.c **** 
2520:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2521:../FreeRTOS/Source/tasks.c **** 
2522:../FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2523:../FreeRTOS/Source/tasks.c **** 		{
2524:../FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2525:../FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2526:../FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2527:../FreeRTOS/Source/tasks.c **** 			{
2528:../FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2529:../FreeRTOS/Source/tasks.c **** 
2530:../FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2531:../FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2532:../FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2533:../FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2534:../FreeRTOS/Source/tasks.c **** 
2535:../FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2536:../FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2537:../FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2538:../FreeRTOS/Source/tasks.c **** 				is used. */
2539:../FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2540:../FreeRTOS/Source/tasks.c **** 				{
2541:../FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2542:../FreeRTOS/Source/tasks.c **** 					{
2543:../FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2544:../FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2545:../FreeRTOS/Source/tasks.c **** 					}
2546:../FreeRTOS/Source/tasks.c **** 					else
2547:../FreeRTOS/Source/tasks.c **** 					{
2548:../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2549:../FreeRTOS/Source/tasks.c **** 					}
2550:../FreeRTOS/Source/tasks.c **** 				}
2551:../FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 51


2552:../FreeRTOS/Source/tasks.c **** 
2553:../FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2554:../FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2555:../FreeRTOS/Source/tasks.c **** 
2556:../FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2557:../FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2558:../FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2559:../FreeRTOS/Source/tasks.c **** 				{
2560:../FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2561:../FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2562:../FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2563:../FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2564:../FreeRTOS/Source/tasks.c **** 					{
2565:../FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2566:../FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2567:../FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2568:../FreeRTOS/Source/tasks.c **** 					}
2569:../FreeRTOS/Source/tasks.c **** 					else
2570:../FreeRTOS/Source/tasks.c **** 					{
2571:../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2572:../FreeRTOS/Source/tasks.c **** 					}
2573:../FreeRTOS/Source/tasks.c **** 				}
2574:../FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2575:../FreeRTOS/Source/tasks.c **** 			}
2576:../FreeRTOS/Source/tasks.c **** 			else
2577:../FreeRTOS/Source/tasks.c **** 			{
2578:../FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2579:../FreeRTOS/Source/tasks.c **** 			}
2580:../FreeRTOS/Source/tasks.c **** 		}
2581:../FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2582:../FreeRTOS/Source/tasks.c **** 
2583:../FreeRTOS/Source/tasks.c **** 		return xReturn;
2584:../FreeRTOS/Source/tasks.c **** 	}
2585:../FreeRTOS/Source/tasks.c **** 
2586:../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2587:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2588:../FreeRTOS/Source/tasks.c **** 
2589:../FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2590:../FreeRTOS/Source/tasks.c **** {
2591:../FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2592:../FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2593:../FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2594:../FreeRTOS/Source/tasks.c **** 
2595:../FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2596:../FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2597:../FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2598:../FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2599:../FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2600:../FreeRTOS/Source/tasks.c **** 	{
2601:../FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2602:../FreeRTOS/Source/tasks.c **** 		block. */
2603:../FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2604:../FreeRTOS/Source/tasks.c **** 
2605:../FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2606:../FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2607:../FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2608:../FreeRTOS/Source/tasks.c **** 
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 52


2609:../FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2610:../FreeRTOS/Source/tasks.c **** 		{
2611:../FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2612:../FreeRTOS/Source/tasks.c **** 		}
2613:../FreeRTOS/Source/tasks.c **** 		else
2614:../FreeRTOS/Source/tasks.c **** 		{
2615:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2616:../FreeRTOS/Source/tasks.c **** 		}
2617:../FreeRTOS/Source/tasks.c **** 
2618:../FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2619:../FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2620:../FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2621:../FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2622:../FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2623:../FreeRTOS/Source/tasks.c **** 		{
2624:../FreeRTOS/Source/tasks.c **** 			for( ;; )
2625:../FreeRTOS/Source/tasks.c **** 			{
2626:../FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2627:../FreeRTOS/Source/tasks.c **** 				{
2628:../FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2629:../FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2630:../FreeRTOS/Source/tasks.c **** 					unlikely that the
2631:../FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2632:../FreeRTOS/Source/tasks.c **** 					next time through. */
2633:../FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2634:../FreeRTOS/Source/tasks.c **** 					break;
2635:../FreeRTOS/Source/tasks.c **** 				}
2636:../FreeRTOS/Source/tasks.c **** 				else
2637:../FreeRTOS/Source/tasks.c **** 				{
2638:../FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2639:../FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2640:../FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2641:../FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2642:../FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2643:../FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2644:../FreeRTOS/Source/tasks.c **** 
2645:../FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2646:../FreeRTOS/Source/tasks.c **** 					{
2647:../FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2648:../FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2649:../FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2650:../FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2651:../FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2652:../FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2653:../FreeRTOS/Source/tasks.c **** 						break;
2654:../FreeRTOS/Source/tasks.c **** 					}
2655:../FreeRTOS/Source/tasks.c **** 					else
2656:../FreeRTOS/Source/tasks.c **** 					{
2657:../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2658:../FreeRTOS/Source/tasks.c **** 					}
2659:../FreeRTOS/Source/tasks.c **** 
2660:../FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2661:../FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2662:../FreeRTOS/Source/tasks.c **** 
2663:../FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2664:../FreeRTOS/Source/tasks.c **** 					it from the event list. */
2665:../FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 53


2666:../FreeRTOS/Source/tasks.c **** 					{
2667:../FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2668:../FreeRTOS/Source/tasks.c **** 					}
2669:../FreeRTOS/Source/tasks.c **** 					else
2670:../FreeRTOS/Source/tasks.c **** 					{
2671:../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2672:../FreeRTOS/Source/tasks.c **** 					}
2673:../FreeRTOS/Source/tasks.c **** 
2674:../FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2675:../FreeRTOS/Source/tasks.c **** 					list. */
2676:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2677:../FreeRTOS/Source/tasks.c **** 
2678:../FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2679:../FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2680:../FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2681:../FreeRTOS/Source/tasks.c **** 					{
2682:../FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2683:../FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2684:../FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2685:../FreeRTOS/Source/tasks.c **** 						currently executing task. */
2686:../FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2687:../FreeRTOS/Source/tasks.c **** 						{
2688:../FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2689:../FreeRTOS/Source/tasks.c **** 						}
2690:../FreeRTOS/Source/tasks.c **** 						else
2691:../FreeRTOS/Source/tasks.c **** 						{
2692:../FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2693:../FreeRTOS/Source/tasks.c **** 						}
2694:../FreeRTOS/Source/tasks.c **** 					}
2695:../FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2696:../FreeRTOS/Source/tasks.c **** 				}
2697:../FreeRTOS/Source/tasks.c **** 			}
2698:../FreeRTOS/Source/tasks.c **** 		}
2699:../FreeRTOS/Source/tasks.c **** 
2700:../FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2701:../FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2702:../FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2703:../FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2704:../FreeRTOS/Source/tasks.c **** 		{
2705:../FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2706:../FreeRTOS/Source/tasks.c **** 			{
2707:../FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2708:../FreeRTOS/Source/tasks.c **** 			}
2709:../FreeRTOS/Source/tasks.c **** 			else
2710:../FreeRTOS/Source/tasks.c **** 			{
2711:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2712:../FreeRTOS/Source/tasks.c **** 			}
2713:../FreeRTOS/Source/tasks.c **** 		}
2714:../FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2715:../FreeRTOS/Source/tasks.c **** 
2716:../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2717:../FreeRTOS/Source/tasks.c **** 		{
2718:../FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2719:../FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2720:../FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2721:../FreeRTOS/Source/tasks.c **** 			{
2722:../FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 54


2723:../FreeRTOS/Source/tasks.c **** 			}
2724:../FreeRTOS/Source/tasks.c **** 			else
2725:../FreeRTOS/Source/tasks.c **** 			{
2726:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2727:../FreeRTOS/Source/tasks.c **** 			}
2728:../FreeRTOS/Source/tasks.c **** 		}
2729:../FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2730:../FreeRTOS/Source/tasks.c **** 	}
2731:../FreeRTOS/Source/tasks.c **** 	else
2732:../FreeRTOS/Source/tasks.c **** 	{
2733:../FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2734:../FreeRTOS/Source/tasks.c **** 
2735:../FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2736:../FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2737:../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2738:../FreeRTOS/Source/tasks.c **** 		{
2739:../FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2740:../FreeRTOS/Source/tasks.c **** 		}
2741:../FreeRTOS/Source/tasks.c **** 		#endif
2742:../FreeRTOS/Source/tasks.c **** 	}
2743:../FreeRTOS/Source/tasks.c **** 
2744:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2745:../FreeRTOS/Source/tasks.c **** 	{
2746:../FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2747:../FreeRTOS/Source/tasks.c **** 		{
2748:../FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2749:../FreeRTOS/Source/tasks.c **** 		}
2750:../FreeRTOS/Source/tasks.c **** 		else
2751:../FreeRTOS/Source/tasks.c **** 		{
2752:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2753:../FreeRTOS/Source/tasks.c **** 		}
2754:../FreeRTOS/Source/tasks.c **** 	}
2755:../FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2756:../FreeRTOS/Source/tasks.c **** 
2757:../FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2758:../FreeRTOS/Source/tasks.c **** }
2759:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2760:../FreeRTOS/Source/tasks.c **** 
2761:../FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2762:../FreeRTOS/Source/tasks.c **** 
2763:../FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2764:../FreeRTOS/Source/tasks.c **** 	{
2765:../FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2766:../FreeRTOS/Source/tasks.c **** 
2767:../FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2768:../FreeRTOS/Source/tasks.c **** 		getting set. */
2769:../FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2770:../FreeRTOS/Source/tasks.c **** 		{
2771:../FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2772:../FreeRTOS/Source/tasks.c **** 		}
2773:../FreeRTOS/Source/tasks.c **** 		else
2774:../FreeRTOS/Source/tasks.c **** 		{
2775:../FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2776:../FreeRTOS/Source/tasks.c **** 		}
2777:../FreeRTOS/Source/tasks.c **** 
2778:../FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2779:../FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 55


2780:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2781:../FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2782:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2783:../FreeRTOS/Source/tasks.c **** 	}
2784:../FreeRTOS/Source/tasks.c **** 
2785:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2786:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2787:../FreeRTOS/Source/tasks.c **** 
2788:../FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2789:../FreeRTOS/Source/tasks.c **** 
2790:../FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2791:../FreeRTOS/Source/tasks.c **** 	{
2792:../FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2793:../FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2794:../FreeRTOS/Source/tasks.c **** 
2795:../FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2796:../FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2797:../FreeRTOS/Source/tasks.c **** 		{
2798:../FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2799:../FreeRTOS/Source/tasks.c **** 		}
2800:../FreeRTOS/Source/tasks.c **** 		else
2801:../FreeRTOS/Source/tasks.c **** 		{
2802:../FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2803:../FreeRTOS/Source/tasks.c **** 		}
2804:../FreeRTOS/Source/tasks.c **** 
2805:../FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2806:../FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2807:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2808:../FreeRTOS/Source/tasks.c **** 		{
2809:../FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2810:../FreeRTOS/Source/tasks.c **** 		}
2811:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2812:../FreeRTOS/Source/tasks.c **** 
2813:../FreeRTOS/Source/tasks.c **** 		return xReturn;
2814:../FreeRTOS/Source/tasks.c **** 	}
2815:../FreeRTOS/Source/tasks.c **** 
2816:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2817:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2818:../FreeRTOS/Source/tasks.c **** 
2819:../FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2820:../FreeRTOS/Source/tasks.c **** 
2821:../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2822:../FreeRTOS/Source/tasks.c **** 	{
2823:../FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2824:../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2825:../FreeRTOS/Source/tasks.c **** 
2826:../FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2827:../FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2828:../FreeRTOS/Source/tasks.c **** 		{
2829:../FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2830:../FreeRTOS/Source/tasks.c **** 		}
2831:../FreeRTOS/Source/tasks.c **** 		else
2832:../FreeRTOS/Source/tasks.c **** 		{
2833:../FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2834:../FreeRTOS/Source/tasks.c **** 		}
2835:../FreeRTOS/Source/tasks.c **** 
2836:../FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 56


2837:../FreeRTOS/Source/tasks.c **** 		{
2838:../FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2839:../FreeRTOS/Source/tasks.c **** 		}
2840:../FreeRTOS/Source/tasks.c **** 		else
2841:../FreeRTOS/Source/tasks.c **** 		{
2842:../FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2843:../FreeRTOS/Source/tasks.c **** 		}
2844:../FreeRTOS/Source/tasks.c **** 
2845:../FreeRTOS/Source/tasks.c **** 		return xReturn;
2846:../FreeRTOS/Source/tasks.c **** 	}
2847:../FreeRTOS/Source/tasks.c **** 
2848:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2849:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2850:../FreeRTOS/Source/tasks.c **** 
2851:../FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2852:../FreeRTOS/Source/tasks.c **** {
2853:../FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2854:../FreeRTOS/Source/tasks.c **** 	{
2855:../FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2856:../FreeRTOS/Source/tasks.c **** 		switch. */
2857:../FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2858:../FreeRTOS/Source/tasks.c **** 	}
2859:../FreeRTOS/Source/tasks.c **** 	else
2860:../FreeRTOS/Source/tasks.c **** 	{
2861:../FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2862:../FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2863:../FreeRTOS/Source/tasks.c **** 
2864:../FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2865:../FreeRTOS/Source/tasks.c **** 		{
2866:../FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2867:../FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2868:../FreeRTOS/Source/tasks.c **** 				#else
2869:../FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2870:../FreeRTOS/Source/tasks.c **** 				#endif
2871:../FreeRTOS/Source/tasks.c **** 
2872:../FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2873:../FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2874:../FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2875:../FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2876:../FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2877:../FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2878:../FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2879:../FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2880:../FreeRTOS/Source/tasks.c **** 				{
2881:../FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2882:../FreeRTOS/Source/tasks.c **** 				}
2883:../FreeRTOS/Source/tasks.c **** 				else
2884:../FreeRTOS/Source/tasks.c **** 				{
2885:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2886:../FreeRTOS/Source/tasks.c **** 				}
2887:../FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
2888:../FreeRTOS/Source/tasks.c **** 		}
2889:../FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2890:../FreeRTOS/Source/tasks.c **** 
2891:../FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2892:../FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2893:../FreeRTOS/Source/tasks.c **** 
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 57


2894:../FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2895:../FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2896:../FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2897:../FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2898:../FreeRTOS/Source/tasks.c **** 
2899:../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2900:../FreeRTOS/Source/tasks.c **** 		{
2901:../FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2902:../FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2903:../FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2904:../FreeRTOS/Source/tasks.c **** 		}
2905:../FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2906:../FreeRTOS/Source/tasks.c **** 	}
2907:../FreeRTOS/Source/tasks.c **** }
2908:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2909:../FreeRTOS/Source/tasks.c **** 
2910:../FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2911:../FreeRTOS/Source/tasks.c **** {
2912:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2913:../FreeRTOS/Source/tasks.c **** 
2914:../FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2915:../FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2916:../FreeRTOS/Source/tasks.c **** 
2917:../FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2918:../FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2919:../FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2920:../FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2921:../FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2922:../FreeRTOS/Source/tasks.c **** 
2923:../FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2924:../FreeRTOS/Source/tasks.c **** }
2925:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2926:../FreeRTOS/Source/tasks.c **** 
2927:../FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2928:../FreeRTOS/Source/tasks.c **** {
2929:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2930:../FreeRTOS/Source/tasks.c **** 
2931:../FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2932:../FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2933:../FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2934:../FreeRTOS/Source/tasks.c **** 
2935:../FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2936:../FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2937:../FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2938:../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2939:../FreeRTOS/Source/tasks.c **** 
2940:../FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2941:../FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2942:../FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2943:../FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2944:../FreeRTOS/Source/tasks.c **** 	the task level). */
2945:../FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2946:../FreeRTOS/Source/tasks.c **** 
2947:../FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2948:../FreeRTOS/Source/tasks.c **** }
2949:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2950:../FreeRTOS/Source/tasks.c **** 
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 58


2951:../FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2952:../FreeRTOS/Source/tasks.c **** 
2953:../FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2954:../FreeRTOS/Source/tasks.c **** 	{
2955:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2956:../FreeRTOS/Source/tasks.c **** 
2957:../FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2958:../FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2959:../FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2960:../FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2961:../FreeRTOS/Source/tasks.c **** 
2962:../FreeRTOS/Source/tasks.c **** 
2963:../FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2964:../FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2965:../FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2966:../FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2967:../FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2968:../FreeRTOS/Source/tasks.c **** 
2969:../FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2970:../FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2971:../FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2972:../FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2973:../FreeRTOS/Source/tasks.c **** 		{
2974:../FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2975:../FreeRTOS/Source/tasks.c **** 		}
2976:../FreeRTOS/Source/tasks.c **** 
2977:../FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2978:../FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2979:../FreeRTOS/Source/tasks.c **** 	}
2980:../FreeRTOS/Source/tasks.c **** 
2981:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2982:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2983:../FreeRTOS/Source/tasks.c **** 
2984:../FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2985:../FreeRTOS/Source/tasks.c **** {
2986:../FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2987:../FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2988:../FreeRTOS/Source/tasks.c **** 
2989:../FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2990:../FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2991:../FreeRTOS/Source/tasks.c **** 
2992:../FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2993:../FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2994:../FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2995:../FreeRTOS/Source/tasks.c **** 
2996:../FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2997:../FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2998:../FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2999:../FreeRTOS/Source/tasks.c **** 
3000:../FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
3001:../FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
3002:../FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
3003:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3004:../FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
3005:../FreeRTOS/Source/tasks.c **** 
3006:../FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3007:../FreeRTOS/Source/tasks.c **** 	{
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 59


3008:../FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3009:../FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3010:../FreeRTOS/Source/tasks.c **** 	}
3011:../FreeRTOS/Source/tasks.c **** 	else
3012:../FreeRTOS/Source/tasks.c **** 	{
3013:../FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3014:../FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3015:../FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3016:../FreeRTOS/Source/tasks.c **** 	}
3017:../FreeRTOS/Source/tasks.c **** 
3018:../FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3019:../FreeRTOS/Source/tasks.c **** 	{
3020:../FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3021:../FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3022:../FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3023:../FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3024:../FreeRTOS/Source/tasks.c **** 
3025:../FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3026:../FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3027:../FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3028:../FreeRTOS/Source/tasks.c **** 	}
3029:../FreeRTOS/Source/tasks.c **** 	else
3030:../FreeRTOS/Source/tasks.c **** 	{
3031:../FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3032:../FreeRTOS/Source/tasks.c **** 	}
3033:../FreeRTOS/Source/tasks.c **** 
3034:../FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3035:../FreeRTOS/Source/tasks.c **** 	{
3036:../FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3037:../FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3038:../FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3039:../FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3040:../FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3041:../FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3042:../FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3043:../FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3044:../FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3045:../FreeRTOS/Source/tasks.c **** 	}
3046:../FreeRTOS/Source/tasks.c **** 	#endif
3047:../FreeRTOS/Source/tasks.c **** 
3048:../FreeRTOS/Source/tasks.c **** 	return xReturn;
3049:../FreeRTOS/Source/tasks.c **** }
3050:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3051:../FreeRTOS/Source/tasks.c **** 
3052:../FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3053:../FreeRTOS/Source/tasks.c **** {
3054:../FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3055:../FreeRTOS/Source/tasks.c **** 
3056:../FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3057:../FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3058:../FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
3059:../FreeRTOS/Source/tasks.c **** 
3060:../FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3061:../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3062:../FreeRTOS/Source/tasks.c **** 
3063:../FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3064:../FreeRTOS/Source/tasks.c **** 	event flags. */
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 60


3065:../FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
3066:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3067:../FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3068:../FreeRTOS/Source/tasks.c **** 
3069:../FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3070:../FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3071:../FreeRTOS/Source/tasks.c **** 	lists. */
3072:../FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3073:../FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3074:../FreeRTOS/Source/tasks.c **** 
3075:../FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3076:../FreeRTOS/Source/tasks.c **** 	{
3077:../FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3078:../FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3079:../FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3080:../FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3081:../FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3082:../FreeRTOS/Source/tasks.c **** 	}
3083:../FreeRTOS/Source/tasks.c **** }
3084:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3085:../FreeRTOS/Source/tasks.c **** 
3086:../FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3087:../FreeRTOS/Source/tasks.c **** {
3088:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3089:../FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3090:../FreeRTOS/Source/tasks.c **** 	{
3091:../FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3092:../FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3093:../FreeRTOS/Source/tasks.c **** 	}
3094:../FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3095:../FreeRTOS/Source/tasks.c **** }
3096:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3097:../FreeRTOS/Source/tasks.c **** 
3098:../FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3099:../FreeRTOS/Source/tasks.c **** {
3100:../FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3101:../FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3102:../FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3103:../FreeRTOS/Source/tasks.c **** }
3104:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3105:../FreeRTOS/Source/tasks.c **** 
3106:../FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3107:../FreeRTOS/Source/tasks.c **** {
3108:../FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3109:../FreeRTOS/Source/tasks.c **** 
3110:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3111:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3112:../FreeRTOS/Source/tasks.c **** 
3113:../FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3114:../FreeRTOS/Source/tasks.c **** 	{
3115:../FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
3116:../FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3117:../FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3118:../FreeRTOS/Source/tasks.c **** 
3119:../FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3120:../FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3121:../FreeRTOS/Source/tasks.c **** 			{
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 61


3122:../FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3123:../FreeRTOS/Source/tasks.c **** 				but has the same result. */
3124:../FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3125:../FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3126:../FreeRTOS/Source/tasks.c **** 			}
3127:../FreeRTOS/Source/tasks.c **** 			else
3128:../FreeRTOS/Source/tasks.c **** 		#endif
3129:../FreeRTOS/Source/tasks.c **** 
3130:../FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3131:../FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3132:../FreeRTOS/Source/tasks.c **** 			{
3133:../FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3134:../FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3135:../FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3136:../FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3137:../FreeRTOS/Source/tasks.c **** 			}
3138:../FreeRTOS/Source/tasks.c **** 			else
3139:../FreeRTOS/Source/tasks.c **** 		#endif
3140:../FreeRTOS/Source/tasks.c **** 
3141:../FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3142:../FreeRTOS/Source/tasks.c **** 		{
3143:../FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3144:../FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3145:../FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3146:../FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3147:../FreeRTOS/Source/tasks.c **** 			was called. */
3148:../FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3149:../FreeRTOS/Source/tasks.c **** 		}
3150:../FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3151:../FreeRTOS/Source/tasks.c **** 		{
3152:../FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3153:../FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3154:../FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3155:../FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3156:../FreeRTOS/Source/tasks.c **** 		}
3157:../FreeRTOS/Source/tasks.c **** 		else
3158:../FreeRTOS/Source/tasks.c **** 		{
3159:../FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3160:../FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3161:../FreeRTOS/Source/tasks.c **** 		}
3162:../FreeRTOS/Source/tasks.c **** 	}
3163:../FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3164:../FreeRTOS/Source/tasks.c **** 
3165:../FreeRTOS/Source/tasks.c **** 	return xReturn;
3166:../FreeRTOS/Source/tasks.c **** }
3167:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3168:../FreeRTOS/Source/tasks.c **** 
3169:../FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3170:../FreeRTOS/Source/tasks.c **** {
3171:../FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3172:../FreeRTOS/Source/tasks.c **** }
3173:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3174:../FreeRTOS/Source/tasks.c **** 
3175:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3176:../FreeRTOS/Source/tasks.c **** 
3177:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3178:../FreeRTOS/Source/tasks.c **** 	{
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 62


3179:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3180:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3181:../FreeRTOS/Source/tasks.c **** 
3182:../FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3183:../FreeRTOS/Source/tasks.c **** 		{
3184:../FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3185:../FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3186:../FreeRTOS/Source/tasks.c **** 		}
3187:../FreeRTOS/Source/tasks.c **** 		else
3188:../FreeRTOS/Source/tasks.c **** 		{
3189:../FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3190:../FreeRTOS/Source/tasks.c **** 		}
3191:../FreeRTOS/Source/tasks.c **** 
3192:../FreeRTOS/Source/tasks.c **** 		return uxReturn;
3193:../FreeRTOS/Source/tasks.c **** 	}
3194:../FreeRTOS/Source/tasks.c **** 
3195:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3196:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3197:../FreeRTOS/Source/tasks.c **** 
3198:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3199:../FreeRTOS/Source/tasks.c **** 
3200:../FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3201:../FreeRTOS/Source/tasks.c **** 	{
3202:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3203:../FreeRTOS/Source/tasks.c **** 
3204:../FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3205:../FreeRTOS/Source/tasks.c **** 		{
3206:../FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3207:../FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3208:../FreeRTOS/Source/tasks.c **** 		}
3209:../FreeRTOS/Source/tasks.c **** 	}
3210:../FreeRTOS/Source/tasks.c **** 
3211:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3212:../FreeRTOS/Source/tasks.c **** 
3213:../FreeRTOS/Source/tasks.c **** /*
3214:../FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3215:../FreeRTOS/Source/tasks.c ****  * The Idle task.
3216:../FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3217:../FreeRTOS/Source/tasks.c ****  *
3218:../FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3219:../FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3220:../FreeRTOS/Source/tasks.c ****  *
3221:../FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3222:../FreeRTOS/Source/tasks.c ****  *
3223:../FreeRTOS/Source/tasks.c ****  */
3224:../FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3225:../FreeRTOS/Source/tasks.c **** {
3226:../FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3227:../FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3228:../FreeRTOS/Source/tasks.c **** 
3229:../FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
3230:../FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3231:../FreeRTOS/Source/tasks.c **** 
3232:../FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3233:../FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3234:../FreeRTOS/Source/tasks.c **** 	any. */
3235:../FreeRTOS/Source/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 63


3236:../FreeRTOS/Source/tasks.c **** 
3237:../FreeRTOS/Source/tasks.c **** 	for( ;; )
3238:../FreeRTOS/Source/tasks.c **** 	{
3239:../FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3240:../FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3241:../FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3242:../FreeRTOS/Source/tasks.c **** 
3243:../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3244:../FreeRTOS/Source/tasks.c **** 		{
3245:../FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3246:../FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3247:../FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3248:../FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3249:../FreeRTOS/Source/tasks.c **** 			taskYIELD();
3250:../FreeRTOS/Source/tasks.c **** 		}
3251:../FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3252:../FreeRTOS/Source/tasks.c **** 
3253:../FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3254:../FreeRTOS/Source/tasks.c **** 		{
3255:../FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3256:../FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3257:../FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3258:../FreeRTOS/Source/tasks.c **** 			timeslice.
3259:../FreeRTOS/Source/tasks.c **** 
3260:../FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3261:../FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3262:../FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3263:../FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3264:../FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3265:../FreeRTOS/Source/tasks.c **** 			{
3266:../FreeRTOS/Source/tasks.c **** 				taskYIELD();
3267:../FreeRTOS/Source/tasks.c **** 			}
3268:../FreeRTOS/Source/tasks.c **** 			else
3269:../FreeRTOS/Source/tasks.c **** 			{
3270:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3271:../FreeRTOS/Source/tasks.c **** 			}
3272:../FreeRTOS/Source/tasks.c **** 		}
3273:../FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3274:../FreeRTOS/Source/tasks.c **** 
3275:../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3276:../FreeRTOS/Source/tasks.c **** 		{
3277:../FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3278:../FreeRTOS/Source/tasks.c **** 
3279:../FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3280:../FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3281:../FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3282:../FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3283:../FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3284:../FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3285:../FreeRTOS/Source/tasks.c **** 		}
3286:../FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
3287:../FreeRTOS/Source/tasks.c **** 
3288:../FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3289:../FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3290:../FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3291:../FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3292:../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 64


3293:../FreeRTOS/Source/tasks.c **** 		{
3294:../FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3295:../FreeRTOS/Source/tasks.c **** 
3296:../FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3297:../FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3298:../FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3299:../FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3300:../FreeRTOS/Source/tasks.c **** 			valid. */
3301:../FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3302:../FreeRTOS/Source/tasks.c **** 
3303:../FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3304:../FreeRTOS/Source/tasks.c **** 			{
3305:../FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3306:../FreeRTOS/Source/tasks.c **** 				{
3307:../FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3308:../FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3309:../FreeRTOS/Source/tasks.c **** 					be used. */
3310:../FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3311:../FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3312:../FreeRTOS/Source/tasks.c **** 
3313:../FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3314:../FreeRTOS/Source/tasks.c **** 					if the application does not want
3315:../FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3316:../FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3317:../FreeRTOS/Source/tasks.c **** 
3318:../FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3319:../FreeRTOS/Source/tasks.c **** 					{
3320:../FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3321:../FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3322:../FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3323:../FreeRTOS/Source/tasks.c **** 					}
3324:../FreeRTOS/Source/tasks.c **** 					else
3325:../FreeRTOS/Source/tasks.c **** 					{
3326:../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3327:../FreeRTOS/Source/tasks.c **** 					}
3328:../FreeRTOS/Source/tasks.c **** 				}
3329:../FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3330:../FreeRTOS/Source/tasks.c **** 			}
3331:../FreeRTOS/Source/tasks.c **** 			else
3332:../FreeRTOS/Source/tasks.c **** 			{
3333:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3334:../FreeRTOS/Source/tasks.c **** 			}
3335:../FreeRTOS/Source/tasks.c **** 		}
3336:../FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3337:../FreeRTOS/Source/tasks.c **** 	}
3338:../FreeRTOS/Source/tasks.c **** }
3339:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3340:../FreeRTOS/Source/tasks.c **** 
3341:../FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3342:../FreeRTOS/Source/tasks.c **** 
3343:../FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
3344:../FreeRTOS/Source/tasks.c **** 	{
3345:../FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3346:../FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3347:../FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3348:../FreeRTOS/Source/tasks.c **** 
3349:../FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 65


3350:../FreeRTOS/Source/tasks.c **** 		{
3351:../FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3352:../FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3353:../FreeRTOS/Source/tasks.c **** 		}
3354:../FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3355:../FreeRTOS/Source/tasks.c **** 		{
3356:../FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3357:../FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3358:../FreeRTOS/Source/tasks.c **** 		}
3359:../FreeRTOS/Source/tasks.c **** 		else
3360:../FreeRTOS/Source/tasks.c **** 		{
3361:../FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3362:../FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3363:../FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3364:../FreeRTOS/Source/tasks.c **** 			interrupts. */
3365:../FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3366:../FreeRTOS/Source/tasks.c **** 			{
3367:../FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3368:../FreeRTOS/Source/tasks.c **** 			}
3369:../FreeRTOS/Source/tasks.c **** 			else
3370:../FreeRTOS/Source/tasks.c **** 			{
3371:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3372:../FreeRTOS/Source/tasks.c **** 			}
3373:../FreeRTOS/Source/tasks.c **** 		}
3374:../FreeRTOS/Source/tasks.c **** 
3375:../FreeRTOS/Source/tasks.c **** 		return eReturn;
3376:../FreeRTOS/Source/tasks.c **** 	}
3377:../FreeRTOS/Source/tasks.c **** 
3378:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3379:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3380:../FreeRTOS/Source/tasks.c **** 
3381:../FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3382:../FreeRTOS/Source/tasks.c **** 
3383:../FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3384:../FreeRTOS/Source/tasks.c **** 	{
3385:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3386:../FreeRTOS/Source/tasks.c **** 
3387:../FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3388:../FreeRTOS/Source/tasks.c **** 		{
3389:../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3390:../FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3391:../FreeRTOS/Source/tasks.c **** 		}
3392:../FreeRTOS/Source/tasks.c **** 	}
3393:../FreeRTOS/Source/tasks.c **** 
3394:../FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3395:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3396:../FreeRTOS/Source/tasks.c **** 
3397:../FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3398:../FreeRTOS/Source/tasks.c **** 
3399:../FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3400:../FreeRTOS/Source/tasks.c **** 	{
3401:../FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3402:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3403:../FreeRTOS/Source/tasks.c **** 
3404:../FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3405:../FreeRTOS/Source/tasks.c **** 		{
3406:../FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 66


3407:../FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3408:../FreeRTOS/Source/tasks.c **** 		}
3409:../FreeRTOS/Source/tasks.c **** 		else
3410:../FreeRTOS/Source/tasks.c **** 		{
3411:../FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3412:../FreeRTOS/Source/tasks.c **** 		}
3413:../FreeRTOS/Source/tasks.c **** 
3414:../FreeRTOS/Source/tasks.c **** 		return pvReturn;
3415:../FreeRTOS/Source/tasks.c **** 	}
3416:../FreeRTOS/Source/tasks.c **** 
3417:../FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3418:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3419:../FreeRTOS/Source/tasks.c **** 
3420:../FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3421:../FreeRTOS/Source/tasks.c **** 
3422:../FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3423:../FreeRTOS/Source/tasks.c **** 	{
3424:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3425:../FreeRTOS/Source/tasks.c **** 
3426:../FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3427:../FreeRTOS/Source/tasks.c **** 		the calling task. */
3428:../FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3429:../FreeRTOS/Source/tasks.c **** 
3430:../FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3431:../FreeRTOS/Source/tasks.c **** 	}
3432:../FreeRTOS/Source/tasks.c **** 
3433:../FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3434:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3435:../FreeRTOS/Source/tasks.c **** 
3436:../FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3437:../FreeRTOS/Source/tasks.c **** {
3438:../FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3439:../FreeRTOS/Source/tasks.c **** 
3440:../FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3441:../FreeRTOS/Source/tasks.c **** 	{
3442:../FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3443:../FreeRTOS/Source/tasks.c **** 	}
3444:../FreeRTOS/Source/tasks.c **** 
3445:../FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3446:../FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3447:../FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3448:../FreeRTOS/Source/tasks.c **** 
3449:../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3450:../FreeRTOS/Source/tasks.c **** 	{
3451:../FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3452:../FreeRTOS/Source/tasks.c **** 	}
3453:../FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3454:../FreeRTOS/Source/tasks.c **** 
3455:../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3456:../FreeRTOS/Source/tasks.c **** 	{
3457:../FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
3458:../FreeRTOS/Source/tasks.c **** 	}
3459:../FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3460:../FreeRTOS/Source/tasks.c **** 
3461:../FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3462:../FreeRTOS/Source/tasks.c **** 	using list2. */
3463:../FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 67


3464:../FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3465:../FreeRTOS/Source/tasks.c **** }
3466:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3467:../FreeRTOS/Source/tasks.c **** 
3468:../FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3469:../FreeRTOS/Source/tasks.c **** {
3470:../FreeRTOS/Source/tasks.c **** 
3471:../FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3472:../FreeRTOS/Source/tasks.c **** 
3473:../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3474:../FreeRTOS/Source/tasks.c **** 	{
3475:../FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3476:../FreeRTOS/Source/tasks.c **** 
3477:../FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3478:../FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3479:../FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3480:../FreeRTOS/Source/tasks.c **** 		{
3481:../FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3482:../FreeRTOS/Source/tasks.c **** 			{
3483:../FreeRTOS/Source/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3484:../FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3485:../FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3486:../FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3487:../FreeRTOS/Source/tasks.c **** 			}
3488:../FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3489:../FreeRTOS/Source/tasks.c **** 
3490:../FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3491:../FreeRTOS/Source/tasks.c **** 		}
3492:../FreeRTOS/Source/tasks.c **** 	}
3493:../FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3494:../FreeRTOS/Source/tasks.c **** }
3495:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3496:../FreeRTOS/Source/tasks.c **** 
3497:../FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3498:../FreeRTOS/Source/tasks.c **** 
3499:../FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3500:../FreeRTOS/Source/tasks.c **** 	{
3501:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3502:../FreeRTOS/Source/tasks.c **** 
3503:../FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3504:../FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3505:../FreeRTOS/Source/tasks.c **** 
3506:../FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3507:../FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3508:../FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3509:../FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3510:../FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3511:../FreeRTOS/Source/tasks.c **** 
3512:../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3513:../FreeRTOS/Source/tasks.c **** 		{
3514:../FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
3515:../FreeRTOS/Source/tasks.c **** 		}
3516:../FreeRTOS/Source/tasks.c **** 		#else
3517:../FreeRTOS/Source/tasks.c **** 		{
3518:../FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3519:../FreeRTOS/Source/tasks.c **** 		}
3520:../FreeRTOS/Source/tasks.c **** 		#endif
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 68


3521:../FreeRTOS/Source/tasks.c **** 
3522:../FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3523:../FreeRTOS/Source/tasks.c **** 		{
3524:../FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3525:../FreeRTOS/Source/tasks.c **** 		}
3526:../FreeRTOS/Source/tasks.c **** 		#else
3527:../FreeRTOS/Source/tasks.c **** 		{
3528:../FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3529:../FreeRTOS/Source/tasks.c **** 		}
3530:../FreeRTOS/Source/tasks.c **** 		#endif
3531:../FreeRTOS/Source/tasks.c **** 
3532:../FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3533:../FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3534:../FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3535:../FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3536:../FreeRTOS/Source/tasks.c **** 		{
3537:../FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3538:../FreeRTOS/Source/tasks.c **** 			{
3539:../FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3540:../FreeRTOS/Source/tasks.c **** 			}
3541:../FreeRTOS/Source/tasks.c **** 			else
3542:../FreeRTOS/Source/tasks.c **** 			{
3543:../FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3544:../FreeRTOS/Source/tasks.c **** 
3545:../FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3546:../FreeRTOS/Source/tasks.c **** 				{
3547:../FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3548:../FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3549:../FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3550:../FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3551:../FreeRTOS/Source/tasks.c **** 					{
3552:../FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3553:../FreeRTOS/Source/tasks.c **** 						{
3554:../FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3555:../FreeRTOS/Source/tasks.c **** 							{
3556:../FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3557:../FreeRTOS/Source/tasks.c **** 							}
3558:../FreeRTOS/Source/tasks.c **** 						}
3559:../FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3560:../FreeRTOS/Source/tasks.c **** 					}
3561:../FreeRTOS/Source/tasks.c **** 				}
3562:../FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3563:../FreeRTOS/Source/tasks.c **** 			}
3564:../FreeRTOS/Source/tasks.c **** 		}
3565:../FreeRTOS/Source/tasks.c **** 		else
3566:../FreeRTOS/Source/tasks.c **** 		{
3567:../FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3568:../FreeRTOS/Source/tasks.c **** 		}
3569:../FreeRTOS/Source/tasks.c **** 
3570:../FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3571:../FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
3572:../FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3573:../FreeRTOS/Source/tasks.c **** 		{
3574:../FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3575:../FreeRTOS/Source/tasks.c **** 			{
3576:../FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3577:../FreeRTOS/Source/tasks.c **** 			}
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 69


3578:../FreeRTOS/Source/tasks.c **** 			#else
3579:../FreeRTOS/Source/tasks.c **** 			{
3580:../FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3581:../FreeRTOS/Source/tasks.c **** 			}
3582:../FreeRTOS/Source/tasks.c **** 			#endif
3583:../FreeRTOS/Source/tasks.c **** 		}
3584:../FreeRTOS/Source/tasks.c **** 		else
3585:../FreeRTOS/Source/tasks.c **** 		{
3586:../FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3587:../FreeRTOS/Source/tasks.c **** 		}
3588:../FreeRTOS/Source/tasks.c **** 	}
3589:../FreeRTOS/Source/tasks.c **** 
3590:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3591:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3592:../FreeRTOS/Source/tasks.c **** 
3593:../FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3594:../FreeRTOS/Source/tasks.c **** 
3595:../FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3596:../FreeRTOS/Source/tasks.c **** 	{
3597:../FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3598:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3599:../FreeRTOS/Source/tasks.c **** 
3600:../FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3601:../FreeRTOS/Source/tasks.c **** 		{
3602:../FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3603:../FreeRTOS/Source/tasks.c **** 
3604:../FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3605:../FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3606:../FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3607:../FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3608:../FreeRTOS/Source/tasks.c **** 			do
3609:../FreeRTOS/Source/tasks.c **** 			{
3610:../FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3611:../FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3612:../FreeRTOS/Source/tasks.c **** 				uxTask++;
3613:../FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3614:../FreeRTOS/Source/tasks.c **** 		}
3615:../FreeRTOS/Source/tasks.c **** 		else
3616:../FreeRTOS/Source/tasks.c **** 		{
3617:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3618:../FreeRTOS/Source/tasks.c **** 		}
3619:../FreeRTOS/Source/tasks.c **** 
3620:../FreeRTOS/Source/tasks.c **** 		return uxTask;
3621:../FreeRTOS/Source/tasks.c **** 	}
3622:../FreeRTOS/Source/tasks.c **** 
3623:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3624:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3625:../FreeRTOS/Source/tasks.c **** 
3626:../FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3627:../FreeRTOS/Source/tasks.c **** 
3628:../FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
3629:../FreeRTOS/Source/tasks.c **** 	{
 106              		.loc 1 3629 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              		@ link register save eliminated.
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 70


 111              	.LVL9:
3630:../FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 112              		.loc 1 3630 0
 113 0000 0023     		movs	r3, #0
3631:../FreeRTOS/Source/tasks.c **** 
3632:../FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 114              		.loc 1 3632 0
 115 0002 01E0     		b	.L12
 116              	.LVL10:
 117              	.L13:
3633:../FreeRTOS/Source/tasks.c **** 		{
3634:../FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 118              		.loc 1 3634 0
 119 0004 0130     		adds	r0, r0, #1
 120              	.LVL11:
3635:../FreeRTOS/Source/tasks.c **** 			ulCount++;
 121              		.loc 1 3635 0
 122 0006 0133     		adds	r3, r3, #1
 123              	.LVL12:
 124              	.L12:
3632:../FreeRTOS/Source/tasks.c **** 		{
 125              		.loc 1 3632 0
 126 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 127 000a A52A     		cmp	r2, #165
 128 000c FAD0     		beq	.L13
 129              	.LVL13:
3636:../FreeRTOS/Source/tasks.c **** 		}
3637:../FreeRTOS/Source/tasks.c **** 
3638:../FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3639:../FreeRTOS/Source/tasks.c **** 
3640:../FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3641:../FreeRTOS/Source/tasks.c **** 	}
 130              		.loc 1 3641 0
 131 000e C3F38F00 		ubfx	r0, r3, #2, #16
 132              	.LVL14:
 133 0012 7047     		bx	lr
 134              		.cfi_endproc
 135              	.LFE46:
 137              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 138              		.align	1
 139              		.syntax unified
 140              		.thumb
 141              		.thumb_func
 142              		.fpu fpv4-sp-d16
 144              	prvResetNextTaskUnblockTime:
 145              	.LFB48:
3642:../FreeRTOS/Source/tasks.c **** 
3643:../FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3644:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3645:../FreeRTOS/Source/tasks.c **** 
3646:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
3647:../FreeRTOS/Source/tasks.c **** 
3648:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3649:../FreeRTOS/Source/tasks.c **** 	{
3650:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3651:../FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3652:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 71


3653:../FreeRTOS/Source/tasks.c **** 
3654:../FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3655:../FreeRTOS/Source/tasks.c **** 
3656:../FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3657:../FreeRTOS/Source/tasks.c **** 		{
3658:../FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3659:../FreeRTOS/Source/tasks.c **** 		}
3660:../FreeRTOS/Source/tasks.c **** 		#else
3661:../FreeRTOS/Source/tasks.c **** 		{
3662:../FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3663:../FreeRTOS/Source/tasks.c **** 		}
3664:../FreeRTOS/Source/tasks.c **** 		#endif
3665:../FreeRTOS/Source/tasks.c **** 
3666:../FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3667:../FreeRTOS/Source/tasks.c **** 
3668:../FreeRTOS/Source/tasks.c **** 		return uxReturn;
3669:../FreeRTOS/Source/tasks.c **** 	}
3670:../FreeRTOS/Source/tasks.c **** 
3671:../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3672:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3673:../FreeRTOS/Source/tasks.c **** 
3674:../FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3675:../FreeRTOS/Source/tasks.c **** 
3676:../FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3677:../FreeRTOS/Source/tasks.c **** 	{
3678:../FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3679:../FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3680:../FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3681:../FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3682:../FreeRTOS/Source/tasks.c **** 
3683:../FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3684:../FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3685:../FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3686:../FreeRTOS/Source/tasks.c **** 		{
3687:../FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3688:../FreeRTOS/Source/tasks.c **** 		}
3689:../FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3690:../FreeRTOS/Source/tasks.c **** 
3691:../FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3692:../FreeRTOS/Source/tasks.c **** 		{
3693:../FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3694:../FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3695:../FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3696:../FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3697:../FreeRTOS/Source/tasks.c **** 		}
3698:../FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3699:../FreeRTOS/Source/tasks.c **** 		{
3700:../FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3701:../FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3702:../FreeRTOS/Source/tasks.c **** 			memory. */
3703:../FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
3704:../FreeRTOS/Source/tasks.c **** 			{
3705:../FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3706:../FreeRTOS/Source/tasks.c **** 				must be freed. */
3707:../FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3708:../FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3709:../FreeRTOS/Source/tasks.c **** 			}
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 72


3710:../FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3711:../FreeRTOS/Source/tasks.c **** 			{
3712:../FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3713:../FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3714:../FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3715:../FreeRTOS/Source/tasks.c **** 			}
3716:../FreeRTOS/Source/tasks.c **** 			else
3717:../FreeRTOS/Source/tasks.c **** 			{
3718:../FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3719:../FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3720:../FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3721:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3722:../FreeRTOS/Source/tasks.c **** 			}
3723:../FreeRTOS/Source/tasks.c **** 		}
3724:../FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3725:../FreeRTOS/Source/tasks.c **** 	}
3726:../FreeRTOS/Source/tasks.c **** 
3727:../FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3728:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3729:../FreeRTOS/Source/tasks.c **** 
3730:../FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3731:../FreeRTOS/Source/tasks.c **** {
 146              		.loc 1 3731 0
 147              		.cfi_startproc
 148              		@ args = 0, pretend = 0, frame = 0
 149              		@ frame_needed = 0, uses_anonymous_args = 0
 150              		@ link register save eliminated.
3732:../FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3733:../FreeRTOS/Source/tasks.c **** 
3734:../FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 151              		.loc 1 3734 0
 152 0000 084B     		ldr	r3, .L18
 153 0002 1B68     		ldr	r3, [r3]
 154 0004 1B68     		ldr	r3, [r3]
 155 0006 3BB1     		cbz	r3, .L17
3735:../FreeRTOS/Source/tasks.c **** 	{
3736:../FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3737:../FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3738:../FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3739:../FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3740:../FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3741:../FreeRTOS/Source/tasks.c **** 	}
3742:../FreeRTOS/Source/tasks.c **** 	else
3743:../FreeRTOS/Source/tasks.c **** 	{
3744:../FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3745:../FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3746:../FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
3747:../FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3748:../FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 156              		.loc 1 3748 0
 157 0008 064B     		ldr	r3, .L18
 158 000a 1B68     		ldr	r3, [r3]
 159 000c DB68     		ldr	r3, [r3, #12]
 160 000e DB68     		ldr	r3, [r3, #12]
 161              	.LVL15:
3749:../FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 162              		.loc 1 3749 0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 73


 163 0010 5A68     		ldr	r2, [r3, #4]
 164 0012 054B     		ldr	r3, .L18+4
 165              	.LVL16:
 166 0014 1A60     		str	r2, [r3]
3750:../FreeRTOS/Source/tasks.c **** 	}
3751:../FreeRTOS/Source/tasks.c **** }
 167              		.loc 1 3751 0
 168 0016 7047     		bx	lr
 169              	.L17:
3740:../FreeRTOS/Source/tasks.c **** 	}
 170              		.loc 1 3740 0
 171 0018 034B     		ldr	r3, .L18+4
 172 001a 4FF0FF32 		mov	r2, #-1
 173 001e 1A60     		str	r2, [r3]
 174 0020 7047     		bx	lr
 175              	.L19:
 176 0022 00BF     		.align	2
 177              	.L18:
 178 0024 00000000 		.word	.LANCHOR2
 179 0028 00000000 		.word	.LANCHOR3
 180              		.cfi_endproc
 181              	.LFE48:
 183              		.section	.text.prvDeleteTCB,"ax",%progbits
 184              		.align	1
 185              		.syntax unified
 186              		.thumb
 187              		.thumb_func
 188              		.fpu fpv4-sp-d16
 190              	prvDeleteTCB:
 191              	.LFB47:
3677:../FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 192              		.loc 1 3677 0
 193              		.cfi_startproc
 194              		@ args = 0, pretend = 0, frame = 0
 195              		@ frame_needed = 0, uses_anonymous_args = 0
 196              	.LVL17:
 197 0000 10B5     		push	{r4, lr}
 198              	.LCFI0:
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 4, -8
 201              		.cfi_offset 14, -4
 202 0002 0446     		mov	r4, r0
3695:../FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
 203              		.loc 1 3695 0
 204 0004 006B     		ldr	r0, [r0, #48]
 205              	.LVL18:
 206 0006 FFF7FEFF 		bl	vPortFree
 207              	.LVL19:
3696:../FreeRTOS/Source/tasks.c **** 		}
 208              		.loc 1 3696 0
 209 000a 2046     		mov	r0, r4
 210 000c FFF7FEFF 		bl	vPortFree
 211              	.LVL20:
3725:../FreeRTOS/Source/tasks.c **** 
 212              		.loc 1 3725 0
 213 0010 10BD     		pop	{r4, pc}
 214              		.cfi_endproc
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 74


 215              	.LFE47:
 217              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 218              		.align	1
 219              		.syntax unified
 220              		.thumb
 221              		.thumb_func
 222              		.fpu fpv4-sp-d16
 224              	prvInitialiseNewTask:
 225              	.LFB6:
 831:../FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 226              		.loc 1 831 0
 227              		.cfi_startproc
 228              		@ args = 16, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230              	.LVL21:
 231 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 232              	.LCFI1:
 233              		.cfi_def_cfa_offset 32
 234              		.cfi_offset 4, -32
 235              		.cfi_offset 5, -28
 236              		.cfi_offset 6, -24
 237              		.cfi_offset 7, -20
 238              		.cfi_offset 8, -16
 239              		.cfi_offset 9, -12
 240              		.cfi_offset 10, -8
 241              		.cfi_offset 14, -4
 242 0004 8146     		mov	r9, r0
 243 0006 0D46     		mov	r5, r1
 244 0008 1746     		mov	r7, r2
 245 000a 9A46     		mov	r10, r3
 246 000c 089E     		ldr	r6, [sp, #32]
 247 000e DDF82480 		ldr	r8, [sp, #36]
 248 0012 0A9C     		ldr	r4, [sp, #40]
 853:../FreeRTOS/Source/tasks.c **** 	}
 249              		.loc 1 853 0
 250 0014 9200     		lsls	r2, r2, #2
 251              	.LVL22:
 252 0016 A521     		movs	r1, #165
 253              	.LVL23:
 254 0018 206B     		ldr	r0, [r4, #48]
 255              	.LVL24:
 256 001a FFF7FEFF 		bl	memset
 257              	.LVL25:
 863:../FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 258              		.loc 1 863 0
 259 001e 236B     		ldr	r3, [r4, #48]
 260 0020 07F18042 		add	r2, r7, #1073741824
 261 0024 013A     		subs	r2, r2, #1
 262 0026 03EB8207 		add	r7, r3, r2, lsl #2
 263              	.LVL26:
 864:../FreeRTOS/Source/tasks.c **** 
 264              		.loc 1 864 0
 265 002a 27F00707 		bic	r7, r7, #7
 266              	.LVL27:
 891:../FreeRTOS/Source/tasks.c **** 	{
 267              		.loc 1 891 0
 268 002e 0023     		movs	r3, #0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 75


 269              	.LVL28:
 270              	.L23:
 891:../FreeRTOS/Source/tasks.c **** 	{
 271              		.loc 1 891 0 is_stmt 0 discriminator 1
 272 0030 092B     		cmp	r3, #9
 273 0032 07D8     		bhi	.L24
 893:../FreeRTOS/Source/tasks.c **** 
 274              		.loc 1 893 0 is_stmt 1
 275 0034 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 276 0036 E218     		adds	r2, r4, r3
 277 0038 82F83410 		strb	r1, [r2, #52]
 898:../FreeRTOS/Source/tasks.c **** 		{
 278              		.loc 1 898 0
 279 003c EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 280 003e 0AB1     		cbz	r2, .L24
 891:../FreeRTOS/Source/tasks.c **** 	{
 281              		.loc 1 891 0 discriminator 2
 282 0040 0133     		adds	r3, r3, #1
 283              	.LVL29:
 284 0042 F5E7     		b	.L23
 285              	.L24:
 910:../FreeRTOS/Source/tasks.c **** 
 286              		.loc 1 910 0
 287 0044 0023     		movs	r3, #0
 288              	.LVL30:
 289 0046 84F83D30 		strb	r3, [r4, #61]
 914:../FreeRTOS/Source/tasks.c **** 	{
 290              		.loc 1 914 0
 291 004a 052E     		cmp	r6, #5
 292 004c 00D9     		bls	.L26
 916:../FreeRTOS/Source/tasks.c **** 	}
 293              		.loc 1 916 0
 294 004e 0526     		movs	r6, #5
 295              	.L26:
 296              	.LVL31:
 923:../FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297              		.loc 1 923 0
 298 0050 E662     		str	r6, [r4, #44]
 926:../FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 299              		.loc 1 926 0
 300 0052 A664     		str	r6, [r4, #72]
 927:../FreeRTOS/Source/tasks.c **** 	}
 301              		.loc 1 927 0
 302 0054 0025     		movs	r5, #0
 303              	.LVL32:
 304 0056 E564     		str	r5, [r4, #76]
 931:../FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 305              		.loc 1 931 0
 306 0058 201D     		adds	r0, r4, #4
 307 005a FFF7FEFF 		bl	vListInitialiseItem
 308              	.LVL33:
 932:../FreeRTOS/Source/tasks.c **** 
 309              		.loc 1 932 0
 310 005e 04F11800 		add	r0, r4, #24
 311 0062 FFF7FEFF 		bl	vListInitialiseItem
 312              	.LVL34:
 936:../FreeRTOS/Source/tasks.c **** 
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 76


 313              		.loc 1 936 0
 314 0066 2461     		str	r4, [r4, #16]
 939:../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 315              		.loc 1 939 0
 316 0068 C6F10606 		rsb	r6, r6, #6
 317              	.LVL35:
 318 006c A661     		str	r6, [r4, #24]
 940:../FreeRTOS/Source/tasks.c **** 
 319              		.loc 1 940 0
 320 006e 6462     		str	r4, [r4, #36]
 982:../FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 321              		.loc 1 982 0
 322 0070 2565     		str	r5, [r4, #80]
 983:../FreeRTOS/Source/tasks.c **** 	}
 323              		.loc 1 983 0
 324 0072 84F85450 		strb	r5, [r4, #84]
1010:../FreeRTOS/Source/tasks.c **** 	}
 325              		.loc 1 1010 0
 326 0076 5246     		mov	r2, r10
 327 0078 4946     		mov	r1, r9
 328 007a 3846     		mov	r0, r7
 329 007c FFF7FEFF 		bl	pxPortInitialiseStack
 330              	.LVL36:
 331 0080 2060     		str	r0, [r4]
1014:../FreeRTOS/Source/tasks.c **** 	{
 332              		.loc 1 1014 0
 333 0082 B8F1000F 		cmp	r8, #0
 334 0086 01D0     		beq	.L22
1018:../FreeRTOS/Source/tasks.c **** 	}
 335              		.loc 1 1018 0
 336 0088 C8F80040 		str	r4, [r8]
 337              	.L22:
1024:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 338              		.loc 1 1024 0
 339 008c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 340              		.cfi_endproc
 341              	.LFE6:
 343              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 344              		.align	1
 345              		.syntax unified
 346              		.thumb
 347              		.thumb_func
 348              		.fpu fpv4-sp-d16
 350              	prvInitialiseTaskLists:
 351              	.LFB42:
3437:../FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 352              		.loc 1 3437 0
 353              		.cfi_startproc
 354              		@ args = 0, pretend = 0, frame = 0
 355              		@ frame_needed = 0, uses_anonymous_args = 0
 356 0000 38B5     		push	{r3, r4, r5, lr}
 357              	.LCFI2:
 358              		.cfi_def_cfa_offset 16
 359              		.cfi_offset 3, -16
 360              		.cfi_offset 4, -12
 361              		.cfi_offset 5, -8
 362              		.cfi_offset 14, -4
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 77


 363              	.LVL37:
3440:../FreeRTOS/Source/tasks.c **** 	{
 364              		.loc 1 3440 0
 365 0002 0024     		movs	r4, #0
 366 0004 07E0     		b	.L31
 367              	.LVL38:
 368              	.L32:
3442:../FreeRTOS/Source/tasks.c **** 	}
 369              		.loc 1 3442 0 discriminator 3
 370 0006 04EB8402 		add	r2, r4, r4, lsl #2
 371 000a 9300     		lsls	r3, r2, #2
 372 000c 0E48     		ldr	r0, .L34
 373 000e 1844     		add	r0, r0, r3
 374 0010 FFF7FEFF 		bl	vListInitialise
 375              	.LVL39:
3440:../FreeRTOS/Source/tasks.c **** 	{
 376              		.loc 1 3440 0 discriminator 3
 377 0014 0134     		adds	r4, r4, #1
 378              	.LVL40:
 379              	.L31:
3440:../FreeRTOS/Source/tasks.c **** 	{
 380              		.loc 1 3440 0 is_stmt 0 discriminator 1
 381 0016 052C     		cmp	r4, #5
 382 0018 F5D9     		bls	.L32
3445:../FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 383              		.loc 1 3445 0 is_stmt 1
 384 001a 0C4D     		ldr	r5, .L34+4
 385 001c 2846     		mov	r0, r5
 386 001e FFF7FEFF 		bl	vListInitialise
 387              	.LVL41:
3446:../FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 388              		.loc 1 3446 0
 389 0022 0B4C     		ldr	r4, .L34+8
 390              	.LVL42:
 391 0024 2046     		mov	r0, r4
 392 0026 FFF7FEFF 		bl	vListInitialise
 393              	.LVL43:
3447:../FreeRTOS/Source/tasks.c **** 
 394              		.loc 1 3447 0
 395 002a 0A48     		ldr	r0, .L34+12
 396 002c FFF7FEFF 		bl	vListInitialise
 397              	.LVL44:
3451:../FreeRTOS/Source/tasks.c **** 	}
 398              		.loc 1 3451 0
 399 0030 0948     		ldr	r0, .L34+16
 400 0032 FFF7FEFF 		bl	vListInitialise
 401              	.LVL45:
3457:../FreeRTOS/Source/tasks.c **** 	}
 402              		.loc 1 3457 0
 403 0036 0948     		ldr	r0, .L34+20
 404 0038 FFF7FEFF 		bl	vListInitialise
 405              	.LVL46:
3463:../FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 406              		.loc 1 3463 0
 407 003c 084B     		ldr	r3, .L34+24
 408 003e 1D60     		str	r5, [r3]
3464:../FreeRTOS/Source/tasks.c **** }
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 78


 409              		.loc 1 3464 0
 410 0040 084B     		ldr	r3, .L34+28
 411 0042 1C60     		str	r4, [r3]
3465:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 412              		.loc 1 3465 0
 413 0044 38BD     		pop	{r3, r4, r5, pc}
 414              	.L35:
 415 0046 00BF     		.align	2
 416              	.L34:
 417 0048 00000000 		.word	.LANCHOR4
 418 004c 00000000 		.word	.LANCHOR5
 419 0050 00000000 		.word	.LANCHOR6
 420 0054 00000000 		.word	.LANCHOR1
 421 0058 00000000 		.word	.LANCHOR7
 422 005c 00000000 		.word	.LANCHOR0
 423 0060 00000000 		.word	.LANCHOR2
 424 0064 00000000 		.word	.LANCHOR8
 425              		.cfi_endproc
 426              	.LFE42:
 428              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 429              		.align	1
 430              		.syntax unified
 431              		.thumb
 432              		.thumb_func
 433              		.fpu fpv4-sp-d16
 435              	prvAddNewTaskToReadyList:
 436              	.LFB7:
1028:../FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
 437              		.loc 1 1028 0
 438              		.cfi_startproc
 439              		@ args = 0, pretend = 0, frame = 0
 440              		@ frame_needed = 0, uses_anonymous_args = 0
 441              	.LVL47:
 442 0000 10B5     		push	{r4, lr}
 443              	.LCFI3:
 444              		.cfi_def_cfa_offset 8
 445              		.cfi_offset 4, -8
 446              		.cfi_offset 14, -4
 447 0002 0446     		mov	r4, r0
1031:../FreeRTOS/Source/tasks.c **** 	{
 448              		.loc 1 1031 0
 449 0004 FFF7FEFF 		bl	vPortEnterCritical
 450              	.LVL48:
1033:../FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 451              		.loc 1 1033 0
 452 0008 214A     		ldr	r2, .L43
 453 000a 1368     		ldr	r3, [r2]
 454 000c 0133     		adds	r3, r3, #1
 455 000e 1360     		str	r3, [r2]
1034:../FreeRTOS/Source/tasks.c **** 		{
 456              		.loc 1 1034 0
 457 0010 204B     		ldr	r3, .L43+4
 458 0012 1B68     		ldr	r3, [r3]
 459 0014 5BB1     		cbz	r3, .L41
1057:../FreeRTOS/Source/tasks.c **** 			{
 460              		.loc 1 1057 0
 461 0016 204B     		ldr	r3, .L43+8
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 79


 462 0018 1B68     		ldr	r3, [r3]
 463 001a 6BB9     		cbnz	r3, .L38
1059:../FreeRTOS/Source/tasks.c **** 				{
 464              		.loc 1 1059 0
 465 001c 1D4B     		ldr	r3, .L43+4
 466 001e 1B68     		ldr	r3, [r3]
 467 0020 DA6A     		ldr	r2, [r3, #44]
 468 0022 E36A     		ldr	r3, [r4, #44]
 469 0024 9A42     		cmp	r2, r3
 470 0026 07D8     		bhi	.L38
1061:../FreeRTOS/Source/tasks.c **** 				}
 471              		.loc 1 1061 0
 472 0028 1A4B     		ldr	r3, .L43+4
 473 002a 1C60     		str	r4, [r3]
 474 002c 04E0     		b	.L38
 475              	.L41:
1038:../FreeRTOS/Source/tasks.c **** 
 476              		.loc 1 1038 0
 477 002e 194B     		ldr	r3, .L43+4
 478 0030 1C60     		str	r4, [r3]
1040:../FreeRTOS/Source/tasks.c **** 			{
 479              		.loc 1 1040 0
 480 0032 1368     		ldr	r3, [r2]
 481 0034 012B     		cmp	r3, #1
 482 0036 27D0     		beq	.L42
 483              	.L38:
1074:../FreeRTOS/Source/tasks.c **** 
 484              		.loc 1 1074 0
 485 0038 184A     		ldr	r2, .L43+12
 486 003a 1368     		ldr	r3, [r2]
 487 003c 0133     		adds	r3, r3, #1
 488 003e 1360     		str	r3, [r2]
1079:../FreeRTOS/Source/tasks.c **** 		}
 489              		.loc 1 1079 0
 490 0040 2364     		str	r3, [r4, #64]
1084:../FreeRTOS/Source/tasks.c **** 
 491              		.loc 1 1084 0
 492 0042 E36A     		ldr	r3, [r4, #44]
 493 0044 0122     		movs	r2, #1
 494 0046 9A40     		lsls	r2, r2, r3
 495 0048 1549     		ldr	r1, .L43+16
 496 004a 0868     		ldr	r0, [r1]
 497 004c 0243     		orrs	r2, r2, r0
 498 004e 0A60     		str	r2, [r1]
 499 0050 03EB8303 		add	r3, r3, r3, lsl #2
 500 0054 9A00     		lsls	r2, r3, #2
 501 0056 211D     		adds	r1, r4, #4
 502 0058 1248     		ldr	r0, .L43+20
 503 005a 1044     		add	r0, r0, r2
 504 005c FFF7FEFF 		bl	vListInsertEnd
 505              	.LVL49:
1088:../FreeRTOS/Source/tasks.c **** 
 506              		.loc 1 1088 0
 507 0060 FFF7FEFF 		bl	vPortExitCritical
 508              	.LVL50:
1090:../FreeRTOS/Source/tasks.c **** 	{
 509              		.loc 1 1090 0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 80


 510 0064 0C4B     		ldr	r3, .L43+8
 511 0066 1B68     		ldr	r3, [r3]
 512 0068 6BB1     		cbz	r3, .L36
1094:../FreeRTOS/Source/tasks.c **** 		{
 513              		.loc 1 1094 0
 514 006a 0A4B     		ldr	r3, .L43+4
 515 006c 1B68     		ldr	r3, [r3]
 516 006e DA6A     		ldr	r2, [r3, #44]
 517 0070 E36A     		ldr	r3, [r4, #44]
 518 0072 9A42     		cmp	r2, r3
 519 0074 07D2     		bcs	.L36
1096:../FreeRTOS/Source/tasks.c **** 		}
 520              		.loc 1 1096 0
 521 0076 0C4B     		ldr	r3, .L43+24
 522 0078 4FF08052 		mov	r2, #268435456
 523 007c 1A60     		str	r2, [r3]
 524              		.syntax unified
 525              	@ 1096 "../FreeRTOS/Source/tasks.c" 1
 526 007e BFF34F8F 		dsb
 527              	@ 0 "" 2
 528              	@ 1096 "../FreeRTOS/Source/tasks.c" 1
 529 0082 BFF36F8F 		isb
 530              	@ 0 "" 2
 531              		.thumb
 532              		.syntax unified
 533              	.L36:
1107:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 534              		.loc 1 1107 0
 535 0086 10BD     		pop	{r4, pc}
 536              	.LVL51:
 537              	.L42:
1045:../FreeRTOS/Source/tasks.c **** 			}
 538              		.loc 1 1045 0
 539 0088 FFF7FEFF 		bl	prvInitialiseTaskLists
 540              	.LVL52:
 541 008c D4E7     		b	.L38
 542              	.L44:
 543 008e 00BF     		.align	2
 544              	.L43:
 545 0090 00000000 		.word	.LANCHOR9
 546 0094 00000000 		.word	.LANCHOR10
 547 0098 00000000 		.word	.LANCHOR11
 548 009c 00000000 		.word	.LANCHOR12
 549 00a0 00000000 		.word	.LANCHOR13
 550 00a4 00000000 		.word	.LANCHOR4
 551 00a8 04ED00E0 		.word	-536810236
 552              		.cfi_endproc
 553              	.LFE7:
 555              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 556              		.align	1
 557              		.syntax unified
 558              		.thumb
 559              		.thumb_func
 560              		.fpu fpv4-sp-d16
 562              	prvCheckTasksWaitingTermination:
 563              	.LFB43:
3469:../FreeRTOS/Source/tasks.c **** 
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 81


 564              		.loc 1 3469 0
 565              		.cfi_startproc
 566              		@ args = 0, pretend = 0, frame = 0
 567              		@ frame_needed = 0, uses_anonymous_args = 0
 568              	.LBB108:
3479:../FreeRTOS/Source/tasks.c **** 		{
 569              		.loc 1 3479 0
 570 0000 0F4B     		ldr	r3, .L52
 571 0002 1B68     		ldr	r3, [r3]
 572 0004 D3B1     		cbz	r3, .L51
 573              	.LBE108:
3469:../FreeRTOS/Source/tasks.c **** 
 574              		.loc 1 3469 0
 575 0006 10B5     		push	{r4, lr}
 576              	.LCFI4:
 577              		.cfi_def_cfa_offset 8
 578              		.cfi_offset 4, -8
 579              		.cfi_offset 14, -4
 580              	.L47:
 581              	.LBB109:
3481:../FreeRTOS/Source/tasks.c **** 			{
 582              		.loc 1 3481 0
 583 0008 FFF7FEFF 		bl	vPortEnterCritical
 584              	.LVL53:
3483:../FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 585              		.loc 1 3483 0
 586 000c 0D4B     		ldr	r3, .L52+4
 587 000e DB68     		ldr	r3, [r3, #12]
 588 0010 DC68     		ldr	r4, [r3, #12]
 589              	.LVL54:
3484:../FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 590              		.loc 1 3484 0
 591 0012 201D     		adds	r0, r4, #4
 592 0014 FFF7FEFF 		bl	uxListRemove
 593              	.LVL55:
3485:../FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 594              		.loc 1 3485 0
 595 0018 0B4A     		ldr	r2, .L52+8
 596 001a 1368     		ldr	r3, [r2]
 597 001c 013B     		subs	r3, r3, #1
 598 001e 1360     		str	r3, [r2]
3486:../FreeRTOS/Source/tasks.c **** 			}
 599              		.loc 1 3486 0
 600 0020 074A     		ldr	r2, .L52
 601 0022 1368     		ldr	r3, [r2]
 602 0024 013B     		subs	r3, r3, #1
 603 0026 1360     		str	r3, [r2]
3488:../FreeRTOS/Source/tasks.c **** 
 604              		.loc 1 3488 0
 605 0028 FFF7FEFF 		bl	vPortExitCritical
 606              	.LVL56:
3490:../FreeRTOS/Source/tasks.c **** 		}
 607              		.loc 1 3490 0
 608 002c 2046     		mov	r0, r4
 609 002e FFF7FEFF 		bl	prvDeleteTCB
 610              	.LVL57:
3479:../FreeRTOS/Source/tasks.c **** 		{
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 82


 611              		.loc 1 3479 0
 612 0032 034B     		ldr	r3, .L52
 613 0034 1B68     		ldr	r3, [r3]
 614 0036 002B     		cmp	r3, #0
 615 0038 E6D1     		bne	.L47
 616              	.LBE109:
3494:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 617              		.loc 1 3494 0
 618 003a 10BD     		pop	{r4, pc}
 619              	.LVL58:
 620              	.L51:
 621              	.LCFI5:
 622              		.cfi_def_cfa_offset 0
 623              		.cfi_restore 4
 624              		.cfi_restore 14
 625 003c 7047     		bx	lr
 626              	.L53:
 627 003e 00BF     		.align	2
 628              	.L52:
 629 0040 00000000 		.word	.LANCHOR14
 630 0044 00000000 		.word	.LANCHOR7
 631 0048 00000000 		.word	.LANCHOR9
 632              		.cfi_endproc
 633              	.LFE43:
 635              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 636              		.align	1
 637              		.syntax unified
 638              		.thumb
 639              		.thumb_func
 640              		.fpu fpv4-sp-d16
 642              	prvAddCurrentTaskToDelayedList:
 643              	.LFB62:
3752:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3753:../FreeRTOS/Source/tasks.c **** 
3754:../FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3755:../FreeRTOS/Source/tasks.c **** 
3756:../FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3757:../FreeRTOS/Source/tasks.c **** 	{
3758:../FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3759:../FreeRTOS/Source/tasks.c **** 
3760:../FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3761:../FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3762:../FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3763:../FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3764:../FreeRTOS/Source/tasks.c **** 
3765:../FreeRTOS/Source/tasks.c **** 		return xReturn;
3766:../FreeRTOS/Source/tasks.c **** 	}
3767:../FreeRTOS/Source/tasks.c **** 
3768:../FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3769:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3770:../FreeRTOS/Source/tasks.c **** 
3771:../FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3772:../FreeRTOS/Source/tasks.c **** 
3773:../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3774:../FreeRTOS/Source/tasks.c **** 	{
3775:../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3776:../FreeRTOS/Source/tasks.c **** 
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 83


3777:../FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3778:../FreeRTOS/Source/tasks.c **** 		{
3779:../FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3780:../FreeRTOS/Source/tasks.c **** 		}
3781:../FreeRTOS/Source/tasks.c **** 		else
3782:../FreeRTOS/Source/tasks.c **** 		{
3783:../FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3784:../FreeRTOS/Source/tasks.c **** 			{
3785:../FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
3786:../FreeRTOS/Source/tasks.c **** 			}
3787:../FreeRTOS/Source/tasks.c **** 			else
3788:../FreeRTOS/Source/tasks.c **** 			{
3789:../FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3790:../FreeRTOS/Source/tasks.c **** 			}
3791:../FreeRTOS/Source/tasks.c **** 		}
3792:../FreeRTOS/Source/tasks.c **** 
3793:../FreeRTOS/Source/tasks.c **** 		return xReturn;
3794:../FreeRTOS/Source/tasks.c **** 	}
3795:../FreeRTOS/Source/tasks.c **** 
3796:../FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3797:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3798:../FreeRTOS/Source/tasks.c **** 
3799:../FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3800:../FreeRTOS/Source/tasks.c **** 
3801:../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3802:../FreeRTOS/Source/tasks.c **** 	{
3803:../FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
3804:../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3805:../FreeRTOS/Source/tasks.c **** 
3806:../FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3807:../FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3808:../FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3809:../FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3810:../FreeRTOS/Source/tasks.c **** 		{
3811:../FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3812:../FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3813:../FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3814:../FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3815:../FreeRTOS/Source/tasks.c **** 			{
3816:../FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3817:../FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3818:../FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3819:../FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3820:../FreeRTOS/Source/tasks.c **** 				{
3821:../FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3822:../FreeRTOS/Source/tasks.c **** 				}
3823:../FreeRTOS/Source/tasks.c **** 				else
3824:../FreeRTOS/Source/tasks.c **** 				{
3825:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3826:../FreeRTOS/Source/tasks.c **** 				}
3827:../FreeRTOS/Source/tasks.c **** 
3828:../FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3829:../FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3830:../FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3831:../FreeRTOS/Source/tasks.c **** 				{
3832:../FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3833:../FreeRTOS/Source/tasks.c **** 					{
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 84


3834:../FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3835:../FreeRTOS/Source/tasks.c **** 					}
3836:../FreeRTOS/Source/tasks.c **** 					else
3837:../FreeRTOS/Source/tasks.c **** 					{
3838:../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3839:../FreeRTOS/Source/tasks.c **** 					}
3840:../FreeRTOS/Source/tasks.c **** 
3841:../FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3842:../FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3843:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3844:../FreeRTOS/Source/tasks.c **** 				}
3845:../FreeRTOS/Source/tasks.c **** 				else
3846:../FreeRTOS/Source/tasks.c **** 				{
3847:../FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3848:../FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3849:../FreeRTOS/Source/tasks.c **** 				}
3850:../FreeRTOS/Source/tasks.c **** 
3851:../FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3852:../FreeRTOS/Source/tasks.c **** 
3853:../FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
3854:../FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3855:../FreeRTOS/Source/tasks.c **** 			}
3856:../FreeRTOS/Source/tasks.c **** 			else
3857:../FreeRTOS/Source/tasks.c **** 			{
3858:../FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3859:../FreeRTOS/Source/tasks.c **** 				{
3860:../FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3861:../FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
3862:../FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
3863:../FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
3864:../FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
3865:../FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
3866:../FreeRTOS/Source/tasks.c **** 					not been the case. */
3867:../FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3868:../FreeRTOS/Source/tasks.c **** 				}
3869:../FreeRTOS/Source/tasks.c **** 				else
3870:../FreeRTOS/Source/tasks.c **** 				{
3871:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3872:../FreeRTOS/Source/tasks.c **** 				}
3873:../FreeRTOS/Source/tasks.c **** 			}
3874:../FreeRTOS/Source/tasks.c **** 		}
3875:../FreeRTOS/Source/tasks.c **** 		else
3876:../FreeRTOS/Source/tasks.c **** 		{
3877:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3878:../FreeRTOS/Source/tasks.c **** 		}
3879:../FreeRTOS/Source/tasks.c **** 
3880:../FreeRTOS/Source/tasks.c **** 		return xReturn;
3881:../FreeRTOS/Source/tasks.c **** 	}
3882:../FreeRTOS/Source/tasks.c **** 
3883:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3884:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3885:../FreeRTOS/Source/tasks.c **** 
3886:../FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3887:../FreeRTOS/Source/tasks.c **** 
3888:../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3889:../FreeRTOS/Source/tasks.c **** 	{
3890:../FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 85


3891:../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3892:../FreeRTOS/Source/tasks.c **** 
3893:../FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3894:../FreeRTOS/Source/tasks.c **** 		{
3895:../FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3896:../FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3897:../FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3898:../FreeRTOS/Source/tasks.c **** 			be the running state task. */
3899:../FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
3900:../FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3901:../FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3902:../FreeRTOS/Source/tasks.c **** 
3903:../FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3904:../FreeRTOS/Source/tasks.c **** 			task? */
3905:../FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3906:../FreeRTOS/Source/tasks.c **** 			{
3907:../FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3908:../FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3909:../FreeRTOS/Source/tasks.c **** 				{
3910:../FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3911:../FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3912:../FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3913:../FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
3914:../FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
3915:../FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3916:../FreeRTOS/Source/tasks.c **** 					{
3917:../FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3918:../FreeRTOS/Source/tasks.c **** 					}
3919:../FreeRTOS/Source/tasks.c **** 					else
3920:../FreeRTOS/Source/tasks.c **** 					{
3921:../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3922:../FreeRTOS/Source/tasks.c **** 					}
3923:../FreeRTOS/Source/tasks.c **** 
3924:../FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3925:../FreeRTOS/Source/tasks.c **** 					new	ready list. */
3926:../FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3927:../FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3928:../FreeRTOS/Source/tasks.c **** 
3929:../FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3930:../FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3931:../FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3932:../FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3933:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3934:../FreeRTOS/Source/tasks.c **** 
3935:../FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3936:../FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3937:../FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3938:../FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3939:../FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3940:../FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3941:../FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3942:../FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3943:../FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3944:../FreeRTOS/Source/tasks.c **** 				}
3945:../FreeRTOS/Source/tasks.c **** 				else
3946:../FreeRTOS/Source/tasks.c **** 				{
3947:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 86


3948:../FreeRTOS/Source/tasks.c **** 				}
3949:../FreeRTOS/Source/tasks.c **** 			}
3950:../FreeRTOS/Source/tasks.c **** 			else
3951:../FreeRTOS/Source/tasks.c **** 			{
3952:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3953:../FreeRTOS/Source/tasks.c **** 			}
3954:../FreeRTOS/Source/tasks.c **** 		}
3955:../FreeRTOS/Source/tasks.c **** 		else
3956:../FreeRTOS/Source/tasks.c **** 		{
3957:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3958:../FreeRTOS/Source/tasks.c **** 		}
3959:../FreeRTOS/Source/tasks.c **** 
3960:../FreeRTOS/Source/tasks.c **** 		return xReturn;
3961:../FreeRTOS/Source/tasks.c **** 	}
3962:../FreeRTOS/Source/tasks.c **** 
3963:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3964:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3965:../FreeRTOS/Source/tasks.c **** 
3966:../FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3967:../FreeRTOS/Source/tasks.c **** 
3968:../FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3969:../FreeRTOS/Source/tasks.c **** 	{
3970:../FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3971:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
3972:../FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
3973:../FreeRTOS/Source/tasks.c **** 
3974:../FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3975:../FreeRTOS/Source/tasks.c **** 		{
3976:../FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3977:../FreeRTOS/Source/tasks.c **** 			one mutex. */
3978:../FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3979:../FreeRTOS/Source/tasks.c **** 
3980:../FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
3981:../FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3982:../FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
3983:../FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3984:../FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3985:../FreeRTOS/Source/tasks.c **** 			{
3986:../FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
3987:../FreeRTOS/Source/tasks.c **** 			}
3988:../FreeRTOS/Source/tasks.c **** 			else
3989:../FreeRTOS/Source/tasks.c **** 			{
3990:../FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
3991:../FreeRTOS/Source/tasks.c **** 			}
3992:../FreeRTOS/Source/tasks.c **** 
3993:../FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
3994:../FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
3995:../FreeRTOS/Source/tasks.c **** 			{
3996:../FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
3997:../FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
3998:../FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
3999:../FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
4000:../FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
4001:../FreeRTOS/Source/tasks.c **** 				{
4002:../FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
4003:../FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
4004:../FreeRTOS/Source/tasks.c **** 					its own priority. */
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 87


4005:../FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4006:../FreeRTOS/Source/tasks.c **** 
4007:../FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4008:../FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4009:../FreeRTOS/Source/tasks.c **** 					state. */
4010:../FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4011:../FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4012:../FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4013:../FreeRTOS/Source/tasks.c **** 
4014:../FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4015:../FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4016:../FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4017:../FreeRTOS/Source/tasks.c **** 					{
4018:../FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4019:../FreeRTOS/Source/tasks.c **** 					}
4020:../FreeRTOS/Source/tasks.c **** 					else
4021:../FreeRTOS/Source/tasks.c **** 					{
4022:../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4023:../FreeRTOS/Source/tasks.c **** 					}
4024:../FreeRTOS/Source/tasks.c **** 
4025:../FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4026:../FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4027:../FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4028:../FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4029:../FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4030:../FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4031:../FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4032:../FreeRTOS/Source/tasks.c **** 					{
4033:../FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4034:../FreeRTOS/Source/tasks.c **** 						{
4035:../FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4036:../FreeRTOS/Source/tasks.c **** 						}
4037:../FreeRTOS/Source/tasks.c **** 						else
4038:../FreeRTOS/Source/tasks.c **** 						{
4039:../FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4040:../FreeRTOS/Source/tasks.c **** 						}
4041:../FreeRTOS/Source/tasks.c **** 
4042:../FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4043:../FreeRTOS/Source/tasks.c **** 					}
4044:../FreeRTOS/Source/tasks.c **** 					else
4045:../FreeRTOS/Source/tasks.c **** 					{
4046:../FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4047:../FreeRTOS/Source/tasks.c **** 					}
4048:../FreeRTOS/Source/tasks.c **** 				}
4049:../FreeRTOS/Source/tasks.c **** 				else
4050:../FreeRTOS/Source/tasks.c **** 				{
4051:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4052:../FreeRTOS/Source/tasks.c **** 				}
4053:../FreeRTOS/Source/tasks.c **** 			}
4054:../FreeRTOS/Source/tasks.c **** 			else
4055:../FreeRTOS/Source/tasks.c **** 			{
4056:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4057:../FreeRTOS/Source/tasks.c **** 			}
4058:../FreeRTOS/Source/tasks.c **** 		}
4059:../FreeRTOS/Source/tasks.c **** 		else
4060:../FreeRTOS/Source/tasks.c **** 		{
4061:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 88


4062:../FreeRTOS/Source/tasks.c **** 		}
4063:../FreeRTOS/Source/tasks.c **** 	}
4064:../FreeRTOS/Source/tasks.c **** 
4065:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4066:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4067:../FreeRTOS/Source/tasks.c **** 
4068:../FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4069:../FreeRTOS/Source/tasks.c **** 
4070:../FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
4071:../FreeRTOS/Source/tasks.c **** 	{
4072:../FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4073:../FreeRTOS/Source/tasks.c **** 
4074:../FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4075:../FreeRTOS/Source/tasks.c **** 		{
4076:../FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4077:../FreeRTOS/Source/tasks.c **** 
4078:../FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4079:../FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4080:../FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4081:../FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4082:../FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4083:../FreeRTOS/Source/tasks.c **** 			critical section. */
4084:../FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4085:../FreeRTOS/Source/tasks.c **** 			{
4086:../FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4087:../FreeRTOS/Source/tasks.c **** 			}
4088:../FreeRTOS/Source/tasks.c **** 		}
4089:../FreeRTOS/Source/tasks.c **** 		else
4090:../FreeRTOS/Source/tasks.c **** 		{
4091:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4092:../FreeRTOS/Source/tasks.c **** 		}
4093:../FreeRTOS/Source/tasks.c **** 	}
4094:../FreeRTOS/Source/tasks.c **** 
4095:../FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4096:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4097:../FreeRTOS/Source/tasks.c **** 
4098:../FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4099:../FreeRTOS/Source/tasks.c **** 
4100:../FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4101:../FreeRTOS/Source/tasks.c **** 	{
4102:../FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4103:../FreeRTOS/Source/tasks.c **** 		{
4104:../FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4105:../FreeRTOS/Source/tasks.c **** 			{
4106:../FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4107:../FreeRTOS/Source/tasks.c **** 
4108:../FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4109:../FreeRTOS/Source/tasks.c **** 				{
4110:../FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4111:../FreeRTOS/Source/tasks.c **** 				}
4112:../FreeRTOS/Source/tasks.c **** 				else
4113:../FreeRTOS/Source/tasks.c **** 				{
4114:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4115:../FreeRTOS/Source/tasks.c **** 				}
4116:../FreeRTOS/Source/tasks.c **** 			}
4117:../FreeRTOS/Source/tasks.c **** 			else
4118:../FreeRTOS/Source/tasks.c **** 			{
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 89


4119:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4120:../FreeRTOS/Source/tasks.c **** 			}
4121:../FreeRTOS/Source/tasks.c **** 		}
4122:../FreeRTOS/Source/tasks.c **** 		else
4123:../FreeRTOS/Source/tasks.c **** 		{
4124:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4125:../FreeRTOS/Source/tasks.c **** 		}
4126:../FreeRTOS/Source/tasks.c **** 	}
4127:../FreeRTOS/Source/tasks.c **** 
4128:../FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4129:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4130:../FreeRTOS/Source/tasks.c **** 
4131:../FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4132:../FreeRTOS/Source/tasks.c **** 
4133:../FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4134:../FreeRTOS/Source/tasks.c **** 	{
4135:../FreeRTOS/Source/tasks.c **** 	size_t x;
4136:../FreeRTOS/Source/tasks.c **** 
4137:../FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4138:../FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4139:../FreeRTOS/Source/tasks.c **** 
4140:../FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4141:../FreeRTOS/Source/tasks.c **** 		printed out. */
4142:../FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4143:../FreeRTOS/Source/tasks.c **** 		{
4144:../FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4145:../FreeRTOS/Source/tasks.c **** 		}
4146:../FreeRTOS/Source/tasks.c **** 
4147:../FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4148:../FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
4149:../FreeRTOS/Source/tasks.c **** 
4150:../FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4151:../FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4152:../FreeRTOS/Source/tasks.c **** 	}
4153:../FreeRTOS/Source/tasks.c **** 
4154:../FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4155:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4156:../FreeRTOS/Source/tasks.c **** 
4157:../FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4158:../FreeRTOS/Source/tasks.c **** 
4159:../FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4160:../FreeRTOS/Source/tasks.c **** 	{
4161:../FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4162:../FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4163:../FreeRTOS/Source/tasks.c **** 	char cStatus;
4164:../FreeRTOS/Source/tasks.c **** 
4165:../FreeRTOS/Source/tasks.c **** 		/*
4166:../FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4167:../FreeRTOS/Source/tasks.c **** 		 *
4168:../FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4169:../FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4170:../FreeRTOS/Source/tasks.c **** 		 * scheduler.
4171:../FreeRTOS/Source/tasks.c **** 		 *
4172:../FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4173:../FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4174:../FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4175:../FreeRTOS/Source/tasks.c **** 		 *
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 90


4176:../FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4177:../FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4178:../FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4179:../FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4180:../FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4181:../FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4182:../FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4183:../FreeRTOS/Source/tasks.c **** 		 *
4184:../FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4185:../FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4186:../FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4187:../FreeRTOS/Source/tasks.c **** 		 */
4188:../FreeRTOS/Source/tasks.c **** 
4189:../FreeRTOS/Source/tasks.c **** 
4190:../FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4191:../FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4192:../FreeRTOS/Source/tasks.c **** 
4193:../FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4194:../FreeRTOS/Source/tasks.c **** 		function is executing. */
4195:../FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4196:../FreeRTOS/Source/tasks.c **** 
4197:../FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4198:../FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4199:../FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4200:../FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4201:../FreeRTOS/Source/tasks.c **** 
4202:../FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4203:../FreeRTOS/Source/tasks.c **** 		{
4204:../FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4205:../FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4206:../FreeRTOS/Source/tasks.c **** 
4207:../FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4208:../FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4209:../FreeRTOS/Source/tasks.c **** 			{
4210:../FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4211:../FreeRTOS/Source/tasks.c **** 				{
4212:../FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4213:../FreeRTOS/Source/tasks.c **** 										break;
4214:../FreeRTOS/Source/tasks.c **** 
4215:../FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4216:../FreeRTOS/Source/tasks.c **** 										break;
4217:../FreeRTOS/Source/tasks.c **** 
4218:../FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4219:../FreeRTOS/Source/tasks.c **** 										break;
4220:../FreeRTOS/Source/tasks.c **** 
4221:../FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4222:../FreeRTOS/Source/tasks.c **** 										break;
4223:../FreeRTOS/Source/tasks.c **** 
4224:../FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4225:../FreeRTOS/Source/tasks.c **** 										break;
4226:../FreeRTOS/Source/tasks.c **** 
4227:../FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4228:../FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4229:../FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4230:../FreeRTOS/Source/tasks.c **** 										break;
4231:../FreeRTOS/Source/tasks.c **** 				}
4232:../FreeRTOS/Source/tasks.c **** 
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 91


4233:../FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4234:../FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4235:../FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4236:../FreeRTOS/Source/tasks.c **** 
4237:../FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4238:../FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4239:../FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4240:../FreeRTOS/Source/tasks.c **** 			}
4241:../FreeRTOS/Source/tasks.c **** 
4242:../FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4243:../FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4244:../FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4245:../FreeRTOS/Source/tasks.c **** 		}
4246:../FreeRTOS/Source/tasks.c **** 		else
4247:../FreeRTOS/Source/tasks.c **** 		{
4248:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4249:../FreeRTOS/Source/tasks.c **** 		}
4250:../FreeRTOS/Source/tasks.c **** 	}
4251:../FreeRTOS/Source/tasks.c **** 
4252:../FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4253:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4254:../FreeRTOS/Source/tasks.c **** 
4255:../FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4256:../FreeRTOS/Source/tasks.c **** 
4257:../FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4258:../FreeRTOS/Source/tasks.c **** 	{
4259:../FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4260:../FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4261:../FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4262:../FreeRTOS/Source/tasks.c **** 
4263:../FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4264:../FreeRTOS/Source/tasks.c **** 		{
4265:../FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4266:../FreeRTOS/Source/tasks.c **** 		}
4267:../FreeRTOS/Source/tasks.c **** 		#endif
4268:../FreeRTOS/Source/tasks.c **** 
4269:../FreeRTOS/Source/tasks.c **** 		/*
4270:../FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4271:../FreeRTOS/Source/tasks.c **** 		 *
4272:../FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4273:../FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4274:../FreeRTOS/Source/tasks.c **** 		 * scheduler.
4275:../FreeRTOS/Source/tasks.c **** 		 *
4276:../FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4277:../FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4278:../FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4279:../FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4280:../FreeRTOS/Source/tasks.c **** 		 *
4281:../FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4282:../FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4283:../FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4284:../FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4285:../FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4286:../FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4287:../FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4288:../FreeRTOS/Source/tasks.c **** 		 *
4289:../FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 92


4290:../FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4291:../FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4292:../FreeRTOS/Source/tasks.c **** 		 */
4293:../FreeRTOS/Source/tasks.c **** 
4294:../FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4295:../FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4296:../FreeRTOS/Source/tasks.c **** 
4297:../FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4298:../FreeRTOS/Source/tasks.c **** 		function is executing. */
4299:../FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4300:../FreeRTOS/Source/tasks.c **** 
4301:../FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4302:../FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4303:../FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4304:../FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4305:../FreeRTOS/Source/tasks.c **** 
4306:../FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4307:../FreeRTOS/Source/tasks.c **** 		{
4308:../FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4309:../FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4310:../FreeRTOS/Source/tasks.c **** 
4311:../FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4312:../FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4313:../FreeRTOS/Source/tasks.c **** 
4314:../FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4315:../FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4316:../FreeRTOS/Source/tasks.c **** 			{
4317:../FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4318:../FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4319:../FreeRTOS/Source/tasks.c **** 				{
4320:../FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4321:../FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4322:../FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4323:../FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4324:../FreeRTOS/Source/tasks.c **** 
4325:../FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4326:../FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4327:../FreeRTOS/Source/tasks.c **** 					easily. */
4328:../FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4329:../FreeRTOS/Source/tasks.c **** 
4330:../FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4331:../FreeRTOS/Source/tasks.c **** 					{
4332:../FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4333:../FreeRTOS/Source/tasks.c **** 						{
4334:../FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4335:../FreeRTOS/Source/tasks.c **** 						}
4336:../FreeRTOS/Source/tasks.c **** 						#else
4337:../FreeRTOS/Source/tasks.c **** 						{
4338:../FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4339:../FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4340:../FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4341:../FreeRTOS/Source/tasks.c **** 						}
4342:../FreeRTOS/Source/tasks.c **** 						#endif
4343:../FreeRTOS/Source/tasks.c **** 					}
4344:../FreeRTOS/Source/tasks.c **** 					else
4345:../FreeRTOS/Source/tasks.c **** 					{
4346:../FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 93


4347:../FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4348:../FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4349:../FreeRTOS/Source/tasks.c **** 						{
4350:../FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4351:../FreeRTOS/Source/tasks.c **** 						}
4352:../FreeRTOS/Source/tasks.c **** 						#else
4353:../FreeRTOS/Source/tasks.c **** 						{
4354:../FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4355:../FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4356:../FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4357:../FreeRTOS/Source/tasks.c **** 						}
4358:../FreeRTOS/Source/tasks.c **** 						#endif
4359:../FreeRTOS/Source/tasks.c **** 					}
4360:../FreeRTOS/Source/tasks.c **** 
4361:../FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4362:../FreeRTOS/Source/tasks.c **** 				}
4363:../FreeRTOS/Source/tasks.c **** 			}
4364:../FreeRTOS/Source/tasks.c **** 			else
4365:../FreeRTOS/Source/tasks.c **** 			{
4366:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4367:../FreeRTOS/Source/tasks.c **** 			}
4368:../FreeRTOS/Source/tasks.c **** 
4369:../FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4370:../FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4371:../FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4372:../FreeRTOS/Source/tasks.c **** 		}
4373:../FreeRTOS/Source/tasks.c **** 		else
4374:../FreeRTOS/Source/tasks.c **** 		{
4375:../FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4376:../FreeRTOS/Source/tasks.c **** 		}
4377:../FreeRTOS/Source/tasks.c **** 	}
4378:../FreeRTOS/Source/tasks.c **** 
4379:../FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4380:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4381:../FreeRTOS/Source/tasks.c **** 
4382:../FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4383:../FreeRTOS/Source/tasks.c **** {
4384:../FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4385:../FreeRTOS/Source/tasks.c **** 
4386:../FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4387:../FreeRTOS/Source/tasks.c **** 
4388:../FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4389:../FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4390:../FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4391:../FreeRTOS/Source/tasks.c **** 
4392:../FreeRTOS/Source/tasks.c **** 	return uxReturn;
4393:../FreeRTOS/Source/tasks.c **** }
4394:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4395:../FreeRTOS/Source/tasks.c **** 
4396:../FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4397:../FreeRTOS/Source/tasks.c **** 
4398:../FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4399:../FreeRTOS/Source/tasks.c **** 	{
4400:../FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4401:../FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4402:../FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4403:../FreeRTOS/Source/tasks.c **** 		{
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 94


4404:../FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4405:../FreeRTOS/Source/tasks.c **** 		}
4406:../FreeRTOS/Source/tasks.c **** 
4407:../FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4408:../FreeRTOS/Source/tasks.c **** 	}
4409:../FreeRTOS/Source/tasks.c **** 
4410:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4411:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4412:../FreeRTOS/Source/tasks.c **** 
4413:../FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4414:../FreeRTOS/Source/tasks.c **** 
4415:../FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4416:../FreeRTOS/Source/tasks.c **** 	{
4417:../FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4418:../FreeRTOS/Source/tasks.c **** 
4419:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4420:../FreeRTOS/Source/tasks.c **** 		{
4421:../FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4422:../FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4423:../FreeRTOS/Source/tasks.c **** 			{
4424:../FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4425:../FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4426:../FreeRTOS/Source/tasks.c **** 
4427:../FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4428:../FreeRTOS/Source/tasks.c **** 				{
4429:../FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4430:../FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4431:../FreeRTOS/Source/tasks.c **** 
4432:../FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4433:../FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4434:../FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4435:../FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4436:../FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4437:../FreeRTOS/Source/tasks.c **** 				}
4438:../FreeRTOS/Source/tasks.c **** 				else
4439:../FreeRTOS/Source/tasks.c **** 				{
4440:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4441:../FreeRTOS/Source/tasks.c **** 				}
4442:../FreeRTOS/Source/tasks.c **** 			}
4443:../FreeRTOS/Source/tasks.c **** 			else
4444:../FreeRTOS/Source/tasks.c **** 			{
4445:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4446:../FreeRTOS/Source/tasks.c **** 			}
4447:../FreeRTOS/Source/tasks.c **** 		}
4448:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4449:../FreeRTOS/Source/tasks.c **** 
4450:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4451:../FreeRTOS/Source/tasks.c **** 		{
4452:../FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4453:../FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4454:../FreeRTOS/Source/tasks.c **** 
4455:../FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4456:../FreeRTOS/Source/tasks.c **** 			{
4457:../FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4458:../FreeRTOS/Source/tasks.c **** 				{
4459:../FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4460:../FreeRTOS/Source/tasks.c **** 				}
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 95


4461:../FreeRTOS/Source/tasks.c **** 				else
4462:../FreeRTOS/Source/tasks.c **** 				{
4463:../FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4464:../FreeRTOS/Source/tasks.c **** 				}
4465:../FreeRTOS/Source/tasks.c **** 			}
4466:../FreeRTOS/Source/tasks.c **** 			else
4467:../FreeRTOS/Source/tasks.c **** 			{
4468:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4469:../FreeRTOS/Source/tasks.c **** 			}
4470:../FreeRTOS/Source/tasks.c **** 
4471:../FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4472:../FreeRTOS/Source/tasks.c **** 		}
4473:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4474:../FreeRTOS/Source/tasks.c **** 
4475:../FreeRTOS/Source/tasks.c **** 		return ulReturn;
4476:../FreeRTOS/Source/tasks.c **** 	}
4477:../FreeRTOS/Source/tasks.c **** 
4478:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4479:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4480:../FreeRTOS/Source/tasks.c **** 
4481:../FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4482:../FreeRTOS/Source/tasks.c **** 
4483:../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4484:../FreeRTOS/Source/tasks.c **** 	{
4485:../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4486:../FreeRTOS/Source/tasks.c **** 
4487:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4488:../FreeRTOS/Source/tasks.c **** 		{
4489:../FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4490:../FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4491:../FreeRTOS/Source/tasks.c **** 			{
4492:../FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4493:../FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4494:../FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4495:../FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4496:../FreeRTOS/Source/tasks.c **** 
4497:../FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4498:../FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4499:../FreeRTOS/Source/tasks.c **** 
4500:../FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4501:../FreeRTOS/Source/tasks.c **** 				{
4502:../FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4503:../FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4504:../FreeRTOS/Source/tasks.c **** 
4505:../FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4506:../FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4507:../FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4508:../FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4509:../FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4510:../FreeRTOS/Source/tasks.c **** 				}
4511:../FreeRTOS/Source/tasks.c **** 				else
4512:../FreeRTOS/Source/tasks.c **** 				{
4513:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4514:../FreeRTOS/Source/tasks.c **** 				}
4515:../FreeRTOS/Source/tasks.c **** 			}
4516:../FreeRTOS/Source/tasks.c **** 			else
4517:../FreeRTOS/Source/tasks.c **** 			{
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 96


4518:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4519:../FreeRTOS/Source/tasks.c **** 			}
4520:../FreeRTOS/Source/tasks.c **** 		}
4521:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4522:../FreeRTOS/Source/tasks.c **** 
4523:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4524:../FreeRTOS/Source/tasks.c **** 		{
4525:../FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4526:../FreeRTOS/Source/tasks.c **** 
4527:../FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4528:../FreeRTOS/Source/tasks.c **** 			{
4529:../FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4530:../FreeRTOS/Source/tasks.c **** 				have changed. */
4531:../FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4532:../FreeRTOS/Source/tasks.c **** 			}
4533:../FreeRTOS/Source/tasks.c **** 
4534:../FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4535:../FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4536:../FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4537:../FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4538:../FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4539:../FreeRTOS/Source/tasks.c **** 			{
4540:../FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4541:../FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4542:../FreeRTOS/Source/tasks.c **** 			}
4543:../FreeRTOS/Source/tasks.c **** 			else
4544:../FreeRTOS/Source/tasks.c **** 			{
4545:../FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4546:../FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4547:../FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4548:../FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4549:../FreeRTOS/Source/tasks.c **** 			}
4550:../FreeRTOS/Source/tasks.c **** 
4551:../FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4552:../FreeRTOS/Source/tasks.c **** 		}
4553:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4554:../FreeRTOS/Source/tasks.c **** 
4555:../FreeRTOS/Source/tasks.c **** 		return xReturn;
4556:../FreeRTOS/Source/tasks.c **** 	}
4557:../FreeRTOS/Source/tasks.c **** 
4558:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4559:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4560:../FreeRTOS/Source/tasks.c **** 
4561:../FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4562:../FreeRTOS/Source/tasks.c **** 
4563:../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4564:../FreeRTOS/Source/tasks.c **** 	{
4565:../FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4566:../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4567:../FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4568:../FreeRTOS/Source/tasks.c **** 
4569:../FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4570:../FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4571:../FreeRTOS/Source/tasks.c **** 
4572:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4573:../FreeRTOS/Source/tasks.c **** 		{
4574:../FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 97


4575:../FreeRTOS/Source/tasks.c **** 			{
4576:../FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4577:../FreeRTOS/Source/tasks.c **** 			}
4578:../FreeRTOS/Source/tasks.c **** 
4579:../FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4580:../FreeRTOS/Source/tasks.c **** 
4581:../FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4582:../FreeRTOS/Source/tasks.c **** 
4583:../FreeRTOS/Source/tasks.c **** 			switch( eAction )
4584:../FreeRTOS/Source/tasks.c **** 			{
4585:../FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4586:../FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4587:../FreeRTOS/Source/tasks.c **** 					break;
4588:../FreeRTOS/Source/tasks.c **** 
4589:../FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4590:../FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4591:../FreeRTOS/Source/tasks.c **** 					break;
4592:../FreeRTOS/Source/tasks.c **** 
4593:../FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4594:../FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4595:../FreeRTOS/Source/tasks.c **** 					break;
4596:../FreeRTOS/Source/tasks.c **** 
4597:../FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4598:../FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4599:../FreeRTOS/Source/tasks.c **** 					{
4600:../FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4601:../FreeRTOS/Source/tasks.c **** 					}
4602:../FreeRTOS/Source/tasks.c **** 					else
4603:../FreeRTOS/Source/tasks.c **** 					{
4604:../FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4605:../FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4606:../FreeRTOS/Source/tasks.c **** 					}
4607:../FreeRTOS/Source/tasks.c **** 					break;
4608:../FreeRTOS/Source/tasks.c **** 
4609:../FreeRTOS/Source/tasks.c **** 				case eNoAction:
4610:../FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4611:../FreeRTOS/Source/tasks.c **** 					updated. */
4612:../FreeRTOS/Source/tasks.c **** 					break;
4613:../FreeRTOS/Source/tasks.c **** 			}
4614:../FreeRTOS/Source/tasks.c **** 
4615:../FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4616:../FreeRTOS/Source/tasks.c **** 
4617:../FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4618:../FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4619:../FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4620:../FreeRTOS/Source/tasks.c **** 			{
4621:../FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4622:../FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4623:../FreeRTOS/Source/tasks.c **** 
4624:../FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4625:../FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4626:../FreeRTOS/Source/tasks.c **** 
4627:../FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4628:../FreeRTOS/Source/tasks.c **** 				{
4629:../FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4630:../FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4631:../FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 98


4632:../FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4633:../FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4634:../FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4635:../FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4636:../FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4637:../FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4638:../FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4639:../FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4640:../FreeRTOS/Source/tasks.c **** 				}
4641:../FreeRTOS/Source/tasks.c **** 				#endif
4642:../FreeRTOS/Source/tasks.c **** 
4643:../FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4644:../FreeRTOS/Source/tasks.c **** 				{
4645:../FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4646:../FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4647:../FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4648:../FreeRTOS/Source/tasks.c **** 				}
4649:../FreeRTOS/Source/tasks.c **** 				else
4650:../FreeRTOS/Source/tasks.c **** 				{
4651:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4652:../FreeRTOS/Source/tasks.c **** 				}
4653:../FreeRTOS/Source/tasks.c **** 			}
4654:../FreeRTOS/Source/tasks.c **** 			else
4655:../FreeRTOS/Source/tasks.c **** 			{
4656:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4657:../FreeRTOS/Source/tasks.c **** 			}
4658:../FreeRTOS/Source/tasks.c **** 		}
4659:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4660:../FreeRTOS/Source/tasks.c **** 
4661:../FreeRTOS/Source/tasks.c **** 		return xReturn;
4662:../FreeRTOS/Source/tasks.c **** 	}
4663:../FreeRTOS/Source/tasks.c **** 
4664:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4665:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4666:../FreeRTOS/Source/tasks.c **** 
4667:../FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4668:../FreeRTOS/Source/tasks.c **** 
4669:../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4670:../FreeRTOS/Source/tasks.c **** 	{
4671:../FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4672:../FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4673:../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4674:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4675:../FreeRTOS/Source/tasks.c **** 
4676:../FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4677:../FreeRTOS/Source/tasks.c **** 
4678:../FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4679:../FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4680:../FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4681:../FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4682:../FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4683:../FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4684:../FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4685:../FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4686:../FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4687:../FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4688:../FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 99


4689:../FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4690:../FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4691:../FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4692:../FreeRTOS/Source/tasks.c **** 		provided on the following link:
4693:../FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4694:../FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4695:../FreeRTOS/Source/tasks.c **** 
4696:../FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4697:../FreeRTOS/Source/tasks.c **** 
4698:../FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4699:../FreeRTOS/Source/tasks.c **** 		{
4700:../FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4701:../FreeRTOS/Source/tasks.c **** 			{
4702:../FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4703:../FreeRTOS/Source/tasks.c **** 			}
4704:../FreeRTOS/Source/tasks.c **** 
4705:../FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4706:../FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4707:../FreeRTOS/Source/tasks.c **** 
4708:../FreeRTOS/Source/tasks.c **** 			switch( eAction )
4709:../FreeRTOS/Source/tasks.c **** 			{
4710:../FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4711:../FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4712:../FreeRTOS/Source/tasks.c **** 					break;
4713:../FreeRTOS/Source/tasks.c **** 
4714:../FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4715:../FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4716:../FreeRTOS/Source/tasks.c **** 					break;
4717:../FreeRTOS/Source/tasks.c **** 
4718:../FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4719:../FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4720:../FreeRTOS/Source/tasks.c **** 					break;
4721:../FreeRTOS/Source/tasks.c **** 
4722:../FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4723:../FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4724:../FreeRTOS/Source/tasks.c **** 					{
4725:../FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4726:../FreeRTOS/Source/tasks.c **** 					}
4727:../FreeRTOS/Source/tasks.c **** 					else
4728:../FreeRTOS/Source/tasks.c **** 					{
4729:../FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4730:../FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4731:../FreeRTOS/Source/tasks.c **** 					}
4732:../FreeRTOS/Source/tasks.c **** 					break;
4733:../FreeRTOS/Source/tasks.c **** 
4734:../FreeRTOS/Source/tasks.c **** 				case eNoAction :
4735:../FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4736:../FreeRTOS/Source/tasks.c **** 					updated. */
4737:../FreeRTOS/Source/tasks.c **** 					break;
4738:../FreeRTOS/Source/tasks.c **** 			}
4739:../FreeRTOS/Source/tasks.c **** 
4740:../FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4741:../FreeRTOS/Source/tasks.c **** 
4742:../FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4743:../FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4744:../FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4745:../FreeRTOS/Source/tasks.c **** 			{
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 100


4746:../FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4747:../FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4748:../FreeRTOS/Source/tasks.c **** 
4749:../FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4750:../FreeRTOS/Source/tasks.c **** 				{
4751:../FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4752:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4753:../FreeRTOS/Source/tasks.c **** 				}
4754:../FreeRTOS/Source/tasks.c **** 				else
4755:../FreeRTOS/Source/tasks.c **** 				{
4756:../FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4757:../FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4758:../FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4759:../FreeRTOS/Source/tasks.c **** 				}
4760:../FreeRTOS/Source/tasks.c **** 
4761:../FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4762:../FreeRTOS/Source/tasks.c **** 				{
4763:../FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4764:../FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4765:../FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4766:../FreeRTOS/Source/tasks.c **** 					{
4767:../FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4768:../FreeRTOS/Source/tasks.c **** 					}
4769:../FreeRTOS/Source/tasks.c **** 					else
4770:../FreeRTOS/Source/tasks.c **** 					{
4771:../FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4772:../FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4773:../FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4774:../FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4775:../FreeRTOS/Source/tasks.c **** 					}
4776:../FreeRTOS/Source/tasks.c **** 				}
4777:../FreeRTOS/Source/tasks.c **** 				else
4778:../FreeRTOS/Source/tasks.c **** 				{
4779:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4780:../FreeRTOS/Source/tasks.c **** 				}
4781:../FreeRTOS/Source/tasks.c **** 			}
4782:../FreeRTOS/Source/tasks.c **** 		}
4783:../FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4784:../FreeRTOS/Source/tasks.c **** 
4785:../FreeRTOS/Source/tasks.c **** 		return xReturn;
4786:../FreeRTOS/Source/tasks.c **** 	}
4787:../FreeRTOS/Source/tasks.c **** 
4788:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4789:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4790:../FreeRTOS/Source/tasks.c **** 
4791:../FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4792:../FreeRTOS/Source/tasks.c **** 
4793:../FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4794:../FreeRTOS/Source/tasks.c **** 	{
4795:../FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4796:../FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4797:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4798:../FreeRTOS/Source/tasks.c **** 
4799:../FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4800:../FreeRTOS/Source/tasks.c **** 
4801:../FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4802:../FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 101


4803:../FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4804:../FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4805:../FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4806:../FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4807:../FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4808:../FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4809:../FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4810:../FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4811:../FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4812:../FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4813:../FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4814:../FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4815:../FreeRTOS/Source/tasks.c **** 		provided on the following link:
4816:../FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4817:../FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4818:../FreeRTOS/Source/tasks.c **** 
4819:../FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4820:../FreeRTOS/Source/tasks.c **** 
4821:../FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4822:../FreeRTOS/Source/tasks.c **** 		{
4823:../FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4824:../FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4825:../FreeRTOS/Source/tasks.c **** 
4826:../FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4827:../FreeRTOS/Source/tasks.c **** 			semaphore. */
4828:../FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4829:../FreeRTOS/Source/tasks.c **** 
4830:../FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4831:../FreeRTOS/Source/tasks.c **** 
4832:../FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4833:../FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4834:../FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4835:../FreeRTOS/Source/tasks.c **** 			{
4836:../FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4837:../FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4838:../FreeRTOS/Source/tasks.c **** 
4839:../FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4840:../FreeRTOS/Source/tasks.c **** 				{
4841:../FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4842:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4843:../FreeRTOS/Source/tasks.c **** 				}
4844:../FreeRTOS/Source/tasks.c **** 				else
4845:../FreeRTOS/Source/tasks.c **** 				{
4846:../FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4847:../FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4848:../FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4849:../FreeRTOS/Source/tasks.c **** 				}
4850:../FreeRTOS/Source/tasks.c **** 
4851:../FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4852:../FreeRTOS/Source/tasks.c **** 				{
4853:../FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4854:../FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4855:../FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4856:../FreeRTOS/Source/tasks.c **** 					{
4857:../FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4858:../FreeRTOS/Source/tasks.c **** 					}
4859:../FreeRTOS/Source/tasks.c **** 					else
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 102


4860:../FreeRTOS/Source/tasks.c **** 					{
4861:../FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4862:../FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4863:../FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4864:../FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4865:../FreeRTOS/Source/tasks.c **** 					}
4866:../FreeRTOS/Source/tasks.c **** 				}
4867:../FreeRTOS/Source/tasks.c **** 				else
4868:../FreeRTOS/Source/tasks.c **** 				{
4869:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4870:../FreeRTOS/Source/tasks.c **** 				}
4871:../FreeRTOS/Source/tasks.c **** 			}
4872:../FreeRTOS/Source/tasks.c **** 		}
4873:../FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4874:../FreeRTOS/Source/tasks.c **** 	}
4875:../FreeRTOS/Source/tasks.c **** 
4876:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4877:../FreeRTOS/Source/tasks.c **** 
4878:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4879:../FreeRTOS/Source/tasks.c **** 
4880:../FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4881:../FreeRTOS/Source/tasks.c **** 
4882:../FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4883:../FreeRTOS/Source/tasks.c **** 	{
4884:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4885:../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4886:../FreeRTOS/Source/tasks.c **** 
4887:../FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4888:../FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4889:../FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4890:../FreeRTOS/Source/tasks.c **** 
4891:../FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4892:../FreeRTOS/Source/tasks.c **** 		{
4893:../FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4894:../FreeRTOS/Source/tasks.c **** 			{
4895:../FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4896:../FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4897:../FreeRTOS/Source/tasks.c **** 			}
4898:../FreeRTOS/Source/tasks.c **** 			else
4899:../FreeRTOS/Source/tasks.c **** 			{
4900:../FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4901:../FreeRTOS/Source/tasks.c **** 			}
4902:../FreeRTOS/Source/tasks.c **** 		}
4903:../FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4904:../FreeRTOS/Source/tasks.c **** 
4905:../FreeRTOS/Source/tasks.c **** 		return xReturn;
4906:../FreeRTOS/Source/tasks.c **** 	}
4907:../FreeRTOS/Source/tasks.c **** 
4908:../FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4909:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4910:../FreeRTOS/Source/tasks.c **** 
4911:../FreeRTOS/Source/tasks.c **** 
4912:../FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4913:../FreeRTOS/Source/tasks.c **** {
 644              		.loc 1 4913 0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 103


 647              		@ frame_needed = 0, uses_anonymous_args = 0
 648              	.LVL59:
 649 0000 70B5     		push	{r4, r5, r6, lr}
 650              	.LCFI6:
 651              		.cfi_def_cfa_offset 16
 652              		.cfi_offset 4, -16
 653              		.cfi_offset 5, -12
 654              		.cfi_offset 6, -8
 655              		.cfi_offset 14, -4
 656 0002 0446     		mov	r4, r0
 657 0004 0E46     		mov	r6, r1
4914:../FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4915:../FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 658              		.loc 1 4915 0
 659 0006 1D4B     		ldr	r3, .L62
 660 0008 1D68     		ldr	r5, [r3]
 661              	.LVL60:
4916:../FreeRTOS/Source/tasks.c **** 
4917:../FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4918:../FreeRTOS/Source/tasks.c **** 	{
4919:../FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4920:../FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4921:../FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4922:../FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4923:../FreeRTOS/Source/tasks.c **** 	}
4924:../FreeRTOS/Source/tasks.c **** 	#endif
4925:../FreeRTOS/Source/tasks.c **** 
4926:../FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4927:../FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4928:../FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 662              		.loc 1 4928 0
 663 000a 1D4B     		ldr	r3, .L62+4
 664 000c 1868     		ldr	r0, [r3]
 665              	.LVL61:
 666 000e 0430     		adds	r0, r0, #4
 667 0010 FFF7FEFF 		bl	uxListRemove
 668              	.LVL62:
 669 0014 50B9     		cbnz	r0, .L55
4929:../FreeRTOS/Source/tasks.c **** 	{
4930:../FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4931:../FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4932:../FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 670              		.loc 1 4932 0
 671 0016 1A4B     		ldr	r3, .L62+4
 672 0018 1B68     		ldr	r3, [r3]
 673 001a DA6A     		ldr	r2, [r3, #44]
 674 001c 0123     		movs	r3, #1
 675 001e 03FA02F2 		lsl	r2, r3, r2
 676 0022 1849     		ldr	r1, .L62+8
 677 0024 0B68     		ldr	r3, [r1]
 678 0026 23EA0203 		bic	r3, r3, r2
 679 002a 0B60     		str	r3, [r1]
 680              	.L55:
4933:../FreeRTOS/Source/tasks.c **** 	}
4934:../FreeRTOS/Source/tasks.c **** 	else
4935:../FreeRTOS/Source/tasks.c **** 	{
4936:../FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 104


4937:../FreeRTOS/Source/tasks.c **** 	}
4938:../FreeRTOS/Source/tasks.c **** 
4939:../FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4940:../FreeRTOS/Source/tasks.c **** 	{
4941:../FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 681              		.loc 1 4941 0
 682 002c B4F1FF3F 		cmp	r4, #-1
 683 0030 13D0     		beq	.L60
 684              	.L56:
4942:../FreeRTOS/Source/tasks.c **** 		{
4943:../FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4944:../FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4945:../FreeRTOS/Source/tasks.c **** 			indefinitely. */
4946:../FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4947:../FreeRTOS/Source/tasks.c **** 		}
4948:../FreeRTOS/Source/tasks.c **** 		else
4949:../FreeRTOS/Source/tasks.c **** 		{
4950:../FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4951:../FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4952:../FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4953:../FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
 685              		.loc 1 4953 0
 686 0032 2C44     		add	r4, r4, r5
 687              	.LVL63:
4954:../FreeRTOS/Source/tasks.c **** 
4955:../FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4956:../FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 688              		.loc 1 4956 0
 689 0034 124B     		ldr	r3, .L62+4
 690 0036 1B68     		ldr	r3, [r3]
 691 0038 5C60     		str	r4, [r3, #4]
4957:../FreeRTOS/Source/tasks.c **** 
4958:../FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 692              		.loc 1 4958 0
 693 003a A542     		cmp	r5, r4
 694 003c 16D8     		bhi	.L61
4959:../FreeRTOS/Source/tasks.c **** 			{
4960:../FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4961:../FreeRTOS/Source/tasks.c **** 				list. */
4962:../FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4963:../FreeRTOS/Source/tasks.c **** 			}
4964:../FreeRTOS/Source/tasks.c **** 			else
4965:../FreeRTOS/Source/tasks.c **** 			{
4966:../FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4967:../FreeRTOS/Source/tasks.c **** 				is used. */
4968:../FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 695              		.loc 1 4968 0
 696 003e 124B     		ldr	r3, .L62+12
 697 0040 1868     		ldr	r0, [r3]
 698 0042 0F4B     		ldr	r3, .L62+4
 699 0044 1968     		ldr	r1, [r3]
 700 0046 0431     		adds	r1, r1, #4
 701 0048 FFF7FEFF 		bl	vListInsert
 702              	.LVL64:
4969:../FreeRTOS/Source/tasks.c **** 
4970:../FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4971:../FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 105


4972:../FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4973:../FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 703              		.loc 1 4973 0
 704 004c 0F4B     		ldr	r3, .L62+16
 705 004e 1B68     		ldr	r3, [r3]
 706 0050 A342     		cmp	r3, r4
 707 0052 12D9     		bls	.L54
4974:../FreeRTOS/Source/tasks.c **** 				{
4975:../FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 708              		.loc 1 4975 0
 709 0054 0D4B     		ldr	r3, .L62+16
 710 0056 1C60     		str	r4, [r3]
4976:../FreeRTOS/Source/tasks.c **** 				}
4977:../FreeRTOS/Source/tasks.c **** 				else
4978:../FreeRTOS/Source/tasks.c **** 				{
4979:../FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4980:../FreeRTOS/Source/tasks.c **** 				}
4981:../FreeRTOS/Source/tasks.c **** 			}
4982:../FreeRTOS/Source/tasks.c **** 		}
4983:../FreeRTOS/Source/tasks.c **** 	}
4984:../FreeRTOS/Source/tasks.c **** 	#else /* INCLUDE_vTaskSuspend */
4985:../FreeRTOS/Source/tasks.c **** 	{
4986:../FreeRTOS/Source/tasks.c **** 		/* Calculate the time at which the task should be woken if the event
4987:../FreeRTOS/Source/tasks.c **** 		does not occur.  This may overflow but this doesn't matter, the kernel
4988:../FreeRTOS/Source/tasks.c **** 		will manage it correctly. */
4989:../FreeRTOS/Source/tasks.c **** 		xTimeToWake = xConstTickCount + xTicksToWait;
4990:../FreeRTOS/Source/tasks.c **** 
4991:../FreeRTOS/Source/tasks.c **** 		/* The list item will be inserted in wake time order. */
4992:../FreeRTOS/Source/tasks.c **** 		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
4993:../FreeRTOS/Source/tasks.c **** 
4994:../FreeRTOS/Source/tasks.c **** 		if( xTimeToWake < xConstTickCount )
4995:../FreeRTOS/Source/tasks.c **** 		{
4996:../FreeRTOS/Source/tasks.c **** 			/* Wake time has overflowed.  Place this item in the overflow list. */
4997:../FreeRTOS/Source/tasks.c **** 			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4998:../FreeRTOS/Source/tasks.c **** 		}
4999:../FreeRTOS/Source/tasks.c **** 		else
5000:../FreeRTOS/Source/tasks.c **** 		{
5001:../FreeRTOS/Source/tasks.c **** 			/* The wake time has not overflowed, so the current block list is used. */
5002:../FreeRTOS/Source/tasks.c **** 			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
5003:../FreeRTOS/Source/tasks.c **** 
5004:../FreeRTOS/Source/tasks.c **** 			/* If the task entering the blocked state was placed at the head of the
5005:../FreeRTOS/Source/tasks.c **** 			list of blocked tasks then xNextTaskUnblockTime needs to be updated
5006:../FreeRTOS/Source/tasks.c **** 			too. */
5007:../FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xNextTaskUnblockTime )
5008:../FreeRTOS/Source/tasks.c **** 			{
5009:../FreeRTOS/Source/tasks.c **** 				xNextTaskUnblockTime = xTimeToWake;
5010:../FreeRTOS/Source/tasks.c **** 			}
5011:../FreeRTOS/Source/tasks.c **** 			else
5012:../FreeRTOS/Source/tasks.c **** 			{
5013:../FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
5014:../FreeRTOS/Source/tasks.c **** 			}
5015:../FreeRTOS/Source/tasks.c **** 		}
5016:../FreeRTOS/Source/tasks.c **** 
5017:../FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
5018:../FreeRTOS/Source/tasks.c **** 		( void ) xCanBlockIndefinitely;
5019:../FreeRTOS/Source/tasks.c **** 	}
5020:../FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 106


5021:../FreeRTOS/Source/tasks.c **** }
 711              		.loc 1 5021 0
 712 0058 0FE0     		b	.L54
 713              	.LVL65:
 714              	.L60:
4941:../FreeRTOS/Source/tasks.c **** 		{
 715              		.loc 1 4941 0 discriminator 1
 716 005a 002E     		cmp	r6, #0
 717 005c E9D0     		beq	.L56
4946:../FreeRTOS/Source/tasks.c **** 		}
 718              		.loc 1 4946 0
 719 005e 084B     		ldr	r3, .L62+4
 720 0060 1968     		ldr	r1, [r3]
 721 0062 0431     		adds	r1, r1, #4
 722 0064 0A48     		ldr	r0, .L62+20
 723 0066 FFF7FEFF 		bl	vListInsertEnd
 724              	.LVL66:
 725 006a 06E0     		b	.L54
 726              	.LVL67:
 727              	.L61:
4962:../FreeRTOS/Source/tasks.c **** 			}
 728              		.loc 1 4962 0
 729 006c 094B     		ldr	r3, .L62+24
 730 006e 1868     		ldr	r0, [r3]
 731 0070 034B     		ldr	r3, .L62+4
 732 0072 1968     		ldr	r1, [r3]
 733 0074 0431     		adds	r1, r1, #4
 734 0076 FFF7FEFF 		bl	vListInsert
 735              	.LVL68:
 736              	.L54:
 737              		.loc 1 5021 0
 738 007a 70BD     		pop	{r4, r5, r6, pc}
 739              	.LVL69:
 740              	.L63:
 741              		.align	2
 742              	.L62:
 743 007c 00000000 		.word	.LANCHOR15
 744 0080 00000000 		.word	.LANCHOR10
 745 0084 00000000 		.word	.LANCHOR13
 746 0088 00000000 		.word	.LANCHOR2
 747 008c 00000000 		.word	.LANCHOR3
 748 0090 00000000 		.word	.LANCHOR0
 749 0094 00000000 		.word	.LANCHOR8
 750              		.cfi_endproc
 751              	.LFE62:
 753              		.section	.text.prvIdleTask,"ax",%progbits
 754              		.align	1
 755              		.syntax unified
 756              		.thumb
 757              		.thumb_func
 758              		.fpu fpv4-sp-d16
 760              	prvIdleTask:
 761              	.LFB41:
3225:../FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 762              		.loc 1 3225 0
 763              		.cfi_startproc
 764              		@ Volatile: function does not return.
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 107


 765              		@ args = 0, pretend = 0, frame = 0
 766              		@ frame_needed = 0, uses_anonymous_args = 0
 767              	.LVL70:
 768 0000 08B5     		push	{r3, lr}
 769              	.LCFI7:
 770              		.cfi_def_cfa_offset 8
 771              		.cfi_offset 3, -8
 772              		.cfi_offset 14, -4
 773 0002 01E0     		b	.L66
 774              	.LVL71:
 775              	.L65:
 776              	.LBB110:
3284:../FreeRTOS/Source/tasks.c **** 		}
 777              		.loc 1 3284 0
 778 0004 FFF7FEFF 		bl	vApplicationIdleHook
 779              	.LVL72:
 780              	.L66:
 781              	.LBE110:
3241:../FreeRTOS/Source/tasks.c **** 
 782              		.loc 1 3241 0
 783 0008 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 784              	.LVL73:
3264:../FreeRTOS/Source/tasks.c **** 			{
 785              		.loc 1 3264 0
 786 000c 064B     		ldr	r3, .L68
 787 000e 1B68     		ldr	r3, [r3]
 788 0010 012B     		cmp	r3, #1
 789 0012 F7D9     		bls	.L65
3266:../FreeRTOS/Source/tasks.c **** 			}
 790              		.loc 1 3266 0
 791 0014 054B     		ldr	r3, .L68+4
 792 0016 4FF08052 		mov	r2, #268435456
 793 001a 1A60     		str	r2, [r3]
 794              		.syntax unified
 795              	@ 3266 "../FreeRTOS/Source/tasks.c" 1
 796 001c BFF34F8F 		dsb
 797              	@ 0 "" 2
 798              	@ 3266 "../FreeRTOS/Source/tasks.c" 1
 799 0020 BFF36F8F 		isb
 800              	@ 0 "" 2
 801              		.thumb
 802              		.syntax unified
 803 0024 EEE7     		b	.L65
 804              	.L69:
 805 0026 00BF     		.align	2
 806              	.L68:
 807 0028 00000000 		.word	.LANCHOR4
 808 002c 04ED00E0 		.word	-536810236
 809              		.cfi_endproc
 810              	.LFE41:
 812              		.section	.text.xTaskCreate,"ax",%progbits
 813              		.align	1
 814              		.global	xTaskCreate
 815              		.syntax unified
 816              		.thumb
 817              		.thumb_func
 818              		.fpu fpv4-sp-d16
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 108


 820              	xTaskCreate:
 821              	.LFB5:
 738:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 822              		.loc 1 738 0
 823              		.cfi_startproc
 824              		@ args = 8, pretend = 0, frame = 0
 825              		@ frame_needed = 0, uses_anonymous_args = 0
 826              	.LVL74:
 827 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 828              	.LCFI8:
 829              		.cfi_def_cfa_offset 28
 830              		.cfi_offset 4, -28
 831              		.cfi_offset 5, -24
 832              		.cfi_offset 6, -20
 833              		.cfi_offset 7, -16
 834              		.cfi_offset 8, -12
 835              		.cfi_offset 9, -8
 836              		.cfi_offset 14, -4
 837 0004 85B0     		sub	sp, sp, #20
 838              	.LCFI9:
 839              		.cfi_def_cfa_offset 48
 840 0006 0746     		mov	r7, r0
 841 0008 8846     		mov	r8, r1
 842 000a 1546     		mov	r5, r2
 843 000c 9946     		mov	r9, r3
 844              	.LBB111:
 772:../FreeRTOS/Source/tasks.c **** 
 845              		.loc 1 772 0
 846 000e 9000     		lsls	r0, r2, #2
 847              	.LVL75:
 848 0010 FFF7FEFF 		bl	pvPortMalloc
 849              	.LVL76:
 774:../FreeRTOS/Source/tasks.c **** 			{
 850              		.loc 1 774 0
 851 0014 F8B1     		cbz	r0, .L74
 852 0016 0646     		mov	r6, r0
 777:../FreeRTOS/Source/tasks.c **** 
 853              		.loc 1 777 0
 854 0018 5820     		movs	r0, #88
 855              	.LVL77:
 856 001a FFF7FEFF 		bl	pvPortMalloc
 857              	.LVL78:
 779:../FreeRTOS/Source/tasks.c **** 				{
 858              		.loc 1 779 0
 859 001e 0446     		mov	r4, r0
 860 0020 A8B1     		cbz	r0, .L72
 782:../FreeRTOS/Source/tasks.c **** 				}
 861              		.loc 1 782 0
 862 0022 0663     		str	r6, [r0, #48]
 863              	.LVL79:
 864              	.L73:
 865              	.LBE111:
 798:../FreeRTOS/Source/tasks.c **** 		{
 866              		.loc 1 798 0
 867 0024 D4B1     		cbz	r4, .L75
 808:../FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 868              		.loc 1 808 0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 109


 869 0026 0023     		movs	r3, #0
 870 0028 0393     		str	r3, [sp, #12]
 871 002a 0294     		str	r4, [sp, #8]
 872 002c 0D9B     		ldr	r3, [sp, #52]
 873 002e 0193     		str	r3, [sp, #4]
 874 0030 0C9B     		ldr	r3, [sp, #48]
 875 0032 0093     		str	r3, [sp]
 876 0034 4B46     		mov	r3, r9
 877 0036 2A46     		mov	r2, r5
 878 0038 4146     		mov	r1, r8
 879 003a 3846     		mov	r0, r7
 880 003c FFF7FEFF 		bl	prvInitialiseNewTask
 881              	.LVL80:
 809:../FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 882              		.loc 1 809 0
 883 0040 2046     		mov	r0, r4
 884 0042 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 885              	.LVL81:
 810:../FreeRTOS/Source/tasks.c **** 		}
 886              		.loc 1 810 0
 887 0046 0120     		movs	r0, #1
 888              	.LVL82:
 889              	.L70:
 818:../FreeRTOS/Source/tasks.c **** 
 890              		.loc 1 818 0
 891 0048 05B0     		add	sp, sp, #20
 892              	.LCFI10:
 893              		.cfi_remember_state
 894              		.cfi_def_cfa_offset 28
 895              		@ sp needed
 896 004a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 897              	.LVL83:
 898              	.L72:
 899              	.LCFI11:
 900              		.cfi_restore_state
 901              	.LBB112:
 788:../FreeRTOS/Source/tasks.c **** 				}
 902              		.loc 1 788 0
 903 004e 3046     		mov	r0, r6
 904              	.LVL84:
 905 0050 FFF7FEFF 		bl	vPortFree
 906              	.LVL85:
 907 0054 E6E7     		b	.L73
 908              	.LVL86:
 909              	.L74:
 910              	.LBE112:
 814:../FreeRTOS/Source/tasks.c **** 		}
 911              		.loc 1 814 0
 912 0056 4FF0FF30 		mov	r0, #-1
 913              	.LVL87:
 914 005a F5E7     		b	.L70
 915              	.LVL88:
 916              	.L75:
 917 005c 4FF0FF30 		mov	r0, #-1
 918              	.LVL89:
 817:../FreeRTOS/Source/tasks.c **** 	}
 919              		.loc 1 817 0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 110


 920 0060 F2E7     		b	.L70
 921              		.cfi_endproc
 922              	.LFE5:
 924              		.section	.text.vTaskDelete,"ax",%progbits
 925              		.align	1
 926              		.global	vTaskDelete
 927              		.syntax unified
 928              		.thumb
 929              		.thumb_func
 930              		.fpu fpv4-sp-d16
 932              	vTaskDelete:
 933              	.LFB8:
1113:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 934              		.loc 1 1113 0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 0
 937              		@ frame_needed = 0, uses_anonymous_args = 0
 938              	.LVL90:
 939 0000 38B5     		push	{r3, r4, r5, lr}
 940              	.LCFI12:
 941              		.cfi_def_cfa_offset 16
 942              		.cfi_offset 3, -16
 943              		.cfi_offset 4, -12
 944              		.cfi_offset 5, -8
 945              		.cfi_offset 14, -4
 946 0002 0446     		mov	r4, r0
1116:../FreeRTOS/Source/tasks.c **** 		{
 947              		.loc 1 1116 0
 948 0004 FFF7FEFF 		bl	vPortEnterCritical
 949              	.LVL91:
1120:../FreeRTOS/Source/tasks.c **** 
 950              		.loc 1 1120 0
 951 0008 002C     		cmp	r4, #0
 952 000a 34D0     		beq	.L87
 953              	.LVL92:
 954              	.L78:
1123:../FreeRTOS/Source/tasks.c **** 			{
 955              		.loc 1 1123 0 discriminator 4
 956 000c 251D     		adds	r5, r4, #4
 957 000e 2846     		mov	r0, r5
 958 0010 FFF7FEFF 		bl	uxListRemove
 959              	.LVL93:
 960 0014 70B9     		cbnz	r0, .L79
1125:../FreeRTOS/Source/tasks.c **** 			}
 961              		.loc 1 1125 0
 962 0016 E26A     		ldr	r2, [r4, #44]
 963 0018 02EB8201 		add	r1, r2, r2, lsl #2
 964 001c 8B00     		lsls	r3, r1, #2
 965 001e 2649     		ldr	r1, .L90
 966 0020 CB58     		ldr	r3, [r1, r3]
 967 0022 3BB9     		cbnz	r3, .L79
1125:../FreeRTOS/Source/tasks.c **** 			}
 968              		.loc 1 1125 0 is_stmt 0 discriminator 1
 969 0024 0123     		movs	r3, #1
 970 0026 03FA02F2 		lsl	r2, r3, r2
 971 002a 2449     		ldr	r1, .L90+4
 972 002c 0B68     		ldr	r3, [r1]
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 111


 973 002e 23EA0203 		bic	r3, r3, r2
 974 0032 0B60     		str	r3, [r1]
 975              	.L79:
1133:../FreeRTOS/Source/tasks.c **** 			{
 976              		.loc 1 1133 0 is_stmt 1
 977 0034 A36A     		ldr	r3, [r4, #40]
 978 0036 1BB1     		cbz	r3, .L80
1135:../FreeRTOS/Source/tasks.c **** 			}
 979              		.loc 1 1135 0
 980 0038 04F11800 		add	r0, r4, #24
 981 003c FFF7FEFF 		bl	uxListRemove
 982              	.LVL94:
 983              	.L80:
1146:../FreeRTOS/Source/tasks.c **** 
 984              		.loc 1 1146 0
 985 0040 1F4A     		ldr	r2, .L90+8
 986 0042 1368     		ldr	r3, [r2]
 987 0044 0133     		adds	r3, r3, #1
 988 0046 1360     		str	r3, [r2]
1148:../FreeRTOS/Source/tasks.c **** 			{
 989              		.loc 1 1148 0
 990 0048 1E4B     		ldr	r3, .L90+12
 991 004a 1B68     		ldr	r3, [r3]
 992 004c A342     		cmp	r3, r4
 993 004e 15D0     		beq	.L88
1171:../FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 994              		.loc 1 1171 0
 995 0050 1D4A     		ldr	r2, .L90+16
 996 0052 1368     		ldr	r3, [r2]
 997 0054 013B     		subs	r3, r3, #1
 998 0056 1360     		str	r3, [r2]
1172:../FreeRTOS/Source/tasks.c **** 
 999              		.loc 1 1172 0
 1000 0058 2046     		mov	r0, r4
 1001 005a FFF7FEFF 		bl	prvDeleteTCB
 1002              	.LVL95:
1176:../FreeRTOS/Source/tasks.c **** 			}
 1003              		.loc 1 1176 0
 1004 005e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1005              	.LVL96:
 1006              	.L82:
1181:../FreeRTOS/Source/tasks.c **** 
 1007              		.loc 1 1181 0
 1008 0062 FFF7FEFF 		bl	vPortExitCritical
 1009              	.LVL97:
1185:../FreeRTOS/Source/tasks.c **** 		{
 1010              		.loc 1 1185 0
 1011 0066 194B     		ldr	r3, .L90+20
 1012 0068 1B68     		ldr	r3, [r3]
 1013 006a 1BB1     		cbz	r3, .L77
1187:../FreeRTOS/Source/tasks.c **** 			{
 1014              		.loc 1 1187 0
 1015 006c 154B     		ldr	r3, .L90+12
 1016 006e 1B68     		ldr	r3, [r3]
 1017 0070 A342     		cmp	r3, r4
 1018 0072 0CD0     		beq	.L89
 1019              	.L77:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 112


1197:../FreeRTOS/Source/tasks.c **** 
 1020              		.loc 1 1197 0
 1021 0074 38BD     		pop	{r3, r4, r5, pc}
 1022              	.LVL98:
 1023              	.L87:
1120:../FreeRTOS/Source/tasks.c **** 
 1024              		.loc 1 1120 0 discriminator 1
 1025 0076 134B     		ldr	r3, .L90+12
 1026 0078 1C68     		ldr	r4, [r3]
 1027              	.LVL99:
 1028 007a C7E7     		b	.L78
 1029              	.LVL100:
 1030              	.L88:
1155:../FreeRTOS/Source/tasks.c **** 
 1031              		.loc 1 1155 0
 1032 007c 2946     		mov	r1, r5
 1033 007e 1448     		ldr	r0, .L90+24
 1034 0080 FFF7FEFF 		bl	vListInsertEnd
 1035              	.LVL101:
1160:../FreeRTOS/Source/tasks.c **** 
 1036              		.loc 1 1160 0
 1037 0084 134A     		ldr	r2, .L90+28
 1038 0086 1368     		ldr	r3, [r2]
 1039 0088 0133     		adds	r3, r3, #1
 1040 008a 1360     		str	r3, [r2]
 1041 008c E9E7     		b	.L82
 1042              	.L89:
1189:../FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1043              		.loc 1 1189 0
 1044 008e 124B     		ldr	r3, .L90+32
 1045 0090 1B68     		ldr	r3, [r3]
 1046 0092 43B1     		cbz	r3, .L84
 1047              	.LBB113:
 1048              	.LBB114:
 1049              		.loc 2 195 0
 1050              		.syntax unified
 1051              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1052 0094 4FF05003 			mov r3, #80												
 1053 0098 83F31188 		msr basepri, r3											
 1054 009c BFF36F8F 		isb														
 1055 00a0 BFF34F8F 		dsb														
 1056              	
 1057              	@ 0 "" 2
 1058              	.LVL102:
 1059              		.thumb
 1060              		.syntax unified
 1061              	.L85:
 1062 00a4 FEE7     		b	.L85
 1063              	.L84:
 1064              	.LBE114:
 1065              	.LBE113:
1190:../FreeRTOS/Source/tasks.c **** 			}
 1066              		.loc 1 1190 0
 1067 00a6 0D4B     		ldr	r3, .L90+36
 1068 00a8 4FF08052 		mov	r2, #268435456
 1069 00ac 1A60     		str	r2, [r3]
 1070              		.syntax unified
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 113


 1071              	@ 1190 "../FreeRTOS/Source/tasks.c" 1
 1072 00ae BFF34F8F 		dsb
 1073              	@ 0 "" 2
 1074              	@ 1190 "../FreeRTOS/Source/tasks.c" 1
 1075 00b2 BFF36F8F 		isb
 1076              	@ 0 "" 2
1197:../FreeRTOS/Source/tasks.c **** 
 1077              		.loc 1 1197 0
 1078              		.thumb
 1079              		.syntax unified
 1080 00b6 DDE7     		b	.L77
 1081              	.L91:
 1082              		.align	2
 1083              	.L90:
 1084 00b8 00000000 		.word	.LANCHOR4
 1085 00bc 00000000 		.word	.LANCHOR13
 1086 00c0 00000000 		.word	.LANCHOR12
 1087 00c4 00000000 		.word	.LANCHOR10
 1088 00c8 00000000 		.word	.LANCHOR9
 1089 00cc 00000000 		.word	.LANCHOR11
 1090 00d0 00000000 		.word	.LANCHOR7
 1091 00d4 00000000 		.word	.LANCHOR14
 1092 00d8 00000000 		.word	.LANCHOR16
 1093 00dc 04ED00E0 		.word	-536810236
 1094              		.cfi_endproc
 1095              	.LFE8:
 1097              		.section	.text.eTaskGetState,"ax",%progbits
 1098              		.align	1
 1099              		.global	eTaskGetState
 1100              		.syntax unified
 1101              		.thumb
 1102              		.thumb_func
 1103              		.fpu fpv4-sp-d16
 1105              	eTaskGetState:
 1106              	.LFB11:
1334:../FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 1107              		.loc 1 1334 0
 1108              		.cfi_startproc
 1109              		@ args = 0, pretend = 0, frame = 0
 1110              		@ frame_needed = 0, uses_anonymous_args = 0
 1111              	.LVL103:
 1112 0000 38B5     		push	{r3, r4, r5, lr}
 1113              	.LCFI13:
 1114              		.cfi_def_cfa_offset 16
 1115              		.cfi_offset 3, -16
 1116              		.cfi_offset 4, -12
 1117              		.cfi_offset 5, -8
 1118              		.cfi_offset 14, -4
 1119              	.LVL104:
1339:../FreeRTOS/Source/tasks.c **** 
 1120              		.loc 1 1339 0
 1121 0002 D0B1     		cbz	r0, .L104
 1122 0004 0546     		mov	r5, r0
1341:../FreeRTOS/Source/tasks.c **** 		{
 1123              		.loc 1 1341 0
 1124 0006 194B     		ldr	r3, .L107
 1125 0008 1B68     		ldr	r3, [r3]
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 114


 1126 000a 8342     		cmp	r3, r0
 1127 000c 24D0     		beq	.L97
1348:../FreeRTOS/Source/tasks.c **** 			{
 1128              		.loc 1 1348 0
 1129 000e FFF7FEFF 		bl	vPortEnterCritical
 1130              	.LVL105:
1350:../FreeRTOS/Source/tasks.c **** 			}
 1131              		.loc 1 1350 0
 1132 0012 6C69     		ldr	r4, [r5, #20]
 1133              	.LVL106:
1352:../FreeRTOS/Source/tasks.c **** 
 1134              		.loc 1 1352 0
 1135 0014 FFF7FEFF 		bl	vPortExitCritical
 1136              	.LVL107:
1354:../FreeRTOS/Source/tasks.c **** 			{
 1137              		.loc 1 1354 0
 1138 0018 154B     		ldr	r3, .L107+4
 1139 001a 1B68     		ldr	r3, [r3]
 1140 001c A342     		cmp	r3, r4
 1141 001e 1DD0     		beq	.L98
1354:../FreeRTOS/Source/tasks.c **** 			{
 1142              		.loc 1 1354 0 is_stmt 0 discriminator 1
 1143 0020 144B     		ldr	r3, .L107+8
 1144 0022 1B68     		ldr	r3, [r3]
 1145 0024 A342     		cmp	r3, r4
 1146 0026 1BD0     		beq	.L99
1362:../FreeRTOS/Source/tasks.c **** 				{
 1147              		.loc 1 1362 0 is_stmt 1
 1148 0028 134B     		ldr	r3, .L107+12
 1149 002a 9C42     		cmp	r4, r3
 1150 002c 0ED0     		beq	.L105
1379:../FreeRTOS/Source/tasks.c **** 				{
 1151              		.loc 1 1379 0
 1152 002e 134B     		ldr	r3, .L107+16
 1153 0030 9C42     		cmp	r4, r3
 1154 0032 19D0     		beq	.L101
1379:../FreeRTOS/Source/tasks.c **** 				{
 1155              		.loc 1 1379 0 is_stmt 0 discriminator 1
 1156 0034 74B1     		cbz	r4, .L106
1392:../FreeRTOS/Source/tasks.c **** 			}
 1157              		.loc 1 1392 0 is_stmt 1
 1158 0036 0120     		movs	r0, #1
 1159 0038 0FE0     		b	.L95
 1160              	.LVL108:
 1161              	.L104:
 1162              	.LBB115:
 1163              	.LBB116:
 1164              		.loc 2 195 0
 1165              		.syntax unified
 1166              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1167 003a 4FF05003 			mov r3, #80												
 1168 003e 83F31188 		msr basepri, r3											
 1169 0042 BFF36F8F 		isb														
 1170 0046 BFF34F8F 		dsb														
 1171              	
 1172              	@ 0 "" 2
 1173              	.LVL109:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 115


 1174              		.thumb
 1175              		.syntax unified
 1176              	.L94:
 1177 004a FEE7     		b	.L94
 1178              	.LVL110:
 1179              	.L105:
 1180              	.LBE116:
 1181              	.LBE115:
1367:../FreeRTOS/Source/tasks.c **** 					{
 1182              		.loc 1 1367 0
 1183 004c AB6A     		ldr	r3, [r5, #40]
 1184 004e 4BB9     		cbnz	r3, .L100
1369:../FreeRTOS/Source/tasks.c **** 					}
 1185              		.loc 1 1369 0
 1186 0050 0320     		movs	r0, #3
 1187 0052 02E0     		b	.L95
 1188              	.L106:
1384:../FreeRTOS/Source/tasks.c **** 				}
 1189              		.loc 1 1384 0
 1190 0054 0420     		movs	r0, #4
 1191 0056 00E0     		b	.L95
 1192              	.LVL111:
 1193              	.L97:
1344:../FreeRTOS/Source/tasks.c **** 		}
 1194              		.loc 1 1344 0
 1195 0058 0020     		movs	r0, #0
 1196              	.LVL112:
 1197              	.L95:
1397:../FreeRTOS/Source/tasks.c **** 
 1198              		.loc 1 1397 0
 1199 005a 38BD     		pop	{r3, r4, r5, pc}
 1200              	.LVL113:
 1201              	.L98:
1358:../FreeRTOS/Source/tasks.c **** 			}
 1202              		.loc 1 1358 0
 1203 005c 0220     		movs	r0, #2
 1204 005e FCE7     		b	.L95
 1205              	.L99:
 1206 0060 0220     		movs	r0, #2
 1207 0062 FAE7     		b	.L95
 1208              	.L100:
1373:../FreeRTOS/Source/tasks.c **** 					}
 1209              		.loc 1 1373 0
 1210 0064 0220     		movs	r0, #2
 1211 0066 F8E7     		b	.L95
 1212              	.L101:
1384:../FreeRTOS/Source/tasks.c **** 				}
 1213              		.loc 1 1384 0
 1214 0068 0420     		movs	r0, #4
 1215 006a F6E7     		b	.L95
 1216              	.L108:
 1217              		.align	2
 1218              	.L107:
 1219 006c 00000000 		.word	.LANCHOR10
 1220 0070 00000000 		.word	.LANCHOR2
 1221 0074 00000000 		.word	.LANCHOR8
 1222 0078 00000000 		.word	.LANCHOR0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 116


 1223 007c 00000000 		.word	.LANCHOR7
 1224              		.cfi_endproc
 1225              	.LFE11:
 1227              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1228              		.align	1
 1229              		.global	uxTaskPriorityGet
 1230              		.syntax unified
 1231              		.thumb
 1232              		.thumb_func
 1233              		.fpu fpv4-sp-d16
 1235              	uxTaskPriorityGet:
 1236              	.LFB12:
1405:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1237              		.loc 1 1405 0
 1238              		.cfi_startproc
 1239              		@ args = 0, pretend = 0, frame = 0
 1240              		@ frame_needed = 0, uses_anonymous_args = 0
 1241              	.LVL114:
 1242 0000 10B5     		push	{r4, lr}
 1243              	.LCFI14:
 1244              		.cfi_def_cfa_offset 8
 1245              		.cfi_offset 4, -8
 1246              		.cfi_offset 14, -4
 1247 0002 0446     		mov	r4, r0
1409:../FreeRTOS/Source/tasks.c **** 		{
 1248              		.loc 1 1409 0
 1249 0004 FFF7FEFF 		bl	vPortEnterCritical
 1250              	.LVL115:
1413:../FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1251              		.loc 1 1413 0
 1252 0008 24B1     		cbz	r4, .L112
 1253              	.LVL116:
 1254              	.L110:
1414:../FreeRTOS/Source/tasks.c **** 		}
 1255              		.loc 1 1414 0 discriminator 4
 1256 000a E46A     		ldr	r4, [r4, #44]
 1257              	.LVL117:
1416:../FreeRTOS/Source/tasks.c **** 
 1258              		.loc 1 1416 0 discriminator 4
 1259 000c FFF7FEFF 		bl	vPortExitCritical
 1260              	.LVL118:
1419:../FreeRTOS/Source/tasks.c **** 
 1261              		.loc 1 1419 0 discriminator 4
 1262 0010 2046     		mov	r0, r4
 1263 0012 10BD     		pop	{r4, pc}
 1264              	.LVL119:
 1265              	.L112:
1413:../FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1266              		.loc 1 1413 0 discriminator 1
 1267 0014 014B     		ldr	r3, .L113
 1268 0016 1C68     		ldr	r4, [r3]
 1269              	.LVL120:
 1270 0018 F7E7     		b	.L110
 1271              	.L114:
 1272 001a 00BF     		.align	2
 1273              	.L113:
 1274 001c 00000000 		.word	.LANCHOR10
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 117


 1275              		.cfi_endproc
 1276              	.LFE12:
 1278              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1279              		.align	1
 1280              		.global	uxTaskPriorityGetFromISR
 1281              		.syntax unified
 1282              		.thumb
 1283              		.thumb_func
 1284              		.fpu fpv4-sp-d16
 1286              	uxTaskPriorityGetFromISR:
 1287              	.LFB13:
1427:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1288              		.loc 1 1427 0
 1289              		.cfi_startproc
 1290              		@ args = 0, pretend = 0, frame = 0
 1291              		@ frame_needed = 0, uses_anonymous_args = 0
 1292              	.LVL121:
 1293 0000 10B5     		push	{r4, lr}
 1294              	.LCFI15:
 1295              		.cfi_def_cfa_offset 8
 1296              		.cfi_offset 4, -8
 1297              		.cfi_offset 14, -4
 1298 0002 0446     		mov	r4, r0
1447:../FreeRTOS/Source/tasks.c **** 
 1299              		.loc 1 1447 0
 1300 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1301              	.LVL122:
 1302              	.LBB117:
 1303              	.LBB118:
 196:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1304              		.loc 2 211 0
 1305              		.syntax unified
 1306              	@ 211 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1307 0008 EFF31183 			mrs r3, basepri											
 1308 000c 4FF05002 		mov r2, #80												
 1309 0010 82F31188 		msr basepri, r2											
 1310 0014 BFF36F8F 		isb														
 1311 0018 BFF34F8F 		dsb														
 1312              	
 1313              	@ 0 "" 2
 1314              		.thumb
 1315              		.syntax unified
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 118


 1316              	.LBE118:
 1317              	.LBE117:
1453:../FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1318              		.loc 1 1453 0
 1319 001c 1CB1     		cbz	r4, .L118
 1320              	.LVL123:
 1321              	.L116:
1454:../FreeRTOS/Source/tasks.c **** 		}
 1322              		.loc 1 1454 0 discriminator 4
 1323 001e E06A     		ldr	r0, [r4, #44]
 1324              	.LVL124:
 1325              	.LBB119:
 1326              	.LBB120:
 212:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1327              		.loc 2 229 0 discriminator 4
 1328              		.syntax unified
 1329              	@ 229 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1330 0020 83F31188 			msr basepri, r3	
 1331              	@ 0 "" 2
 1332              	.LVL125:
 1333              		.thumb
 1334              		.syntax unified
 1335              	.LBE120:
 1336              	.LBE119:
1459:../FreeRTOS/Source/tasks.c **** 
 1337              		.loc 1 1459 0 discriminator 4
 1338 0024 10BD     		pop	{r4, pc}
 1339              	.LVL126:
 1340              	.L118:
1453:../FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1341              		.loc 1 1453 0 discriminator 1
 1342 0026 014A     		ldr	r2, .L119
 1343 0028 1468     		ldr	r4, [r2]
 1344              	.LVL127:
 1345 002a F8E7     		b	.L116
 1346              	.L120:
 1347              		.align	2
 1348              	.L119:
 1349 002c 00000000 		.word	.LANCHOR10
 1350              		.cfi_endproc
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 119


 1351              	.LFE13:
 1353              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1354              		.align	1
 1355              		.global	vTaskPrioritySet
 1356              		.syntax unified
 1357              		.thumb
 1358              		.thumb_func
 1359              		.fpu fpv4-sp-d16
 1361              	vTaskPrioritySet:
 1362              	.LFB14:
1467:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1363              		.loc 1 1467 0
 1364              		.cfi_startproc
 1365              		@ args = 0, pretend = 0, frame = 0
 1366              		@ frame_needed = 0, uses_anonymous_args = 0
 1367              	.LVL128:
 1368 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1369              	.LCFI16:
 1370              		.cfi_def_cfa_offset 24
 1371              		.cfi_offset 3, -24
 1372              		.cfi_offset 4, -20
 1373              		.cfi_offset 5, -16
 1374              		.cfi_offset 6, -12
 1375              		.cfi_offset 7, -8
 1376              		.cfi_offset 14, -4
 1377              	.LVL129:
1472:../FreeRTOS/Source/tasks.c **** 
 1378              		.loc 1 1472 0
 1379 0002 0529     		cmp	r1, #5
 1380 0004 08D9     		bls	.L122
 1381              	.LBB121:
 1382              	.LBB122:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1383              		.loc 2 195 0
 1384              		.syntax unified
 1385              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1386 0006 4FF05003 			mov r3, #80												
 1387 000a 83F31188 		msr basepri, r3											
 1388 000e BFF36F8F 		isb														
 1389 0012 BFF34F8F 		dsb														
 1390              	
 1391              	@ 0 "" 2
 1392              	.LVL130:
 1393              		.thumb
 1394              		.syntax unified
 1395              	.L123:
 1396 0016 FEE7     		b	.L123
 1397              	.L122:
 1398 0018 0446     		mov	r4, r0
 1399 001a 0D46     		mov	r5, r1
 1400              	.LVL131:
 1401              	.LBE122:
 1402              	.LBE121:
1484:../FreeRTOS/Source/tasks.c **** 		{
 1403              		.loc 1 1484 0
 1404 001c FFF7FEFF 		bl	vPortEnterCritical
 1405              	.LVL132:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 120


1488:../FreeRTOS/Source/tasks.c **** 
 1406              		.loc 1 1488 0
 1407 0020 0CB9     		cbnz	r4, .L124
1488:../FreeRTOS/Source/tasks.c **** 
 1408              		.loc 1 1488 0 is_stmt 0 discriminator 1
 1409 0022 2A4B     		ldr	r3, .L136
 1410 0024 1C68     		ldr	r4, [r3]
 1411              	.LVL133:
 1412              	.L124:
1494:../FreeRTOS/Source/tasks.c **** 			}
 1413              		.loc 1 1494 0 is_stmt 1 discriminator 4
 1414 0026 A36C     		ldr	r3, [r4, #72]
 1415              	.LVL134:
1502:../FreeRTOS/Source/tasks.c **** 			{
 1416              		.loc 1 1502 0 discriminator 4
 1417 0028 9D42     		cmp	r5, r3
 1418 002a 40D0     		beq	.L125
1506:../FreeRTOS/Source/tasks.c **** 				{
 1419              		.loc 1 1506 0
 1420 002c 42D9     		bls	.L126
1508:../FreeRTOS/Source/tasks.c **** 					{
 1421              		.loc 1 1508 0
 1422 002e 274A     		ldr	r2, .L136
 1423 0030 1268     		ldr	r2, [r2]
 1424 0032 A242     		cmp	r2, r4
 1425 0034 44D0     		beq	.L132
1513:../FreeRTOS/Source/tasks.c **** 						{
 1426              		.loc 1 1513 0
 1427 0036 254A     		ldr	r2, .L136
 1428 0038 1268     		ldr	r2, [r2]
 1429 003a D26A     		ldr	r2, [r2, #44]
 1430 003c AA42     		cmp	r2, r5
 1431 003e 41D9     		bls	.L133
1470:../FreeRTOS/Source/tasks.c **** 
 1432              		.loc 1 1470 0
 1433 0040 0026     		movs	r6, #0
 1434              	.L127:
 1435              	.LVL135:
1546:../FreeRTOS/Source/tasks.c **** 
 1436              		.loc 1 1546 0
 1437 0042 E76A     		ldr	r7, [r4, #44]
 1438              	.LVL136:
1552:../FreeRTOS/Source/tasks.c **** 					{
 1439              		.loc 1 1552 0
 1440 0044 BB42     		cmp	r3, r7
 1441 0046 00D1     		bne	.L128
1554:../FreeRTOS/Source/tasks.c **** 					}
 1442              		.loc 1 1554 0
 1443 0048 E562     		str	r5, [r4, #44]
 1444              	.L128:
1562:../FreeRTOS/Source/tasks.c **** 				}
 1445              		.loc 1 1562 0
 1446 004a A564     		str	r5, [r4, #72]
1572:../FreeRTOS/Source/tasks.c **** 				{
 1447              		.loc 1 1572 0
 1448 004c A369     		ldr	r3, [r4, #24]
 1449              	.LVL137:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 121


 1450 004e 002B     		cmp	r3, #0
 1451 0050 02DB     		blt	.L129
1574:../FreeRTOS/Source/tasks.c **** 				}
 1452              		.loc 1 1574 0
 1453 0052 C5F10605 		rsb	r5, r5, #6
 1454              	.LVL138:
 1455 0056 A561     		str	r5, [r4, #24]
 1456              	.L129:
1585:../FreeRTOS/Source/tasks.c **** 				{
 1457              		.loc 1 1585 0
 1458 0058 6269     		ldr	r2, [r4, #20]
 1459 005a 1D49     		ldr	r1, .L136+4
 1460 005c 1423     		movs	r3, #20
 1461 005e 03FB0713 		mla	r3, r3, r7, r1
 1462 0062 9A42     		cmp	r2, r3
 1463 0064 1AD1     		bne	.L130
1590:../FreeRTOS/Source/tasks.c **** 					{
 1464              		.loc 1 1590 0
 1465 0066 251D     		adds	r5, r4, #4
 1466 0068 2846     		mov	r0, r5
 1467 006a FFF7FEFF 		bl	uxListRemove
 1468              	.LVL139:
 1469 006e 38B9     		cbnz	r0, .L131
1595:../FreeRTOS/Source/tasks.c **** 					}
 1470              		.loc 1 1595 0
 1471 0070 0123     		movs	r3, #1
 1472 0072 03FA07F2 		lsl	r2, r3, r7
 1473 0076 1749     		ldr	r1, .L136+8
 1474 0078 0B68     		ldr	r3, [r1]
 1475 007a 23EA0203 		bic	r3, r3, r2
 1476 007e 0B60     		str	r3, [r1]
 1477              	.L131:
1601:../FreeRTOS/Source/tasks.c **** 				}
 1478              		.loc 1 1601 0
 1479 0080 E26A     		ldr	r2, [r4, #44]
 1480 0082 0123     		movs	r3, #1
 1481 0084 9340     		lsls	r3, r3, r2
 1482 0086 1349     		ldr	r1, .L136+8
 1483 0088 0868     		ldr	r0, [r1]
 1484 008a 0343     		orrs	r3, r3, r0
 1485 008c 0B60     		str	r3, [r1]
 1486 008e 2946     		mov	r1, r5
 1487 0090 0F4B     		ldr	r3, .L136+4
 1488 0092 1420     		movs	r0, #20
 1489 0094 00FB0230 		mla	r0, r0, r2, r3
 1490 0098 FFF7FEFF 		bl	vListInsertEnd
 1491              	.LVL140:
 1492              	.L130:
1608:../FreeRTOS/Source/tasks.c **** 				{
 1493              		.loc 1 1608 0
 1494 009c 3EB1     		cbz	r6, .L125
1610:../FreeRTOS/Source/tasks.c **** 				}
 1495              		.loc 1 1610 0
 1496 009e 0E4B     		ldr	r3, .L136+12
 1497 00a0 4FF08052 		mov	r2, #268435456
 1498 00a4 1A60     		str	r2, [r3]
 1499              		.syntax unified
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 122


 1500              	@ 1610 "../FreeRTOS/Source/tasks.c" 1
 1501 00a6 BFF34F8F 		dsb
 1502              	@ 0 "" 2
 1503              	@ 1610 "../FreeRTOS/Source/tasks.c" 1
 1504 00aa BFF36F8F 		isb
 1505              	@ 0 "" 2
 1506              	.LVL141:
 1507              		.thumb
 1508              		.syntax unified
 1509              	.L125:
1622:../FreeRTOS/Source/tasks.c **** 	}
 1510              		.loc 1 1622 0
 1511 00ae FFF7FEFF 		bl	vPortExitCritical
 1512              	.LVL142:
1623:../FreeRTOS/Source/tasks.c **** 
 1513              		.loc 1 1623 0
 1514 00b2 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1515              	.LVL143:
 1516              	.L126:
1529:../FreeRTOS/Source/tasks.c **** 				{
 1517              		.loc 1 1529 0
 1518 00b4 054A     		ldr	r2, .L136
 1519 00b6 1268     		ldr	r2, [r2]
 1520 00b8 A242     		cmp	r2, r4
 1521 00ba 05D0     		beq	.L134
1470:../FreeRTOS/Source/tasks.c **** 
 1522              		.loc 1 1470 0
 1523 00bc 0026     		movs	r6, #0
 1524 00be C0E7     		b	.L127
 1525              	.L132:
 1526 00c0 0026     		movs	r6, #0
 1527 00c2 BEE7     		b	.L127
 1528              	.L133:
1515:../FreeRTOS/Source/tasks.c **** 						}
 1529              		.loc 1 1515 0
 1530 00c4 0126     		movs	r6, #1
 1531 00c6 BCE7     		b	.L127
 1532              	.L134:
1534:../FreeRTOS/Source/tasks.c **** 				}
 1533              		.loc 1 1534 0
 1534 00c8 0126     		movs	r6, #1
 1535 00ca BAE7     		b	.L127
 1536              	.L137:
 1537              		.align	2
 1538              	.L136:
 1539 00cc 00000000 		.word	.LANCHOR10
 1540 00d0 00000000 		.word	.LANCHOR4
 1541 00d4 00000000 		.word	.LANCHOR13
 1542 00d8 04ED00E0 		.word	-536810236
 1543              		.cfi_endproc
 1544              	.LFE14:
 1546              		.section	.text.vTaskResume,"ax",%progbits
 1547              		.align	1
 1548              		.global	vTaskResume
 1549              		.syntax unified
 1550              		.thumb
 1551              		.thumb_func
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 123


 1552              		.fpu fpv4-sp-d16
 1554              	vTaskResume:
 1555              	.LFB17:
1778:../FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1556              		.loc 1 1778 0
 1557              		.cfi_startproc
 1558              		@ args = 0, pretend = 0, frame = 0
 1559              		@ frame_needed = 0, uses_anonymous_args = 0
 1560              	.LVL144:
 1561 0000 38B5     		push	{r3, r4, r5, lr}
 1562              	.LCFI17:
 1563              		.cfi_def_cfa_offset 16
 1564              		.cfi_offset 3, -16
 1565              		.cfi_offset 4, -12
 1566              		.cfi_offset 5, -8
 1567              		.cfi_offset 14, -4
 1568              	.LVL145:
1782:../FreeRTOS/Source/tasks.c **** 
 1569              		.loc 1 1782 0
 1570 0002 68B1     		cbz	r0, .L144
 1571 0004 0446     		mov	r4, r0
1786:../FreeRTOS/Source/tasks.c **** 		{
 1572              		.loc 1 1786 0 discriminator 1
 1573 0006 1B4B     		ldr	r3, .L146
 1574 0008 1B68     		ldr	r3, [r3]
 1575 000a 8342     		cmp	r3, r0
 1576 000c 07D0     		beq	.L138
1788:../FreeRTOS/Source/tasks.c **** 			{
 1577              		.loc 1 1788 0
 1578 000e FFF7FEFF 		bl	vPortEnterCritical
 1579              	.LVL146:
1790:../FreeRTOS/Source/tasks.c **** 				{
 1580              		.loc 1 1790 0
 1581 0012 2046     		mov	r0, r4
 1582 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1583              	.LVL147:
 1584 0018 58B9     		cbnz	r0, .L145
 1585              	.L142:
1817:../FreeRTOS/Source/tasks.c **** 		}
 1586              		.loc 1 1817 0
 1587 001a FFF7FEFF 		bl	vPortExitCritical
 1588              	.LVL148:
 1589              	.L138:
1823:../FreeRTOS/Source/tasks.c **** 
 1590              		.loc 1 1823 0
 1591 001e 38BD     		pop	{r3, r4, r5, pc}
 1592              	.LVL149:
 1593              	.L144:
 1594              	.LBB123:
 1595              	.LBB124:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1596              		.loc 2 195 0
 1597              		.syntax unified
 1598              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1599 0020 4FF05003 			mov r3, #80												
 1600 0024 83F31188 		msr basepri, r3											
 1601 0028 BFF36F8F 		isb														
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 124


 1602 002c BFF34F8F 		dsb														
 1603              	
 1604              	@ 0 "" 2
 1605              	.LVL150:
 1606              		.thumb
 1607              		.syntax unified
 1608              	.L140:
 1609 0030 FEE7     		b	.L140
 1610              	.LVL151:
 1611              	.L145:
 1612              	.LBE124:
 1613              	.LBE123:
1796:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1614              		.loc 1 1796 0
 1615 0032 251D     		adds	r5, r4, #4
 1616 0034 2846     		mov	r0, r5
 1617 0036 FFF7FEFF 		bl	uxListRemove
 1618              	.LVL152:
1797:../FreeRTOS/Source/tasks.c **** 
 1619              		.loc 1 1797 0
 1620 003a E26A     		ldr	r2, [r4, #44]
 1621 003c 0123     		movs	r3, #1
 1622 003e 9340     		lsls	r3, r3, r2
 1623 0040 0D49     		ldr	r1, .L146+4
 1624 0042 0868     		ldr	r0, [r1]
 1625 0044 0343     		orrs	r3, r3, r0
 1626 0046 0B60     		str	r3, [r1]
 1627 0048 2946     		mov	r1, r5
 1628 004a 0C4B     		ldr	r3, .L146+8
 1629 004c 1420     		movs	r0, #20
 1630 004e 00FB0230 		mla	r0, r0, r2, r3
 1631 0052 FFF7FEFF 		bl	vListInsertEnd
 1632              	.LVL153:
1800:../FreeRTOS/Source/tasks.c **** 					{
 1633              		.loc 1 1800 0
 1634 0056 E26A     		ldr	r2, [r4, #44]
 1635 0058 064B     		ldr	r3, .L146
 1636 005a 1B68     		ldr	r3, [r3]
 1637 005c DB6A     		ldr	r3, [r3, #44]
 1638 005e 9A42     		cmp	r2, r3
 1639 0060 DBD3     		bcc	.L142
1805:../FreeRTOS/Source/tasks.c **** 					}
 1640              		.loc 1 1805 0
 1641 0062 074B     		ldr	r3, .L146+12
 1642 0064 4FF08052 		mov	r2, #268435456
 1643 0068 1A60     		str	r2, [r3]
 1644              		.syntax unified
 1645              	@ 1805 "../FreeRTOS/Source/tasks.c" 1
 1646 006a BFF34F8F 		dsb
 1647              	@ 0 "" 2
 1648              	@ 1805 "../FreeRTOS/Source/tasks.c" 1
 1649 006e BFF36F8F 		isb
 1650              	@ 0 "" 2
 1651              		.thumb
 1652              		.syntax unified
 1653 0072 D2E7     		b	.L142
 1654              	.L147:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 125


 1655              		.align	2
 1656              	.L146:
 1657 0074 00000000 		.word	.LANCHOR10
 1658 0078 00000000 		.word	.LANCHOR13
 1659 007c 00000000 		.word	.LANCHOR4
 1660 0080 04ED00E0 		.word	-536810236
 1661              		.cfi_endproc
 1662              	.LFE17:
 1664              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1665              		.align	1
 1666              		.global	xTaskResumeFromISR
 1667              		.syntax unified
 1668              		.thumb
 1669              		.thumb_func
 1670              		.fpu fpv4-sp-d16
 1672              	xTaskResumeFromISR:
 1673              	.LFB18:
1832:../FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1674              		.loc 1 1832 0
 1675              		.cfi_startproc
 1676              		@ args = 0, pretend = 0, frame = 0
 1677              		@ frame_needed = 0, uses_anonymous_args = 0
 1678              	.LVL154:
 1679 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1680              	.LCFI18:
 1681              		.cfi_def_cfa_offset 24
 1682              		.cfi_offset 3, -24
 1683              		.cfi_offset 4, -20
 1684              		.cfi_offset 5, -16
 1685              		.cfi_offset 6, -12
 1686              		.cfi_offset 7, -8
 1687              		.cfi_offset 14, -4
 1688              	.LVL155:
1837:../FreeRTOS/Source/tasks.c **** 
 1689              		.loc 1 1837 0
 1690 0002 40B9     		cbnz	r0, .L149
 1691              	.LBB125:
 1692              	.LBB126:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1693              		.loc 2 195 0
 1694              		.syntax unified
 1695              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1696 0004 4FF05003 			mov r3, #80												
 1697 0008 83F31188 		msr basepri, r3											
 1698 000c BFF36F8F 		isb														
 1699 0010 BFF34F8F 		dsb														
 1700              	
 1701              	@ 0 "" 2
 1702              	.LVL156:
 1703              		.thumb
 1704              		.syntax unified
 1705              	.L150:
 1706 0014 FEE7     		b	.L150
 1707              	.L149:
 1708 0016 0446     		mov	r4, r0
 1709              	.LBE126:
 1710              	.LBE125:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 126


1855:../FreeRTOS/Source/tasks.c **** 
 1711              		.loc 1 1855 0
 1712 0018 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1713              	.LVL157:
 1714              	.LBB127:
 1715              	.LBB128:
 211:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1716              		.loc 2 211 0
 1717              		.syntax unified
 1718              	@ 211 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1719 001c EFF31187 			mrs r7, basepri											
 1720 0020 4FF05003 		mov r3, #80												
 1721 0024 83F31188 		msr basepri, r3											
 1722 0028 BFF36F8F 		isb														
 1723 002c BFF34F8F 		dsb														
 1724              	
 1725              	@ 0 "" 2
 1726              		.thumb
 1727              		.syntax unified
 1728              	.LBE128:
 1729              	.LBE127:
1859:../FreeRTOS/Source/tasks.c **** 			{
 1730              		.loc 1 1859 0
 1731 0030 2046     		mov	r0, r4
 1732 0032 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1733              	.LVL158:
 1734 0036 40B3     		cbz	r0, .L154
1864:../FreeRTOS/Source/tasks.c **** 				{
 1735              		.loc 1 1864 0
 1736 0038 154B     		ldr	r3, .L157
 1737 003a 1B68     		ldr	r3, [r3]
 1738 003c F3B9     		cbnz	r3, .L152
1868:../FreeRTOS/Source/tasks.c **** 					{
 1739              		.loc 1 1868 0
 1740 003e E26A     		ldr	r2, [r4, #44]
 1741 0040 144B     		ldr	r3, .L157+4
 1742 0042 1B68     		ldr	r3, [r3]
 1743 0044 DB6A     		ldr	r3, [r3, #44]
 1744 0046 9A42     		cmp	r2, r3
 1745 0048 16D2     		bcs	.L155
1833:../FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1746              		.loc 1 1833 0
 1747 004a 0025     		movs	r5, #0
 1748              	.L153:
 1749              	.LVL159:
1877:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1750              		.loc 1 1877 0
 1751 004c 261D     		adds	r6, r4, #4
 1752 004e 3046     		mov	r0, r6
 1753 0050 FFF7FEFF 		bl	uxListRemove
 1754              	.LVL160:
1878:../FreeRTOS/Source/tasks.c **** 				}
 1755              		.loc 1 1878 0
 1756 0054 E26A     		ldr	r2, [r4, #44]
 1757 0056 0123     		movs	r3, #1
 1758 0058 9340     		lsls	r3, r3, r2
 1759 005a 0F49     		ldr	r1, .L157+8
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 127


 1760 005c 0868     		ldr	r0, [r1]
 1761 005e 0343     		orrs	r3, r3, r0
 1762 0060 0B60     		str	r3, [r1]
 1763 0062 3146     		mov	r1, r6
 1764 0064 0D4B     		ldr	r3, .L157+12
 1765 0066 1420     		movs	r0, #20
 1766 0068 00FB0230 		mla	r0, r0, r2, r3
 1767 006c FFF7FEFF 		bl	vListInsertEnd
 1768              	.LVL161:
 1769              	.L151:
 1770              	.LBB129:
 1771              	.LBB130:
 1772              		.loc 2 229 0
 1773              		.syntax unified
 1774              	@ 229 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1775 0070 87F31188 			msr basepri, r7	
 1776              	@ 0 "" 2
 1777              	.LVL162:
 1778              		.thumb
 1779              		.syntax unified
 1780              	.LBE130:
 1781              	.LBE129:
1896:../FreeRTOS/Source/tasks.c **** 
 1782              		.loc 1 1896 0
 1783 0074 2846     		mov	r0, r5
 1784 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1785              	.LVL163:
 1786              	.L155:
1870:../FreeRTOS/Source/tasks.c **** 					}
 1787              		.loc 1 1870 0
 1788 0078 0125     		movs	r5, #1
 1789 007a E7E7     		b	.L153
 1790              	.L152:
1885:../FreeRTOS/Source/tasks.c **** 				}
 1791              		.loc 1 1885 0
 1792 007c 04F11801 		add	r1, r4, #24
 1793 0080 0748     		ldr	r0, .L157+16
 1794 0082 FFF7FEFF 		bl	vListInsertEnd
 1795              	.LVL164:
1833:../FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1796              		.loc 1 1833 0
 1797 0086 0025     		movs	r5, #0
 1798 0088 F2E7     		b	.L151
 1799              	.L154:
 1800 008a 0025     		movs	r5, #0
 1801 008c F0E7     		b	.L151
 1802              	.L158:
 1803 008e 00BF     		.align	2
 1804              	.L157:
 1805 0090 00000000 		.word	.LANCHOR16
 1806 0094 00000000 		.word	.LANCHOR10
 1807 0098 00000000 		.word	.LANCHOR13
 1808 009c 00000000 		.word	.LANCHOR4
 1809 00a0 00000000 		.word	.LANCHOR1
 1810              		.cfi_endproc
 1811              	.LFE18:
 1813              		.section	.text.vTaskStartScheduler,"ax",%progbits
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 128


 1814              		.align	1
 1815              		.global	vTaskStartScheduler
 1816              		.syntax unified
 1817              		.thumb
 1818              		.thumb_func
 1819              		.fpu fpv4-sp-d16
 1821              	vTaskStartScheduler:
 1822              	.LFB19:
1902:../FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1823              		.loc 1 1902 0
 1824              		.cfi_startproc
 1825              		@ args = 0, pretend = 0, frame = 0
 1826              		@ frame_needed = 0, uses_anonymous_args = 0
 1827 0000 00B5     		push	{lr}
 1828              	.LCFI19:
 1829              		.cfi_def_cfa_offset 4
 1830              		.cfi_offset 14, -4
 1831 0002 83B0     		sub	sp, sp, #12
 1832              	.LCFI20:
 1833              		.cfi_def_cfa_offset 16
1935:../FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
 1834              		.loc 1 1935 0
 1835 0004 194B     		ldr	r3, .L168
 1836 0006 0193     		str	r3, [sp, #4]
 1837 0008 0023     		movs	r3, #0
 1838 000a 0093     		str	r3, [sp]
 1839 000c 8222     		movs	r2, #130
 1840 000e 1849     		ldr	r1, .L168+4
 1841 0010 1848     		ldr	r0, .L168+8
 1842 0012 FFF7FEFF 		bl	xTaskCreate
 1843              	.LVL165:
1946:../FreeRTOS/Source/tasks.c **** 		{
 1844              		.loc 1 1946 0
 1845 0016 0128     		cmp	r0, #1
 1846 0018 07D0     		beq	.L165
 1847              	.L160:
1957:../FreeRTOS/Source/tasks.c **** 	{
 1848              		.loc 1 1957 0
 1849 001a 0128     		cmp	r0, #1
 1850 001c 08D0     		beq	.L166
2012:../FreeRTOS/Source/tasks.c **** 	}
 1851              		.loc 1 2012 0
 1852 001e B0F1FF3F 		cmp	r0, #-1
 1853 0022 1AD0     		beq	.L167
 1854              	.LVL166:
 1855              	.L159:
2018:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 1856              		.loc 1 2018 0
 1857 0024 03B0     		add	sp, sp, #12
 1858              	.LCFI21:
 1859              		.cfi_remember_state
 1860              		.cfi_def_cfa_offset 4
 1861              		@ sp needed
 1862 0026 5DF804FB 		ldr	pc, [sp], #4
 1863              	.LVL167:
 1864              	.L165:
 1865              	.LCFI22:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 129


 1866              		.cfi_restore_state
1948:../FreeRTOS/Source/tasks.c **** 		}
 1867              		.loc 1 1948 0
 1868 002a FFF7FEFF 		bl	xTimerCreateTimerTask
 1869              	.LVL168:
 1870 002e F4E7     		b	.L160
 1871              	.L166:
 1872              	.LBB131:
 1873              	.LBB132:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1874              		.loc 2 195 0
 1875              		.syntax unified
 1876              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1877 0030 4FF05003 			mov r3, #80												
 1878 0034 83F31188 		msr basepri, r3											
 1879 0038 BFF36F8F 		isb														
 1880 003c BFF34F8F 		dsb														
 1881              	
 1882              	@ 0 "" 2
 1883              		.thumb
 1884              		.syntax unified
 1885              	.LBE132:
 1886              	.LBE131:
1983:../FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 1887              		.loc 1 1983 0
 1888 0040 0D4B     		ldr	r3, .L168+12
 1889 0042 4FF0FF32 		mov	r2, #-1
 1890 0046 1A60     		str	r2, [r3]
1984:../FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 1891              		.loc 1 1984 0
 1892 0048 0C4B     		ldr	r3, .L168+16
 1893 004a 0122     		movs	r2, #1
 1894 004c 1A60     		str	r2, [r3]
1985:../FreeRTOS/Source/tasks.c **** 
 1895              		.loc 1 1985 0
 1896 004e 0C4B     		ldr	r3, .L168+20
 1897 0050 0022     		movs	r2, #0
 1898 0052 1A60     		str	r2, [r3]
1997:../FreeRTOS/Source/tasks.c **** 		{
 1899              		.loc 1 1997 0
 1900 0054 FFF7FEFF 		bl	xPortStartScheduler
 1901              	.LVL169:
 1902 0058 E4E7     		b	.L159
 1903              	.LVL170:
 1904              	.L167:
 1905              	.LBB133:
 1906              	.LBB134:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1907              		.loc 2 195 0
 1908              		.syntax unified
 1909              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1910 005a 4FF05003 			mov r3, #80												
 1911 005e 83F31188 		msr basepri, r3											
 1912 0062 BFF36F8F 		isb														
 1913 0066 BFF34F8F 		dsb														
 1914              	
 1915              	@ 0 "" 2
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 130


 1916              	.LVL171:
 1917              		.thumb
 1918              		.syntax unified
 1919              	.L163:
 1920 006a FEE7     		b	.L163
 1921              	.L169:
 1922              		.align	2
 1923              	.L168:
 1924 006c 00000000 		.word	.LANCHOR17
 1925 0070 00000000 		.word	.LC0
 1926 0074 00000000 		.word	prvIdleTask
 1927 0078 00000000 		.word	.LANCHOR3
 1928 007c 00000000 		.word	.LANCHOR11
 1929 0080 00000000 		.word	.LANCHOR15
 1930              	.LBE134:
 1931              	.LBE133:
 1932              		.cfi_endproc
 1933              	.LFE19:
 1935              		.section	.text.vTaskEndScheduler,"ax",%progbits
 1936              		.align	1
 1937              		.global	vTaskEndScheduler
 1938              		.syntax unified
 1939              		.thumb
 1940              		.thumb_func
 1941              		.fpu fpv4-sp-d16
 1943              	vTaskEndScheduler:
 1944              	.LFB20:
2022:../FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 1945              		.loc 1 2022 0
 1946              		.cfi_startproc
 1947              		@ args = 0, pretend = 0, frame = 0
 1948              		@ frame_needed = 0, uses_anonymous_args = 0
 1949 0000 08B5     		push	{r3, lr}
 1950              	.LCFI23:
 1951              		.cfi_def_cfa_offset 8
 1952              		.cfi_offset 3, -8
 1953              		.cfi_offset 14, -4
 1954              	.LBB135:
 1955              	.LBB136:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1956              		.loc 2 195 0
 1957              		.syntax unified
 1958              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1959 0002 4FF05003 			mov r3, #80												
 1960 0006 83F31188 		msr basepri, r3											
 1961 000a BFF36F8F 		isb														
 1962 000e BFF34F8F 		dsb														
 1963              	
 1964              	@ 0 "" 2
 1965              		.thumb
 1966              		.syntax unified
 1967              	.LBE136:
 1968              	.LBE135:
2027:../FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 1969              		.loc 1 2027 0
 1970 0012 034B     		ldr	r3, .L172
 1971 0014 0022     		movs	r2, #0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 131


 1972 0016 1A60     		str	r2, [r3]
2028:../FreeRTOS/Source/tasks.c **** }
 1973              		.loc 1 2028 0
 1974 0018 FFF7FEFF 		bl	vPortEndScheduler
 1975              	.LVL172:
2029:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 1976              		.loc 1 2029 0
 1977 001c 08BD     		pop	{r3, pc}
 1978              	.L173:
 1979 001e 00BF     		.align	2
 1980              	.L172:
 1981 0020 00000000 		.word	.LANCHOR11
 1982              		.cfi_endproc
 1983              	.LFE20:
 1985              		.section	.text.vTaskSuspendAll,"ax",%progbits
 1986              		.align	1
 1987              		.global	vTaskSuspendAll
 1988              		.syntax unified
 1989              		.thumb
 1990              		.thumb_func
 1991              		.fpu fpv4-sp-d16
 1993              	vTaskSuspendAll:
 1994              	.LFB21:
2033:../FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 1995              		.loc 1 2033 0
 1996              		.cfi_startproc
 1997              		@ args = 0, pretend = 0, frame = 0
 1998              		@ frame_needed = 0, uses_anonymous_args = 0
 1999              		@ link register save eliminated.
2038:../FreeRTOS/Source/tasks.c **** }
 2000              		.loc 1 2038 0
 2001 0000 024A     		ldr	r2, .L175
 2002 0002 1368     		ldr	r3, [r2]
 2003 0004 0133     		adds	r3, r3, #1
 2004 0006 1360     		str	r3, [r2]
2039:../FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
 2005              		.loc 1 2039 0
 2006 0008 7047     		bx	lr
 2007              	.L176:
 2008 000a 00BF     		.align	2
 2009              	.L175:
 2010 000c 00000000 		.word	.LANCHOR16
 2011              		.cfi_endproc
 2012              	.LFE21:
 2014              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2015              		.align	1
 2016              		.global	xTaskGetTickCount
 2017              		.syntax unified
 2018              		.thumb
 2019              		.thumb_func
 2020              		.fpu fpv4-sp-d16
 2022              	xTaskGetTickCount:
 2023              	.LFB23:
2216:../FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 2024              		.loc 1 2216 0
 2025              		.cfi_startproc
 2026              		@ args = 0, pretend = 0, frame = 0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 132


 2027              		@ frame_needed = 0, uses_anonymous_args = 0
 2028              		@ link register save eliminated.
2222:../FreeRTOS/Source/tasks.c **** 	}
 2029              		.loc 1 2222 0
 2030 0000 014B     		ldr	r3, .L178
 2031 0002 1868     		ldr	r0, [r3]
 2032              	.LVL173:
2227:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2033              		.loc 1 2227 0
 2034 0004 7047     		bx	lr
 2035              	.L179:
 2036 0006 00BF     		.align	2
 2037              	.L178:
 2038 0008 00000000 		.word	.LANCHOR15
 2039              		.cfi_endproc
 2040              	.LFE23:
 2042              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2043              		.align	1
 2044              		.global	xTaskGetTickCountFromISR
 2045              		.syntax unified
 2046              		.thumb
 2047              		.thumb_func
 2048              		.fpu fpv4-sp-d16
 2050              	xTaskGetTickCountFromISR:
 2051              	.LFB24:
2231:../FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 2052              		.loc 1 2231 0
 2053              		.cfi_startproc
 2054              		@ args = 0, pretend = 0, frame = 0
 2055              		@ frame_needed = 0, uses_anonymous_args = 0
 2056 0000 08B5     		push	{r3, lr}
 2057              	.LCFI24:
 2058              		.cfi_def_cfa_offset 8
 2059              		.cfi_offset 3, -8
 2060              		.cfi_offset 14, -4
2249:../FreeRTOS/Source/tasks.c **** 
 2061              		.loc 1 2249 0
 2062 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2063              	.LVL174:
2253:../FreeRTOS/Source/tasks.c **** 	}
 2064              		.loc 1 2253 0
 2065 0006 014B     		ldr	r3, .L182
 2066 0008 1868     		ldr	r0, [r3]
 2067              	.LVL175:
2258:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2068              		.loc 1 2258 0
 2069 000a 08BD     		pop	{r3, pc}
 2070              	.L183:
 2071              		.align	2
 2072              	.L182:
 2073 000c 00000000 		.word	.LANCHOR15
 2074              		.cfi_endproc
 2075              	.LFE24:
 2077              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2078              		.align	1
 2079              		.global	uxTaskGetNumberOfTasks
 2080              		.syntax unified
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 133


 2081              		.thumb
 2082              		.thumb_func
 2083              		.fpu fpv4-sp-d16
 2085              	uxTaskGetNumberOfTasks:
 2086              	.LFB25:
2262:../FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2087              		.loc 1 2262 0
 2088              		.cfi_startproc
 2089              		@ args = 0, pretend = 0, frame = 0
 2090              		@ frame_needed = 0, uses_anonymous_args = 0
 2091              		@ link register save eliminated.
2265:../FreeRTOS/Source/tasks.c **** }
 2092              		.loc 1 2265 0
 2093 0000 014B     		ldr	r3, .L185
 2094 0002 1868     		ldr	r0, [r3]
2266:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2095              		.loc 1 2266 0
 2096 0004 7047     		bx	lr
 2097              	.L186:
 2098 0006 00BF     		.align	2
 2099              	.L185:
 2100 0008 00000000 		.word	.LANCHOR9
 2101              		.cfi_endproc
 2102              	.LFE25:
 2104              		.section	.text.pcTaskGetName,"ax",%progbits
 2105              		.align	1
 2106              		.global	pcTaskGetName
 2107              		.syntax unified
 2108              		.thumb
 2109              		.thumb_func
 2110              		.fpu fpv4-sp-d16
 2112              	pcTaskGetName:
 2113              	.LFB26:
2270:../FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2114              		.loc 1 2270 0
 2115              		.cfi_startproc
 2116              		@ args = 0, pretend = 0, frame = 0
 2117              		@ frame_needed = 0, uses_anonymous_args = 0
 2118              		@ link register save eliminated.
 2119              	.LVL176:
2275:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2120              		.loc 1 2275 0
 2121 0000 0346     		mov	r3, r0
 2122 0002 18B1     		cbz	r0, .L191
 2123              	.LVL177:
 2124              	.L188:
2276:../FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2125              		.loc 1 2276 0 discriminator 4
 2126 0004 2BB1     		cbz	r3, .L192
2278:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2127              		.loc 1 2278 0
 2128 0006 03F13400 		add	r0, r3, #52
 2129 000a 7047     		bx	lr
 2130              	.LVL178:
 2131              	.L191:
2275:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2132              		.loc 1 2275 0 discriminator 1
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 134


 2133 000c 054B     		ldr	r3, .L193
 2134 000e 1B68     		ldr	r3, [r3]
 2135              	.LVL179:
 2136 0010 F8E7     		b	.L188
 2137              	.LVL180:
 2138              	.L192:
 2139              	.LBB137:
 2140              	.LBB138:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2141              		.loc 2 195 0
 2142              		.syntax unified
 2143              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2144 0012 4FF05003 			mov r3, #80												
 2145 0016 83F31188 		msr basepri, r3											
 2146 001a BFF36F8F 		isb														
 2147 001e BFF34F8F 		dsb														
 2148              	
 2149              	@ 0 "" 2
 2150              	.LVL181:
 2151              		.thumb
 2152              		.syntax unified
 2153              	.L190:
 2154 0022 FEE7     		b	.L190
 2155              	.L194:
 2156              		.align	2
 2157              	.L193:
 2158 0024 00000000 		.word	.LANCHOR10
 2159              	.LBE138:
 2160              	.LBE137:
 2161              		.cfi_endproc
 2162              	.LFE26:
 2164              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2165              		.align	1
 2166              		.global	xTaskIncrementTick
 2167              		.syntax unified
 2168              		.thumb
 2169              		.thumb_func
 2170              		.fpu fpv4-sp-d16
 2172              	xTaskIncrementTick:
 2173              	.LFB28:
2590:../FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2174              		.loc 1 2590 0
 2175              		.cfi_startproc
 2176              		@ args = 0, pretend = 0, frame = 0
 2177              		@ frame_needed = 0, uses_anonymous_args = 0
 2178 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2179              	.LCFI25:
 2180              		.cfi_def_cfa_offset 24
 2181              		.cfi_offset 3, -24
 2182              		.cfi_offset 4, -20
 2183              		.cfi_offset 5, -16
 2184              		.cfi_offset 6, -12
 2185              		.cfi_offset 7, -8
 2186              		.cfi_offset 14, -4
 2187              	.LVL182:
2599:../FreeRTOS/Source/tasks.c **** 	{
 2188              		.loc 1 2599 0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 135


 2189 0002 3A4B     		ldr	r3, .L216
 2190 0004 1B68     		ldr	r3, [r3]
 2191 0006 002B     		cmp	r3, #0
 2192 0008 64D1     		bne	.L196
 2193              	.LBB139:
2603:../FreeRTOS/Source/tasks.c **** 
 2194              		.loc 1 2603 0
 2195 000a 394B     		ldr	r3, .L216+4
 2196 000c 1D68     		ldr	r5, [r3]
 2197 000e 0135     		adds	r5, r5, #1
 2198              	.LVL183:
2607:../FreeRTOS/Source/tasks.c **** 
 2199              		.loc 1 2607 0
 2200 0010 1D60     		str	r5, [r3]
2609:../FreeRTOS/Source/tasks.c **** 		{
 2201              		.loc 1 2609 0
 2202 0012 C5B9     		cbnz	r5, .L197
 2203              	.LBB140:
2611:../FreeRTOS/Source/tasks.c **** 		}
 2204              		.loc 1 2611 0
 2205 0014 374B     		ldr	r3, .L216+8
 2206 0016 1B68     		ldr	r3, [r3]
 2207 0018 1B68     		ldr	r3, [r3]
 2208 001a 43B1     		cbz	r3, .L198
 2209              	.LBB141:
 2210              	.LBB142:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2211              		.loc 2 195 0
 2212              		.syntax unified
 2213              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2214 001c 4FF05003 			mov r3, #80												
 2215 0020 83F31188 		msr basepri, r3											
 2216 0024 BFF36F8F 		isb														
 2217 0028 BFF34F8F 		dsb														
 2218              	
 2219              	@ 0 "" 2
 2220              	.LVL184:
 2221              		.thumb
 2222              		.syntax unified
 2223              	.L199:
 2224 002c FEE7     		b	.L199
 2225              	.L198:
 2226              	.LBE142:
 2227              	.LBE141:
2611:../FreeRTOS/Source/tasks.c **** 		}
 2228              		.loc 1 2611 0 discriminator 2
 2229 002e 314A     		ldr	r2, .L216+8
 2230 0030 1168     		ldr	r1, [r2]
 2231              	.LVL185:
 2232 0032 314B     		ldr	r3, .L216+12
 2233 0034 1868     		ldr	r0, [r3]
 2234 0036 1060     		str	r0, [r2]
 2235 0038 1960     		str	r1, [r3]
 2236 003a 304A     		ldr	r2, .L216+16
 2237 003c 1368     		ldr	r3, [r2]
 2238 003e 0133     		adds	r3, r3, #1
 2239 0040 1360     		str	r3, [r2]
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 136


 2240 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2241              	.LVL186:
 2242              	.L197:
 2243              	.LBE140:
2622:../FreeRTOS/Source/tasks.c **** 		{
 2244              		.loc 1 2622 0
 2245 0046 2E4B     		ldr	r3, .L216+20
 2246 0048 1B68     		ldr	r3, [r3]
 2247 004a AB42     		cmp	r3, r5
 2248 004c 38D9     		bls	.L209
 2249              	.LBE139:
2593:../FreeRTOS/Source/tasks.c **** 
 2250              		.loc 1 2593 0
 2251 004e 0024     		movs	r4, #0
 2252              	.LVL187:
 2253              	.L201:
 2254              	.LBB143:
2705:../FreeRTOS/Source/tasks.c **** 			{
 2255              		.loc 1 2705 0
 2256 0050 2C4B     		ldr	r3, .L216+24
 2257 0052 1B68     		ldr	r3, [r3]
 2258 0054 DB6A     		ldr	r3, [r3, #44]
 2259 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2260 005a 9A00     		lsls	r2, r3, #2
 2261 005c 2A4B     		ldr	r3, .L216+28
 2262 005e 9B58     		ldr	r3, [r3, r2]
 2263 0060 012B     		cmp	r3, #1
 2264 0062 3CD9     		bls	.L207
2707:../FreeRTOS/Source/tasks.c **** 			}
 2265              		.loc 1 2707 0
 2266 0064 0124     		movs	r4, #1
 2267              	.LVL188:
 2268 0066 3AE0     		b	.L207
 2269              	.LVL189:
 2270              	.L210:
2688:../FreeRTOS/Source/tasks.c **** 						}
 2271              		.loc 1 2688 0
 2272 0068 0124     		movs	r4, #1
 2273              	.LVL190:
 2274              	.L200:
2626:../FreeRTOS/Source/tasks.c **** 				{
 2275              		.loc 1 2626 0
 2276 006a 224B     		ldr	r3, .L216+8
 2277 006c 1B68     		ldr	r3, [r3]
 2278 006e 1B68     		ldr	r3, [r3]
 2279 0070 43B3     		cbz	r3, .L214
2642:../FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2280              		.loc 1 2642 0
 2281 0072 204B     		ldr	r3, .L216+8
 2282 0074 1B68     		ldr	r3, [r3]
 2283 0076 DB68     		ldr	r3, [r3, #12]
 2284 0078 DE68     		ldr	r6, [r3, #12]
 2285              	.LVL191:
2643:../FreeRTOS/Source/tasks.c **** 
 2286              		.loc 1 2643 0
 2287 007a 7368     		ldr	r3, [r6, #4]
 2288              	.LVL192:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 137


2645:../FreeRTOS/Source/tasks.c **** 					{
 2289              		.loc 1 2645 0
 2290 007c 9D42     		cmp	r5, r3
 2291 007e 26D3     		bcc	.L215
2661:../FreeRTOS/Source/tasks.c **** 
 2292              		.loc 1 2661 0
 2293 0080 371D     		adds	r7, r6, #4
 2294 0082 3846     		mov	r0, r7
 2295 0084 FFF7FEFF 		bl	uxListRemove
 2296              	.LVL193:
2665:../FreeRTOS/Source/tasks.c **** 					{
 2297              		.loc 1 2665 0
 2298 0088 B36A     		ldr	r3, [r6, #40]
 2299 008a 1BB1     		cbz	r3, .L204
2667:../FreeRTOS/Source/tasks.c **** 					}
 2300              		.loc 1 2667 0
 2301 008c 06F11800 		add	r0, r6, #24
 2302 0090 FFF7FEFF 		bl	uxListRemove
 2303              	.LVL194:
 2304              	.L204:
2676:../FreeRTOS/Source/tasks.c **** 
 2305              		.loc 1 2676 0
 2306 0094 F36A     		ldr	r3, [r6, #44]
 2307 0096 0122     		movs	r2, #1
 2308 0098 9A40     		lsls	r2, r2, r3
 2309 009a 1C49     		ldr	r1, .L216+32
 2310 009c 0868     		ldr	r0, [r1]
 2311 009e 0243     		orrs	r2, r2, r0
 2312 00a0 0A60     		str	r2, [r1]
 2313 00a2 03EB8303 		add	r3, r3, r3, lsl #2
 2314 00a6 9A00     		lsls	r2, r3, #2
 2315 00a8 3946     		mov	r1, r7
 2316 00aa 1748     		ldr	r0, .L216+28
 2317 00ac 1044     		add	r0, r0, r2
 2318 00ae FFF7FEFF 		bl	vListInsertEnd
 2319              	.LVL195:
2686:../FreeRTOS/Source/tasks.c **** 						{
 2320              		.loc 1 2686 0
 2321 00b2 F26A     		ldr	r2, [r6, #44]
 2322 00b4 134B     		ldr	r3, .L216+24
 2323 00b6 1B68     		ldr	r3, [r3]
 2324 00b8 DB6A     		ldr	r3, [r3, #44]
 2325 00ba 9A42     		cmp	r2, r3
 2326 00bc D4D2     		bcs	.L210
 2327 00be D4E7     		b	.L200
 2328              	.LVL196:
 2329              	.L209:
 2330              	.LBE143:
2593:../FreeRTOS/Source/tasks.c **** 
 2331              		.loc 1 2593 0
 2332 00c0 0024     		movs	r4, #0
 2333 00c2 D2E7     		b	.L200
 2334              	.LVL197:
 2335              	.L214:
 2336              	.LBB144:
2633:../FreeRTOS/Source/tasks.c **** 					break;
 2337              		.loc 1 2633 0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 138


 2338 00c4 0E4B     		ldr	r3, .L216+20
 2339 00c6 4FF0FF32 		mov	r2, #-1
 2340 00ca 1A60     		str	r2, [r3]
2634:../FreeRTOS/Source/tasks.c **** 				}
 2341              		.loc 1 2634 0
 2342 00cc C0E7     		b	.L201
 2343              	.LVL198:
 2344              	.L215:
2652:../FreeRTOS/Source/tasks.c **** 						break;
 2345              		.loc 1 2652 0
 2346 00ce 0C4A     		ldr	r2, .L216+20
 2347 00d0 1360     		str	r3, [r2]
2653:../FreeRTOS/Source/tasks.c **** 					}
 2348              		.loc 1 2653 0
 2349 00d2 BDE7     		b	.L201
 2350              	.LVL199:
 2351              	.L196:
 2352              	.LBE144:
2733:../FreeRTOS/Source/tasks.c **** 
 2353              		.loc 1 2733 0
 2354 00d4 0E4A     		ldr	r2, .L216+36
 2355 00d6 1368     		ldr	r3, [r2]
 2356 00d8 0133     		adds	r3, r3, #1
 2357 00da 1360     		str	r3, [r2]
2593:../FreeRTOS/Source/tasks.c **** 
 2358              		.loc 1 2593 0
 2359 00dc 0024     		movs	r4, #0
 2360              	.LVL200:
 2361              	.L207:
2746:../FreeRTOS/Source/tasks.c **** 		{
 2362              		.loc 1 2746 0
 2363 00de 0D4B     		ldr	r3, .L216+40
 2364 00e0 1B68     		ldr	r3, [r3]
 2365 00e2 03B1     		cbz	r3, .L195
2748:../FreeRTOS/Source/tasks.c **** 		}
 2366              		.loc 1 2748 0
 2367 00e4 0124     		movs	r4, #1
 2368              	.LVL201:
 2369              	.L195:
2758:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2370              		.loc 1 2758 0
 2371 00e6 2046     		mov	r0, r4
 2372 00e8 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2373              	.L217:
 2374 00ea 00BF     		.align	2
 2375              	.L216:
 2376 00ec 00000000 		.word	.LANCHOR16
 2377 00f0 00000000 		.word	.LANCHOR15
 2378 00f4 00000000 		.word	.LANCHOR2
 2379 00f8 00000000 		.word	.LANCHOR8
 2380 00fc 00000000 		.word	.LANCHOR18
 2381 0100 00000000 		.word	.LANCHOR3
 2382 0104 00000000 		.word	.LANCHOR10
 2383 0108 00000000 		.word	.LANCHOR4
 2384 010c 00000000 		.word	.LANCHOR13
 2385 0110 00000000 		.word	.LANCHOR19
 2386 0114 00000000 		.word	.LANCHOR20
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 139


 2387              		.cfi_endproc
 2388              	.LFE28:
 2390              		.section	.text.xTaskResumeAll,"ax",%progbits
 2391              		.align	1
 2392              		.global	xTaskResumeAll
 2393              		.syntax unified
 2394              		.thumb
 2395              		.thumb_func
 2396              		.fpu fpv4-sp-d16
 2398              	xTaskResumeAll:
 2399              	.LFB22:
2106:../FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2400              		.loc 1 2106 0
 2401              		.cfi_startproc
 2402              		@ args = 0, pretend = 0, frame = 0
 2403              		@ frame_needed = 0, uses_anonymous_args = 0
 2404 0000 38B5     		push	{r3, r4, r5, lr}
 2405              	.LCFI26:
 2406              		.cfi_def_cfa_offset 16
 2407              		.cfi_offset 3, -16
 2408              		.cfi_offset 4, -12
 2409              		.cfi_offset 5, -8
 2410              		.cfi_offset 14, -4
 2411              	.LVL202:
2112:../FreeRTOS/Source/tasks.c **** 
 2412              		.loc 1 2112 0
 2413 0002 334B     		ldr	r3, .L234
 2414 0004 1B68     		ldr	r3, [r3]
 2415 0006 43B9     		cbnz	r3, .L219
 2416              	.LBB145:
 2417              	.LBB146:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2418              		.loc 2 195 0
 2419              		.syntax unified
 2420              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2421 0008 4FF05003 			mov r3, #80												
 2422 000c 83F31188 		msr basepri, r3											
 2423 0010 BFF36F8F 		isb														
 2424 0014 BFF34F8F 		dsb														
 2425              	
 2426              	@ 0 "" 2
 2427              	.LVL203:
 2428              		.thumb
 2429              		.syntax unified
 2430              	.L220:
 2431 0018 FEE7     		b	.L220
 2432              	.L219:
 2433              	.LBE146:
 2434              	.LBE145:
2119:../FreeRTOS/Source/tasks.c **** 	{
 2435              		.loc 1 2119 0
 2436 001a FFF7FEFF 		bl	vPortEnterCritical
 2437              	.LVL204:
2121:../FreeRTOS/Source/tasks.c **** 
 2438              		.loc 1 2121 0
 2439 001e 2C4B     		ldr	r3, .L234
 2440 0020 1A68     		ldr	r2, [r3]
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 140


 2441 0022 013A     		subs	r2, r2, #1
 2442 0024 1A60     		str	r2, [r3]
2123:../FreeRTOS/Source/tasks.c **** 		{
 2443              		.loc 1 2123 0
 2444 0026 1B68     		ldr	r3, [r3]
 2445 0028 002B     		cmp	r3, #0
 2446 002a 4DD1     		bne	.L229
2125:../FreeRTOS/Source/tasks.c **** 			{
 2447              		.loc 1 2125 0
 2448 002c 294B     		ldr	r3, .L234+4
 2449 002e 1B68     		ldr	r3, [r3]
 2450 0030 23B9     		cbnz	r3, .L230
2108:../FreeRTOS/Source/tasks.c **** 
 2451              		.loc 1 2108 0
 2452 0032 0024     		movs	r4, #0
 2453              	.LVL205:
 2454              	.L221:
2209:../FreeRTOS/Source/tasks.c **** 
 2455              		.loc 1 2209 0
 2456 0034 FFF7FEFF 		bl	vPortExitCritical
 2457              	.LVL206:
2212:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2458              		.loc 1 2212 0
 2459 0038 2046     		mov	r0, r4
 2460 003a 38BD     		pop	{r3, r4, r5, pc}
 2461              	.LVL207:
 2462              	.L230:
2107:../FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
 2463              		.loc 1 2107 0
 2464 003c 0024     		movs	r4, #0
 2465              	.LVL208:
 2466              	.L222:
2129:../FreeRTOS/Source/tasks.c **** 				{
 2467              		.loc 1 2129 0
 2468 003e 264B     		ldr	r3, .L234+8
 2469 0040 1B68     		ldr	r3, [r3]
 2470 0042 1BB3     		cbz	r3, .L233
2131:../FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2471              		.loc 1 2131 0
 2472 0044 244B     		ldr	r3, .L234+8
 2473 0046 DB68     		ldr	r3, [r3, #12]
 2474 0048 DC68     		ldr	r4, [r3, #12]
 2475              	.LVL209:
2132:../FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2476              		.loc 1 2132 0
 2477 004a 04F11800 		add	r0, r4, #24
 2478 004e FFF7FEFF 		bl	uxListRemove
 2479              	.LVL210:
2133:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2480              		.loc 1 2133 0
 2481 0052 251D     		adds	r5, r4, #4
 2482 0054 2846     		mov	r0, r5
 2483 0056 FFF7FEFF 		bl	uxListRemove
 2484              	.LVL211:
2134:../FreeRTOS/Source/tasks.c **** 
 2485              		.loc 1 2134 0
 2486 005a E36A     		ldr	r3, [r4, #44]
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 141


 2487 005c 0122     		movs	r2, #1
 2488 005e 9A40     		lsls	r2, r2, r3
 2489 0060 1E49     		ldr	r1, .L234+12
 2490 0062 0868     		ldr	r0, [r1]
 2491 0064 0243     		orrs	r2, r2, r0
 2492 0066 0A60     		str	r2, [r1]
 2493 0068 03EB8303 		add	r3, r3, r3, lsl #2
 2494 006c 9A00     		lsls	r2, r3, #2
 2495 006e 2946     		mov	r1, r5
 2496 0070 1B48     		ldr	r0, .L234+16
 2497 0072 1044     		add	r0, r0, r2
 2498 0074 FFF7FEFF 		bl	vListInsertEnd
 2499              	.LVL212:
2138:../FreeRTOS/Source/tasks.c **** 					{
 2500              		.loc 1 2138 0
 2501 0078 E26A     		ldr	r2, [r4, #44]
 2502 007a 1A4B     		ldr	r3, .L234+20
 2503 007c 1B68     		ldr	r3, [r3]
 2504 007e DB6A     		ldr	r3, [r3, #44]
 2505 0080 9A42     		cmp	r2, r3
 2506 0082 DCD3     		bcc	.L222
2140:../FreeRTOS/Source/tasks.c **** 					}
 2507              		.loc 1 2140 0
 2508 0084 184B     		ldr	r3, .L234+24
 2509 0086 0122     		movs	r2, #1
 2510 0088 1A60     		str	r2, [r3]
 2511 008a D8E7     		b	.L222
 2512              	.L233:
2148:../FreeRTOS/Source/tasks.c **** 				{
 2513              		.loc 1 2148 0
 2514 008c 0CB1     		cbz	r4, .L225
2156:../FreeRTOS/Source/tasks.c **** 				}
 2515              		.loc 1 2156 0
 2516 008e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2517              	.LVL213:
 2518              	.L225:
 2519              	.LBB147:
2164:../FreeRTOS/Source/tasks.c **** 
 2520              		.loc 1 2164 0
 2521 0092 164B     		ldr	r3, .L234+28
 2522 0094 1C68     		ldr	r4, [r3]
 2523              	.LVL214:
2166:../FreeRTOS/Source/tasks.c **** 					{
 2524              		.loc 1 2166 0
 2525 0096 54B1     		cbz	r4, .L226
 2526              	.L228:
2170:../FreeRTOS/Source/tasks.c **** 							{
 2527              		.loc 1 2170 0
 2528 0098 FFF7FEFF 		bl	xTaskIncrementTick
 2529              	.LVL215:
 2530 009c 10B1     		cbz	r0, .L227
2172:../FreeRTOS/Source/tasks.c **** 							}
 2531              		.loc 1 2172 0
 2532 009e 124B     		ldr	r3, .L234+24
 2533 00a0 0122     		movs	r2, #1
 2534 00a2 1A60     		str	r2, [r3]
 2535              	.L227:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 142


 2536              	.LVL216:
2179:../FreeRTOS/Source/tasks.c **** 
 2537              		.loc 1 2179 0
 2538 00a4 013C     		subs	r4, r4, #1
 2539              	.LVL217:
 2540 00a6 F7D1     		bne	.L228
2181:../FreeRTOS/Source/tasks.c **** 					}
 2541              		.loc 1 2181 0
 2542 00a8 104B     		ldr	r3, .L234+28
 2543 00aa 0022     		movs	r2, #0
 2544 00ac 1A60     		str	r2, [r3]
 2545              	.L226:
 2546              	.LBE147:
2189:../FreeRTOS/Source/tasks.c **** 				{
 2547              		.loc 1 2189 0
 2548 00ae 0E4B     		ldr	r3, .L234+24
 2549 00b0 1B68     		ldr	r3, [r3]
 2550 00b2 5BB1     		cbz	r3, .L231
 2551              	.LVL218:
2196:../FreeRTOS/Source/tasks.c **** 				}
 2552              		.loc 1 2196 0
 2553 00b4 0E4B     		ldr	r3, .L234+32
 2554 00b6 4FF08052 		mov	r2, #268435456
 2555 00ba 1A60     		str	r2, [r3]
 2556              		.syntax unified
 2557              	@ 2196 "../FreeRTOS/Source/tasks.c" 1
 2558 00bc BFF34F8F 		dsb
 2559              	@ 0 "" 2
 2560              	@ 2196 "../FreeRTOS/Source/tasks.c" 1
 2561 00c0 BFF36F8F 		isb
 2562              	@ 0 "" 2
2193:../FreeRTOS/Source/tasks.c **** 					}
 2563              		.loc 1 2193 0
 2564              		.thumb
 2565              		.syntax unified
 2566 00c4 0124     		movs	r4, #1
 2567              	.LVL219:
 2568 00c6 B5E7     		b	.L221
 2569              	.LVL220:
 2570              	.L229:
2108:../FreeRTOS/Source/tasks.c **** 
 2571              		.loc 1 2108 0
 2572 00c8 0024     		movs	r4, #0
 2573 00ca B3E7     		b	.L221
 2574              	.LVL221:
 2575              	.L231:
 2576 00cc 0024     		movs	r4, #0
 2577              	.LVL222:
 2578 00ce B1E7     		b	.L221
 2579              	.L235:
 2580              		.align	2
 2581              	.L234:
 2582 00d0 00000000 		.word	.LANCHOR16
 2583 00d4 00000000 		.word	.LANCHOR9
 2584 00d8 00000000 		.word	.LANCHOR1
 2585 00dc 00000000 		.word	.LANCHOR13
 2586 00e0 00000000 		.word	.LANCHOR4
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 143


 2587 00e4 00000000 		.word	.LANCHOR10
 2588 00e8 00000000 		.word	.LANCHOR20
 2589 00ec 00000000 		.word	.LANCHOR19
 2590 00f0 04ED00E0 		.word	-536810236
 2591              		.cfi_endproc
 2592              	.LFE22:
 2594              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2595              		.align	1
 2596              		.global	vTaskDelayUntil
 2597              		.syntax unified
 2598              		.thumb
 2599              		.thumb_func
 2600              		.fpu fpv4-sp-d16
 2602              	vTaskDelayUntil:
 2603              	.LFB9:
1205:../FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 2604              		.loc 1 1205 0
 2605              		.cfi_startproc
 2606              		@ args = 0, pretend = 0, frame = 0
 2607              		@ frame_needed = 0, uses_anonymous_args = 0
 2608              	.LVL223:
 2609 0000 38B5     		push	{r3, r4, r5, lr}
 2610              	.LCFI27:
 2611              		.cfi_def_cfa_offset 16
 2612              		.cfi_offset 3, -16
 2613              		.cfi_offset 4, -12
 2614              		.cfi_offset 5, -8
 2615              		.cfi_offset 14, -4
 2616              	.LVL224:
1209:../FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2617              		.loc 1 1209 0
 2618 0002 50B1     		cbz	r0, .L252
 2619 0004 0546     		mov	r5, r0
1210:../FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2620              		.loc 1 1210 0
 2621 0006 89B9     		cbnz	r1, .L239
 2622              	.LBB148:
 2623              	.LBB149:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2624              		.loc 2 195 0
 2625              		.syntax unified
 2626              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2627 0008 4FF05003 			mov r3, #80												
 2628 000c 83F31188 		msr basepri, r3											
 2629 0010 BFF36F8F 		isb														
 2630 0014 BFF34F8F 		dsb														
 2631              	
 2632              	@ 0 "" 2
 2633              	.LVL225:
 2634              		.thumb
 2635              		.syntax unified
 2636              	.L240:
 2637 0018 FEE7     		b	.L240
 2638              	.L252:
 2639              	.LBE149:
 2640              	.LBE148:
 2641              	.LBB150:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 144


 2642              	.LBB151:
 2643              		.syntax unified
 2644              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2645 001a 4FF05003 			mov r3, #80												
 2646 001e 83F31188 		msr basepri, r3											
 2647 0022 BFF36F8F 		isb														
 2648 0026 BFF34F8F 		dsb														
 2649              	
 2650              	@ 0 "" 2
 2651              	.LVL226:
 2652              		.thumb
 2653              		.syntax unified
 2654              	.L238:
 2655 002a FEE7     		b	.L238
 2656              	.L239:
 2657              	.LBE151:
 2658              	.LBE150:
1211:../FreeRTOS/Source/tasks.c **** 
 2659              		.loc 1 1211 0
 2660 002c 1A4B     		ldr	r3, .L253
 2661 002e 1B68     		ldr	r3, [r3]
 2662 0030 43B1     		cbz	r3, .L241
 2663              	.LBB152:
 2664              	.LBB153:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2665              		.loc 2 195 0
 2666              		.syntax unified
 2667              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2668 0032 4FF05003 			mov r3, #80												
 2669 0036 83F31188 		msr basepri, r3											
 2670 003a BFF36F8F 		isb														
 2671 003e BFF34F8F 		dsb														
 2672              	
 2673              	@ 0 "" 2
 2674              	.LVL227:
 2675              		.thumb
 2676              		.syntax unified
 2677              	.L242:
 2678 0042 FEE7     		b	.L242
 2679              	.L241:
 2680 0044 0C46     		mov	r4, r1
 2681              	.LBE153:
 2682              	.LBE152:
1213:../FreeRTOS/Source/tasks.c **** 		{
 2683              		.loc 1 1213 0
 2684 0046 FFF7FEFF 		bl	vTaskSuspendAll
 2685              	.LVL228:
 2686              	.LBB154:
1217:../FreeRTOS/Source/tasks.c **** 
 2687              		.loc 1 1217 0
 2688 004a 144B     		ldr	r3, .L253+4
 2689 004c 1868     		ldr	r0, [r3]
 2690              	.LVL229:
1220:../FreeRTOS/Source/tasks.c **** 
 2691              		.loc 1 1220 0
 2692 004e 2A68     		ldr	r2, [r5]
 2693 0050 1444     		add	r4, r4, r2
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 145


 2694              	.LVL230:
1222:../FreeRTOS/Source/tasks.c **** 			{
 2695              		.loc 1 1222 0
 2696 0052 8242     		cmp	r2, r0
 2697 0054 18D9     		bls	.L243
1229:../FreeRTOS/Source/tasks.c **** 				{
 2698              		.loc 1 1229 0
 2699 0056 A242     		cmp	r2, r4
 2700 0058 0CD8     		bhi	.L244
1254:../FreeRTOS/Source/tasks.c **** 
 2701              		.loc 1 1254 0
 2702 005a 2C60     		str	r4, [r5]
 2703              	.LVL231:
 2704              	.L245:
 2705              	.LBE154:
1269:../FreeRTOS/Source/tasks.c **** 
 2706              		.loc 1 1269 0
 2707 005c FFF7FEFF 		bl	xTaskResumeAll
 2708              	.LVL232:
1273:../FreeRTOS/Source/tasks.c **** 		{
 2709              		.loc 1 1273 0
 2710 0060 38B9     		cbnz	r0, .L236
1275:../FreeRTOS/Source/tasks.c **** 		}
 2711              		.loc 1 1275 0
 2712 0062 0F4B     		ldr	r3, .L253+8
 2713 0064 4FF08052 		mov	r2, #268435456
 2714 0068 1A60     		str	r2, [r3]
 2715              		.syntax unified
 2716              	@ 1275 "../FreeRTOS/Source/tasks.c" 1
 2717 006a BFF34F8F 		dsb
 2718              	@ 0 "" 2
 2719              	@ 1275 "../FreeRTOS/Source/tasks.c" 1
 2720 006e BFF36F8F 		isb
 2721              	@ 0 "" 2
 2722              		.thumb
 2723              		.syntax unified
 2724              	.L236:
1281:../FreeRTOS/Source/tasks.c **** 
 2725              		.loc 1 1281 0
 2726 0072 38BD     		pop	{r3, r4, r5, pc}
 2727              	.LVL233:
 2728              	.L244:
 2729              	.LBB155:
1229:../FreeRTOS/Source/tasks.c **** 				{
 2730              		.loc 1 1229 0 discriminator 1
 2731 0074 A042     		cmp	r0, r4
 2732 0076 01D3     		bcc	.L246
1254:../FreeRTOS/Source/tasks.c **** 
 2733              		.loc 1 1254 0
 2734 0078 2C60     		str	r4, [r5]
 2735 007a EFE7     		b	.L245
 2736              	.L246:
 2737              	.LVL234:
 2738 007c 2C60     		str	r4, [r5]
 2739              	.L247:
1262:../FreeRTOS/Source/tasks.c **** 			}
 2740              		.loc 1 1262 0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 146


 2741 007e 0021     		movs	r1, #0
 2742 0080 201A     		subs	r0, r4, r0
 2743              	.LVL235:
 2744 0082 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2745              	.LVL236:
 2746 0086 E9E7     		b	.L245
 2747              	.LVL237:
 2748              	.L243:
1243:../FreeRTOS/Source/tasks.c **** 				{
 2749              		.loc 1 1243 0
 2750 0088 A242     		cmp	r2, r4
 2751 008a 01D8     		bhi	.L248
1243:../FreeRTOS/Source/tasks.c **** 				{
 2752              		.loc 1 1243 0 is_stmt 0 discriminator 1
 2753 008c A042     		cmp	r0, r4
 2754 008e 01D2     		bcs	.L249
 2755              	.L248:
 2756              	.LVL238:
1254:../FreeRTOS/Source/tasks.c **** 
 2757              		.loc 1 1254 0 is_stmt 1
 2758 0090 2C60     		str	r4, [r5]
 2759 0092 F4E7     		b	.L247
 2760              	.LVL239:
 2761              	.L249:
 2762 0094 2C60     		str	r4, [r5]
 2763 0096 E1E7     		b	.L245
 2764              	.L254:
 2765              		.align	2
 2766              	.L253:
 2767 0098 00000000 		.word	.LANCHOR16
 2768 009c 00000000 		.word	.LANCHOR15
 2769 00a0 04ED00E0 		.word	-536810236
 2770              	.LBE155:
 2771              		.cfi_endproc
 2772              	.LFE9:
 2774              		.section	.text.vTaskDelay,"ax",%progbits
 2775              		.align	1
 2776              		.global	vTaskDelay
 2777              		.syntax unified
 2778              		.thumb
 2779              		.thumb_func
 2780              		.fpu fpv4-sp-d16
 2782              	vTaskDelay:
 2783              	.LFB10:
1289:../FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2784              		.loc 1 1289 0
 2785              		.cfi_startproc
 2786              		@ args = 0, pretend = 0, frame = 0
 2787              		@ frame_needed = 0, uses_anonymous_args = 0
 2788              	.LVL240:
 2789 0000 10B5     		push	{r4, lr}
 2790              	.LCFI28:
 2791              		.cfi_def_cfa_offset 8
 2792              		.cfi_offset 4, -8
 2793              		.cfi_offset 14, -4
 2794              	.LVL241:
1293:../FreeRTOS/Source/tasks.c **** 		{
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 147


 2795              		.loc 1 1293 0
 2796 0002 A8B1     		cbz	r0, .L256
 2797 0004 0446     		mov	r4, r0
1295:../FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 2798              		.loc 1 1295 0
 2799 0006 0F4B     		ldr	r3, .L261
 2800 0008 1B68     		ldr	r3, [r3]
 2801 000a 43B1     		cbz	r3, .L257
 2802              	.LBB156:
 2803              	.LBB157:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2804              		.loc 2 195 0
 2805              		.syntax unified
 2806              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2807 000c 4FF05003 			mov r3, #80												
 2808 0010 83F31188 		msr basepri, r3											
 2809 0014 BFF36F8F 		isb														
 2810 0018 BFF34F8F 		dsb														
 2811              	
 2812              	@ 0 "" 2
 2813              	.LVL242:
 2814              		.thumb
 2815              		.syntax unified
 2816              	.L258:
 2817 001c FEE7     		b	.L258
 2818              	.L257:
 2819              	.LBE157:
 2820              	.LBE156:
1296:../FreeRTOS/Source/tasks.c **** 			{
 2821              		.loc 1 1296 0
 2822 001e FFF7FEFF 		bl	vTaskSuspendAll
 2823              	.LVL243:
1307:../FreeRTOS/Source/tasks.c **** 			}
 2824              		.loc 1 1307 0
 2825 0022 0021     		movs	r1, #0
 2826 0024 2046     		mov	r0, r4
 2827 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2828              	.LVL244:
1309:../FreeRTOS/Source/tasks.c **** 		}
 2829              		.loc 1 1309 0
 2830 002a FFF7FEFF 		bl	xTaskResumeAll
 2831              	.LVL245:
1318:../FreeRTOS/Source/tasks.c **** 		{
 2832              		.loc 1 1318 0
 2833 002e 38B9     		cbnz	r0, .L255
 2834              	.LVL246:
 2835              	.L256:
1320:../FreeRTOS/Source/tasks.c **** 		}
 2836              		.loc 1 1320 0
 2837 0030 054B     		ldr	r3, .L261+4
 2838 0032 4FF08052 		mov	r2, #268435456
 2839 0036 1A60     		str	r2, [r3]
 2840              		.syntax unified
 2841              	@ 1320 "../FreeRTOS/Source/tasks.c" 1
 2842 0038 BFF34F8F 		dsb
 2843              	@ 0 "" 2
 2844              	@ 1320 "../FreeRTOS/Source/tasks.c" 1
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 148


 2845 003c BFF36F8F 		isb
 2846              	@ 0 "" 2
 2847              		.thumb
 2848              		.syntax unified
 2849              	.L255:
1326:../FreeRTOS/Source/tasks.c **** 
 2850              		.loc 1 1326 0
 2851 0040 10BD     		pop	{r4, pc}
 2852              	.L262:
 2853 0042 00BF     		.align	2
 2854              	.L261:
 2855 0044 00000000 		.word	.LANCHOR16
 2856 0048 04ED00E0 		.word	-536810236
 2857              		.cfi_endproc
 2858              	.LFE10:
 2860              		.section	.text.vTaskSwitchContext,"ax",%progbits
 2861              		.align	1
 2862              		.global	vTaskSwitchContext
 2863              		.syntax unified
 2864              		.thumb
 2865              		.thumb_func
 2866              		.fpu fpv4-sp-d16
 2868              	vTaskSwitchContext:
 2869              	.LFB29:
2852:../FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2870              		.loc 1 2852 0
 2871              		.cfi_startproc
 2872              		@ args = 0, pretend = 0, frame = 0
 2873              		@ frame_needed = 0, uses_anonymous_args = 0
2853:../FreeRTOS/Source/tasks.c **** 	{
 2874              		.loc 1 2853 0
 2875 0000 2C4B     		ldr	r3, .L276
 2876 0002 1B68     		ldr	r3, [r3]
 2877 0004 1BB1     		cbz	r3, .L264
2857:../FreeRTOS/Source/tasks.c **** 	}
 2878              		.loc 1 2857 0
 2879 0006 2C4B     		ldr	r3, .L276+4
 2880 0008 0122     		movs	r2, #1
 2881 000a 1A60     		str	r2, [r3]
 2882 000c 7047     		bx	lr
 2883              	.L264:
2852:../FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 2884              		.loc 1 2852 0
 2885 000e 10B5     		push	{r4, lr}
 2886              	.LCFI29:
 2887              		.cfi_def_cfa_offset 8
 2888              		.cfi_offset 4, -8
 2889              		.cfi_offset 14, -4
2861:../FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 2890              		.loc 1 2861 0
 2891 0010 294B     		ldr	r3, .L276+4
 2892 0012 0022     		movs	r2, #0
 2893 0014 1A60     		str	r2, [r3]
 2894              	.LBB158:
2892:../FreeRTOS/Source/tasks.c **** 
 2895              		.loc 1 2892 0
 2896 0016 294B     		ldr	r3, .L276+8
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 149


 2897 0018 1B68     		ldr	r3, [r3]
 2898 001a 1B6B     		ldr	r3, [r3, #48]
 2899              	.LVL247:
 2900 001c 1A68     		ldr	r2, [r3]
 2901 001e B2F1A53F 		cmp	r2, #-1515870811
 2902 0022 03D1     		bne	.L266
2892:../FreeRTOS/Source/tasks.c **** 
 2903              		.loc 1 2892 0 is_stmt 0 discriminator 2
 2904 0024 5A68     		ldr	r2, [r3, #4]
 2905 0026 B2F1A53F 		cmp	r2, #-1515870811
 2906 002a 1BD0     		beq	.L274
 2907              	.LVL248:
 2908              	.L266:
2892:../FreeRTOS/Source/tasks.c **** 
 2909              		.loc 1 2892 0 discriminator 7
 2910 002c 234B     		ldr	r3, .L276+8
 2911 002e 1868     		ldr	r0, [r3]
 2912 0030 1968     		ldr	r1, [r3]
 2913 0032 3431     		adds	r1, r1, #52
 2914 0034 FFF7FEFF 		bl	vApplicationStackOverflowHook
 2915              	.LVL249:
 2916              	.L267:
 2917              	.LBE158:
 2918              	.LBB159:
2896:../FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2919              		.loc 1 2896 0 is_stmt 1
 2920 0038 214B     		ldr	r3, .L276+12
 2921 003a 1B68     		ldr	r3, [r3]
 2922              	.LVL250:
 2923              	.LBB160:
 2924              	.LBB161:
 134:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 2925              		.loc 2 134 0
 2926              		.syntax unified
 2927              	@ 134 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2928 003c B3FA83F3 		clz r3, r3
 2929              	@ 0 "" 2
 2930              	.LVL251:
 2931              		.thumb
 2932              		.syntax unified
 2933 0040 DBB2     		uxtb	r3, r3
 2934              	.LBE161:
 2935              	.LBE160:
2896:../FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2936              		.loc 1 2896 0
 2937 0042 C3F11F03 		rsb	r3, r3, #31
 2938              	.LVL252:
 2939 0046 03EB8301 		add	r1, r3, r3, lsl #2
 2940 004a 8A00     		lsls	r2, r1, #2
 2941 004c 1D49     		ldr	r1, .L276+16
 2942 004e 8A58     		ldr	r2, [r1, r2]
 2943 0050 8AB9     		cbnz	r2, .L268
 2944              	.LBB162:
 2945              	.LBB163:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2946              		.loc 2 195 0
 2947              		.syntax unified
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 150


 2948              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2949 0052 4FF05003 			mov r3, #80												
 2950 0056 83F31188 		msr basepri, r3											
 2951 005a BFF36F8F 		isb														
 2952 005e BFF34F8F 		dsb														
 2953              	
 2954              	@ 0 "" 2
 2955              	.LVL253:
 2956              		.thumb
 2957              		.syntax unified
 2958              	.L269:
 2959 0062 FEE7     		b	.L269
 2960              	.LVL254:
 2961              	.L274:
 2962              	.LBE163:
 2963              	.LBE162:
 2964              	.LBE159:
 2965              	.LBB166:
2892:../FreeRTOS/Source/tasks.c **** 
 2966              		.loc 1 2892 0 discriminator 4
 2967 0064 9A68     		ldr	r2, [r3, #8]
 2968 0066 B2F1A53F 		cmp	r2, #-1515870811
 2969 006a DFD1     		bne	.L266
2892:../FreeRTOS/Source/tasks.c **** 
 2970              		.loc 1 2892 0 is_stmt 0 discriminator 6
 2971 006c DB68     		ldr	r3, [r3, #12]
 2972              	.LVL255:
 2973 006e B3F1A53F 		cmp	r3, #-1515870811
 2974 0072 DBD1     		bne	.L266
 2975 0074 E0E7     		b	.L267
 2976              	.LVL256:
 2977              	.L268:
 2978              	.LBE166:
 2979              	.LBB167:
 2980              	.LBB164:
2896:../FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2981              		.loc 1 2896 0 is_stmt 1 discriminator 2
 2982 0076 1348     		ldr	r0, .L276+16
 2983 0078 9A00     		lsls	r2, r3, #2
 2984 007a D418     		adds	r4, r2, r3
 2985 007c A100     		lsls	r1, r4, #2
 2986 007e 0144     		add	r1, r1, r0
 2987 0080 4C68     		ldr	r4, [r1, #4]
 2988 0082 6468     		ldr	r4, [r4, #4]
 2989 0084 4C60     		str	r4, [r1, #4]
 2990 0086 1A44     		add	r2, r2, r3
 2991 0088 9100     		lsls	r1, r2, #2
 2992 008a 0831     		adds	r1, r1, #8
 2993 008c 0844     		add	r0, r0, r1
 2994 008e 8442     		cmp	r4, r0
 2995 0090 09D0     		beq	.L275
 2996              	.L270:
2896:../FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 2997              		.loc 1 2896 0 is_stmt 0 discriminator 5
 2998 0092 03EB8303 		add	r3, r3, r3, lsl #2
 2999              	.LVL257:
 3000 0096 9A00     		lsls	r2, r3, #2
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 151


 3001 0098 0A4B     		ldr	r3, .L276+16
 3002 009a 1344     		add	r3, r3, r2
 3003 009c 5B68     		ldr	r3, [r3, #4]
 3004 009e DA68     		ldr	r2, [r3, #12]
 3005 00a0 064B     		ldr	r3, .L276+8
 3006 00a2 1A60     		str	r2, [r3]
 3007              	.LBE164:
 3008              	.LBE167:
2907:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3009              		.loc 1 2907 0 is_stmt 1 discriminator 5
 3010 00a4 10BD     		pop	{r4, pc}
 3011              	.LVL258:
 3012              	.L275:
 3013              	.LBB168:
 3014              	.LBB165:
2896:../FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3015              		.loc 1 2896 0 discriminator 3
 3016 00a6 6168     		ldr	r1, [r4, #4]
 3017 00a8 0648     		ldr	r0, .L276+16
 3018 00aa 1422     		movs	r2, #20
 3019 00ac 02FB0302 		mla	r2, r2, r3, r0
 3020 00b0 5160     		str	r1, [r2, #4]
 3021 00b2 EEE7     		b	.L270
 3022              	.L277:
 3023              		.align	2
 3024              	.L276:
 3025 00b4 00000000 		.word	.LANCHOR16
 3026 00b8 00000000 		.word	.LANCHOR20
 3027 00bc 00000000 		.word	.LANCHOR10
 3028 00c0 00000000 		.word	.LANCHOR13
 3029 00c4 00000000 		.word	.LANCHOR4
 3030              	.LBE165:
 3031              	.LBE168:
 3032              		.cfi_endproc
 3033              	.LFE29:
 3035              		.section	.text.vTaskSuspend,"ax",%progbits
 3036              		.align	1
 3037              		.global	vTaskSuspend
 3038              		.syntax unified
 3039              		.thumb
 3040              		.thumb_func
 3041              		.fpu fpv4-sp-d16
 3043              	vTaskSuspend:
 3044              	.LFB15:
1631:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3045              		.loc 1 1631 0
 3046              		.cfi_startproc
 3047              		@ args = 0, pretend = 0, frame = 0
 3048              		@ frame_needed = 0, uses_anonymous_args = 0
 3049              	.LVL259:
 3050 0000 38B5     		push	{r3, r4, r5, lr}
 3051              	.LCFI30:
 3052              		.cfi_def_cfa_offset 16
 3053              		.cfi_offset 3, -16
 3054              		.cfi_offset 4, -12
 3055              		.cfi_offset 5, -8
 3056              		.cfi_offset 14, -4
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 152


 3057 0002 0446     		mov	r4, r0
1634:../FreeRTOS/Source/tasks.c **** 		{
 3058              		.loc 1 1634 0
 3059 0004 FFF7FEFF 		bl	vPortEnterCritical
 3060              	.LVL260:
1638:../FreeRTOS/Source/tasks.c **** 
 3061              		.loc 1 1638 0
 3062 0008 64B3     		cbz	r4, .L290
 3063              	.LVL261:
 3064              	.L279:
1644:../FreeRTOS/Source/tasks.c **** 			{
 3065              		.loc 1 1644 0 discriminator 4
 3066 000a 251D     		adds	r5, r4, #4
 3067 000c 2846     		mov	r0, r5
 3068 000e FFF7FEFF 		bl	uxListRemove
 3069              	.LVL262:
 3070 0012 70B9     		cbnz	r0, .L280
1646:../FreeRTOS/Source/tasks.c **** 			}
 3071              		.loc 1 1646 0
 3072 0014 E26A     		ldr	r2, [r4, #44]
 3073 0016 02EB8201 		add	r1, r2, r2, lsl #2
 3074 001a 8B00     		lsls	r3, r1, #2
 3075 001c 2B49     		ldr	r1, .L294
 3076 001e CB58     		ldr	r3, [r1, r3]
 3077 0020 3BB9     		cbnz	r3, .L280
1646:../FreeRTOS/Source/tasks.c **** 			}
 3078              		.loc 1 1646 0 is_stmt 0 discriminator 1
 3079 0022 0123     		movs	r3, #1
 3080 0024 03FA02F2 		lsl	r2, r3, r2
 3081 0028 2949     		ldr	r1, .L294+4
 3082 002a 0B68     		ldr	r3, [r1]
 3083 002c 23EA0203 		bic	r3, r3, r2
 3084 0030 0B60     		str	r3, [r1]
 3085              	.L280:
1654:../FreeRTOS/Source/tasks.c **** 			{
 3086              		.loc 1 1654 0 is_stmt 1
 3087 0032 A36A     		ldr	r3, [r4, #40]
 3088 0034 1BB1     		cbz	r3, .L281
1656:../FreeRTOS/Source/tasks.c **** 			}
 3089              		.loc 1 1656 0
 3090 0036 04F11800 		add	r0, r4, #24
 3091 003a FFF7FEFF 		bl	uxListRemove
 3092              	.LVL263:
 3093              	.L281:
1663:../FreeRTOS/Source/tasks.c **** 
 3094              		.loc 1 1663 0
 3095 003e 2946     		mov	r1, r5
 3096 0040 2448     		ldr	r0, .L294+8
 3097 0042 FFF7FEFF 		bl	vListInsertEnd
 3098              	.LVL264:
1667:../FreeRTOS/Source/tasks.c **** 				{
 3099              		.loc 1 1667 0
 3100 0046 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 3101 004a DBB2     		uxtb	r3, r3
 3102 004c 012B     		cmp	r3, #1
 3103 004e 0CD0     		beq	.L291
 3104              	.L282:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 153


1676:../FreeRTOS/Source/tasks.c **** 
 3105              		.loc 1 1676 0
 3106 0050 FFF7FEFF 		bl	vPortExitCritical
 3107              	.LVL265:
1678:../FreeRTOS/Source/tasks.c **** 		{
 3108              		.loc 1 1678 0
 3109 0054 204B     		ldr	r3, .L294+12
 3110 0056 1B68     		ldr	r3, [r3]
 3111 0058 5BB9     		cbnz	r3, .L292
 3112              	.L283:
1693:../FreeRTOS/Source/tasks.c **** 		{
 3113              		.loc 1 1693 0
 3114 005a 204B     		ldr	r3, .L294+16
 3115 005c 1B68     		ldr	r3, [r3]
 3116 005e A342     		cmp	r3, r4
 3117 0060 0ED0     		beq	.L293
 3118              	.L278:
1724:../FreeRTOS/Source/tasks.c **** 
 3119              		.loc 1 1724 0
 3120 0062 38BD     		pop	{r3, r4, r5, pc}
 3121              	.LVL266:
 3122              	.L290:
1638:../FreeRTOS/Source/tasks.c **** 
 3123              		.loc 1 1638 0 discriminator 1
 3124 0064 1D4B     		ldr	r3, .L294+16
 3125 0066 1C68     		ldr	r4, [r3]
 3126              	.LVL267:
 3127 0068 CFE7     		b	.L279
 3128              	.LVL268:
 3129              	.L291:
1671:../FreeRTOS/Source/tasks.c **** 				}
 3130              		.loc 1 1671 0
 3131 006a 0023     		movs	r3, #0
 3132 006c 84F85430 		strb	r3, [r4, #84]
 3133 0070 EEE7     		b	.L282
 3134              	.L292:
1682:../FreeRTOS/Source/tasks.c **** 			{
 3135              		.loc 1 1682 0
 3136 0072 FFF7FEFF 		bl	vPortEnterCritical
 3137              	.LVL269:
1684:../FreeRTOS/Source/tasks.c **** 			}
 3138              		.loc 1 1684 0
 3139 0076 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3140              	.LVL270:
1686:../FreeRTOS/Source/tasks.c **** 		}
 3141              		.loc 1 1686 0
 3142 007a FFF7FEFF 		bl	vPortExitCritical
 3143              	.LVL271:
 3144 007e ECE7     		b	.L283
 3145              	.L293:
1695:../FreeRTOS/Source/tasks.c **** 			{
 3146              		.loc 1 1695 0
 3147 0080 154B     		ldr	r3, .L294+12
 3148 0082 1B68     		ldr	r3, [r3]
 3149 0084 A3B1     		cbz	r3, .L285
1698:../FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3150              		.loc 1 1698 0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 154


 3151 0086 164B     		ldr	r3, .L294+20
 3152 0088 1B68     		ldr	r3, [r3]
 3153 008a 43B1     		cbz	r3, .L286
 3154              	.LBB169:
 3155              	.LBB170:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3156              		.loc 2 195 0
 3157              		.syntax unified
 3158              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3159 008c 4FF05003 			mov r3, #80												
 3160 0090 83F31188 		msr basepri, r3											
 3161 0094 BFF36F8F 		isb														
 3162 0098 BFF34F8F 		dsb														
 3163              	
 3164              	@ 0 "" 2
 3165              	.LVL272:
 3166              		.thumb
 3167              		.syntax unified
 3168              	.L287:
 3169 009c FEE7     		b	.L287
 3170              	.L286:
 3171              	.LBE170:
 3172              	.LBE169:
1699:../FreeRTOS/Source/tasks.c **** 			}
 3173              		.loc 1 1699 0
 3174 009e 114B     		ldr	r3, .L294+24
 3175 00a0 4FF08052 		mov	r2, #268435456
 3176 00a4 1A60     		str	r2, [r3]
 3177              		.syntax unified
 3178              	@ 1699 "../FreeRTOS/Source/tasks.c" 1
 3179 00a6 BFF34F8F 		dsb
 3180              	@ 0 "" 2
 3181              	@ 1699 "../FreeRTOS/Source/tasks.c" 1
 3182 00aa BFF36F8F 		isb
 3183              	@ 0 "" 2
 3184              		.thumb
 3185              		.syntax unified
 3186 00ae D8E7     		b	.L278
 3187              	.L285:
1706:../FreeRTOS/Source/tasks.c **** 				{
 3188              		.loc 1 1706 0
 3189 00b0 084B     		ldr	r3, .L294+8
 3190 00b2 1A68     		ldr	r2, [r3]
 3191 00b4 0C4B     		ldr	r3, .L294+28
 3192 00b6 1B68     		ldr	r3, [r3]
 3193 00b8 9A42     		cmp	r2, r3
 3194 00ba 03D1     		bne	.L288
1712:../FreeRTOS/Source/tasks.c **** 				}
 3195              		.loc 1 1712 0
 3196 00bc 074B     		ldr	r3, .L294+16
 3197 00be 0022     		movs	r2, #0
 3198 00c0 1A60     		str	r2, [r3]
 3199 00c2 CEE7     		b	.L278
 3200              	.L288:
1716:../FreeRTOS/Source/tasks.c **** 				}
 3201              		.loc 1 1716 0
 3202 00c4 FFF7FEFF 		bl	vTaskSwitchContext
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 155


 3203              	.LVL273:
1724:../FreeRTOS/Source/tasks.c **** 
 3204              		.loc 1 1724 0
 3205 00c8 CBE7     		b	.L278
 3206              	.L295:
 3207 00ca 00BF     		.align	2
 3208              	.L294:
 3209 00cc 00000000 		.word	.LANCHOR4
 3210 00d0 00000000 		.word	.LANCHOR13
 3211 00d4 00000000 		.word	.LANCHOR0
 3212 00d8 00000000 		.word	.LANCHOR11
 3213 00dc 00000000 		.word	.LANCHOR10
 3214 00e0 00000000 		.word	.LANCHOR16
 3215 00e4 04ED00E0 		.word	-536810236
 3216 00e8 00000000 		.word	.LANCHOR9
 3217              		.cfi_endproc
 3218              	.LFE15:
 3220              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3221              		.align	1
 3222              		.global	vTaskPlaceOnEventList
 3223              		.syntax unified
 3224              		.thumb
 3225              		.thumb_func
 3226              		.fpu fpv4-sp-d16
 3228              	vTaskPlaceOnEventList:
 3229              	.LFB30:
2911:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3230              		.loc 1 2911 0
 3231              		.cfi_startproc
 3232              		@ args = 0, pretend = 0, frame = 0
 3233              		@ frame_needed = 0, uses_anonymous_args = 0
 3234              	.LVL274:
2912:../FreeRTOS/Source/tasks.c **** 
 3235              		.loc 1 2912 0
 3236 0000 40B9     		cbnz	r0, .L297
 3237              	.LBB171:
 3238              	.LBB172:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3239              		.loc 2 195 0
 3240              		.syntax unified
 3241              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3242 0002 4FF05003 			mov r3, #80												
 3243 0006 83F31188 		msr basepri, r3											
 3244 000a BFF36F8F 		isb														
 3245 000e BFF34F8F 		dsb														
 3246              	
 3247              	@ 0 "" 2
 3248              	.LVL275:
 3249              		.thumb
 3250              		.syntax unified
 3251              	.L298:
 3252 0012 FEE7     		b	.L298
 3253              	.L297:
 3254              	.LBE172:
 3255              	.LBE171:
2911:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3256              		.loc 1 2911 0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 156


 3257 0014 10B5     		push	{r4, lr}
 3258              	.LCFI31:
 3259              		.cfi_def_cfa_offset 8
 3260              		.cfi_offset 4, -8
 3261              		.cfi_offset 14, -4
 3262 0016 0C46     		mov	r4, r1
2921:../FreeRTOS/Source/tasks.c **** 
 3263              		.loc 1 2921 0
 3264 0018 044B     		ldr	r3, .L301
 3265 001a 1968     		ldr	r1, [r3]
 3266              	.LVL276:
 3267 001c 1831     		adds	r1, r1, #24
 3268 001e FFF7FEFF 		bl	vListInsert
 3269              	.LVL277:
2923:../FreeRTOS/Source/tasks.c **** }
 3270              		.loc 1 2923 0
 3271 0022 0121     		movs	r1, #1
 3272 0024 2046     		mov	r0, r4
 3273 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3274              	.LVL278:
2924:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3275              		.loc 1 2924 0
 3276 002a 10BD     		pop	{r4, pc}
 3277              	.LVL279:
 3278              	.L302:
 3279              		.align	2
 3280              	.L301:
 3281 002c 00000000 		.word	.LANCHOR10
 3282              		.cfi_endproc
 3283              	.LFE30:
 3285              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3286              		.align	1
 3287              		.global	vTaskPlaceOnUnorderedEventList
 3288              		.syntax unified
 3289              		.thumb
 3290              		.thumb_func
 3291              		.fpu fpv4-sp-d16
 3293              	vTaskPlaceOnUnorderedEventList:
 3294              	.LFB31:
2928:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3295              		.loc 1 2928 0
 3296              		.cfi_startproc
 3297              		@ args = 0, pretend = 0, frame = 0
 3298              		@ frame_needed = 0, uses_anonymous_args = 0
 3299              	.LVL280:
2929:../FreeRTOS/Source/tasks.c **** 
 3300              		.loc 1 2929 0
 3301 0000 40B9     		cbnz	r0, .L304
 3302              	.LBB173:
 3303              	.LBB174:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3304              		.loc 2 195 0
 3305              		.syntax unified
 3306              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3307 0002 4FF05003 			mov r3, #80												
 3308 0006 83F31188 		msr basepri, r3											
 3309 000a BFF36F8F 		isb														
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 157


 3310 000e BFF34F8F 		dsb														
 3311              	
 3312              	@ 0 "" 2
 3313              	.LVL281:
 3314              		.thumb
 3315              		.syntax unified
 3316              	.L305:
 3317 0012 FEE7     		b	.L305
 3318              	.L304:
 3319 0014 0346     		mov	r3, r0
 3320              	.LBE174:
 3321              	.LBE173:
2933:../FreeRTOS/Source/tasks.c **** 
 3322              		.loc 1 2933 0
 3323 0016 0F48     		ldr	r0, .L310
 3324              	.LVL282:
 3325 0018 0068     		ldr	r0, [r0]
 3326 001a 40B9     		cbnz	r0, .L306
 3327              	.LBB175:
 3328              	.LBB176:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3329              		.loc 2 195 0
 3330              		.syntax unified
 3331              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3332 001c 4FF05003 			mov r3, #80												
 3333 0020 83F31188 		msr basepri, r3											
 3334 0024 BFF36F8F 		isb														
 3335 0028 BFF34F8F 		dsb														
 3336              	
 3337              	@ 0 "" 2
 3338              	.LVL283:
 3339              		.thumb
 3340              		.syntax unified
 3341              	.L307:
 3342 002c FEE7     		b	.L307
 3343              	.LVL284:
 3344              	.L306:
 3345              	.LBE176:
 3346              	.LBE175:
2928:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3347              		.loc 1 2928 0
 3348 002e 10B5     		push	{r4, lr}
 3349              	.LCFI32:
 3350              		.cfi_def_cfa_offset 8
 3351              		.cfi_offset 4, -8
 3352              		.cfi_offset 14, -4
 3353 0030 1846     		mov	r0, r3
 3354 0032 1446     		mov	r4, r2
 3355 0034 0B46     		mov	r3, r1
 3356              	.LVL285:
2938:../FreeRTOS/Source/tasks.c **** 
 3357              		.loc 1 2938 0
 3358 0036 084A     		ldr	r2, .L310+4
 3359              	.LVL286:
 3360 0038 1168     		ldr	r1, [r2]
 3361              	.LVL287:
 3362 003a 43F00043 		orr	r3, r3, #-2147483648
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 158


 3363              	.LVL288:
 3364 003e 8B61     		str	r3, [r1, #24]
2945:../FreeRTOS/Source/tasks.c **** 
 3365              		.loc 1 2945 0
 3366 0040 1168     		ldr	r1, [r2]
 3367 0042 1831     		adds	r1, r1, #24
 3368 0044 FFF7FEFF 		bl	vListInsertEnd
 3369              	.LVL289:
2947:../FreeRTOS/Source/tasks.c **** }
 3370              		.loc 1 2947 0
 3371 0048 0121     		movs	r1, #1
 3372 004a 2046     		mov	r0, r4
 3373 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3374              	.LVL290:
2948:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3375              		.loc 1 2948 0
 3376 0050 10BD     		pop	{r4, pc}
 3377              	.LVL291:
 3378              	.L311:
 3379 0052 00BF     		.align	2
 3380              	.L310:
 3381 0054 00000000 		.word	.LANCHOR16
 3382 0058 00000000 		.word	.LANCHOR10
 3383              		.cfi_endproc
 3384              	.LFE31:
 3386              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3387              		.align	1
 3388              		.global	vTaskPlaceOnEventListRestricted
 3389              		.syntax unified
 3390              		.thumb
 3391              		.thumb_func
 3392              		.fpu fpv4-sp-d16
 3394              	vTaskPlaceOnEventListRestricted:
 3395              	.LFB32:
2954:../FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 3396              		.loc 1 2954 0
 3397              		.cfi_startproc
 3398              		@ args = 0, pretend = 0, frame = 0
 3399              		@ frame_needed = 0, uses_anonymous_args = 0
 3400              	.LVL292:
 3401 0000 38B5     		push	{r3, r4, r5, lr}
 3402              	.LCFI33:
 3403              		.cfi_def_cfa_offset 16
 3404              		.cfi_offset 3, -16
 3405              		.cfi_offset 4, -12
 3406              		.cfi_offset 5, -8
 3407              		.cfi_offset 14, -4
2955:../FreeRTOS/Source/tasks.c **** 
 3408              		.loc 1 2955 0
 3409 0002 40B9     		cbnz	r0, .L313
 3410              	.LBB177:
 3411              	.LBB178:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3412              		.loc 2 195 0
 3413              		.syntax unified
 3414              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3415 0004 4FF05003 			mov r3, #80												
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 159


 3416 0008 83F31188 		msr basepri, r3											
 3417 000c BFF36F8F 		isb														
 3418 0010 BFF34F8F 		dsb														
 3419              	
 3420              	@ 0 "" 2
 3421              	.LVL293:
 3422              		.thumb
 3423              		.syntax unified
 3424              	.L314:
 3425 0014 FEE7     		b	.L314
 3426              	.L313:
 3427 0016 0C46     		mov	r4, r1
 3428 0018 1546     		mov	r5, r2
 3429              	.LBE178:
 3430              	.LBE177:
2967:../FreeRTOS/Source/tasks.c **** 
 3431              		.loc 1 2967 0
 3432 001a 064A     		ldr	r2, .L318
 3433              	.LVL294:
 3434 001c 1168     		ldr	r1, [r2]
 3435              	.LVL295:
 3436 001e 1831     		adds	r1, r1, #24
 3437 0020 FFF7FEFF 		bl	vListInsertEnd
 3438              	.LVL296:
2972:../FreeRTOS/Source/tasks.c **** 		{
 3439              		.loc 1 2972 0
 3440 0024 0DB1     		cbz	r5, .L315
2974:../FreeRTOS/Source/tasks.c **** 		}
 3441              		.loc 1 2974 0
 3442 0026 4FF0FF34 		mov	r4, #-1
 3443              	.LVL297:
 3444              	.L315:
2978:../FreeRTOS/Source/tasks.c **** 	}
 3445              		.loc 1 2978 0
 3446 002a 2946     		mov	r1, r5
 3447 002c 2046     		mov	r0, r4
 3448 002e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3449              	.LVL298:
2979:../FreeRTOS/Source/tasks.c **** 
 3450              		.loc 1 2979 0
 3451 0032 38BD     		pop	{r3, r4, r5, pc}
 3452              	.LVL299:
 3453              	.L319:
 3454              		.align	2
 3455              	.L318:
 3456 0034 00000000 		.word	.LANCHOR10
 3457              		.cfi_endproc
 3458              	.LFE32:
 3460              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3461              		.align	1
 3462              		.global	xTaskRemoveFromEventList
 3463              		.syntax unified
 3464              		.thumb
 3465              		.thumb_func
 3466              		.fpu fpv4-sp-d16
 3468              	xTaskRemoveFromEventList:
 3469              	.LFB33:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 160


2985:../FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3470              		.loc 1 2985 0
 3471              		.cfi_startproc
 3472              		@ args = 0, pretend = 0, frame = 0
 3473              		@ frame_needed = 0, uses_anonymous_args = 0
 3474              	.LVL300:
 3475 0000 38B5     		push	{r3, r4, r5, lr}
 3476              	.LCFI34:
 3477              		.cfi_def_cfa_offset 16
 3478              		.cfi_offset 3, -16
 3479              		.cfi_offset 4, -12
 3480              		.cfi_offset 5, -8
 3481              		.cfi_offset 14, -4
3002:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3482              		.loc 1 3002 0
 3483 0002 C368     		ldr	r3, [r0, #12]
 3484 0004 DC68     		ldr	r4, [r3, #12]
 3485              	.LVL301:
3003:../FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3486              		.loc 1 3003 0
 3487 0006 44B9     		cbnz	r4, .L321
 3488              	.LBB179:
 3489              	.LBB180:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3490              		.loc 2 195 0
 3491              		.syntax unified
 3492              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3493 0008 4FF05003 			mov r3, #80												
 3494 000c 83F31188 		msr basepri, r3											
 3495 0010 BFF36F8F 		isb														
 3496 0014 BFF34F8F 		dsb														
 3497              	
 3498              	@ 0 "" 2
 3499              	.LVL302:
 3500              		.thumb
 3501              		.syntax unified
 3502              	.L322:
 3503 0018 FEE7     		b	.L322
 3504              	.L321:
 3505              	.LBE180:
 3506              	.LBE179:
3004:../FreeRTOS/Source/tasks.c **** 
 3507              		.loc 1 3004 0
 3508 001a 04F11805 		add	r5, r4, #24
 3509 001e 2846     		mov	r0, r5
 3510              	.LVL303:
 3511 0020 FFF7FEFF 		bl	uxListRemove
 3512              	.LVL304:
3006:../FreeRTOS/Source/tasks.c **** 	{
 3513              		.loc 1 3006 0
 3514 0024 134B     		ldr	r3, .L328
 3515 0026 1B68     		ldr	r3, [r3]
 3516 0028 E3B9     		cbnz	r3, .L323
3008:../FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3517              		.loc 1 3008 0
 3518 002a 251D     		adds	r5, r4, #4
 3519 002c 2846     		mov	r0, r5
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 161


 3520 002e FFF7FEFF 		bl	uxListRemove
 3521              	.LVL305:
3009:../FreeRTOS/Source/tasks.c **** 	}
 3522              		.loc 1 3009 0
 3523 0032 E36A     		ldr	r3, [r4, #44]
 3524 0034 0122     		movs	r2, #1
 3525 0036 9A40     		lsls	r2, r2, r3
 3526 0038 0F49     		ldr	r1, .L328+4
 3527 003a 0868     		ldr	r0, [r1]
 3528 003c 0243     		orrs	r2, r2, r0
 3529 003e 0A60     		str	r2, [r1]
 3530 0040 03EB8303 		add	r3, r3, r3, lsl #2
 3531 0044 9A00     		lsls	r2, r3, #2
 3532 0046 2946     		mov	r1, r5
 3533 0048 0C48     		ldr	r0, .L328+8
 3534 004a 1044     		add	r0, r0, r2
 3535 004c FFF7FEFF 		bl	vListInsertEnd
 3536              	.LVL306:
 3537              	.L324:
3018:../FreeRTOS/Source/tasks.c **** 	{
 3538              		.loc 1 3018 0
 3539 0050 E26A     		ldr	r2, [r4, #44]
 3540 0052 0B4B     		ldr	r3, .L328+12
 3541 0054 1B68     		ldr	r3, [r3]
 3542 0056 DB6A     		ldr	r3, [r3, #44]
 3543 0058 9A42     		cmp	r2, r3
 3544 005a 08D9     		bls	.L326
 3545              	.LVL307:
3027:../FreeRTOS/Source/tasks.c **** 	}
 3546              		.loc 1 3027 0
 3547 005c 0120     		movs	r0, #1
 3548 005e 094B     		ldr	r3, .L328+16
 3549 0060 1860     		str	r0, [r3]
 3550              	.LVL308:
 3551              	.L320:
3049:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3552              		.loc 1 3049 0
 3553 0062 38BD     		pop	{r3, r4, r5, pc}
 3554              	.LVL309:
 3555              	.L323:
3015:../FreeRTOS/Source/tasks.c **** 	}
 3556              		.loc 1 3015 0
 3557 0064 2946     		mov	r1, r5
 3558 0066 0848     		ldr	r0, .L328+20
 3559 0068 FFF7FEFF 		bl	vListInsertEnd
 3560              	.LVL310:
 3561 006c F0E7     		b	.L324
 3562              	.L326:
3031:../FreeRTOS/Source/tasks.c **** 	}
 3563              		.loc 1 3031 0
 3564 006e 0020     		movs	r0, #0
 3565              	.LVL311:
3048:../FreeRTOS/Source/tasks.c **** }
 3566              		.loc 1 3048 0
 3567 0070 F7E7     		b	.L320
 3568              	.L329:
 3569 0072 00BF     		.align	2
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 162


 3570              	.L328:
 3571 0074 00000000 		.word	.LANCHOR16
 3572 0078 00000000 		.word	.LANCHOR13
 3573 007c 00000000 		.word	.LANCHOR4
 3574 0080 00000000 		.word	.LANCHOR10
 3575 0084 00000000 		.word	.LANCHOR20
 3576 0088 00000000 		.word	.LANCHOR1
 3577              		.cfi_endproc
 3578              	.LFE33:
 3580              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3581              		.align	1
 3582              		.global	vTaskRemoveFromUnorderedEventList
 3583              		.syntax unified
 3584              		.thumb
 3585              		.thumb_func
 3586              		.fpu fpv4-sp-d16
 3588              	vTaskRemoveFromUnorderedEventList:
 3589              	.LFB34:
3053:../FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3590              		.loc 1 3053 0
 3591              		.cfi_startproc
 3592              		@ args = 0, pretend = 0, frame = 0
 3593              		@ frame_needed = 0, uses_anonymous_args = 0
 3594              	.LVL312:
 3595 0000 38B5     		push	{r3, r4, r5, lr}
 3596              	.LCFI35:
 3597              		.cfi_def_cfa_offset 16
 3598              		.cfi_offset 3, -16
 3599              		.cfi_offset 4, -12
 3600              		.cfi_offset 5, -8
 3601              		.cfi_offset 14, -4
3058:../FreeRTOS/Source/tasks.c **** 
 3602              		.loc 1 3058 0
 3603 0002 1C4B     		ldr	r3, .L338
 3604 0004 1B68     		ldr	r3, [r3]
 3605 0006 43B9     		cbnz	r3, .L331
 3606              	.LBB181:
 3607              	.LBB182:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3608              		.loc 2 195 0
 3609              		.syntax unified
 3610              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3611 0008 4FF05003 			mov r3, #80												
 3612 000c 83F31188 		msr basepri, r3											
 3613 0010 BFF36F8F 		isb														
 3614 0014 BFF34F8F 		dsb														
 3615              	
 3616              	@ 0 "" 2
 3617              	.LVL313:
 3618              		.thumb
 3619              		.syntax unified
 3620              	.L332:
 3621 0018 FEE7     		b	.L332
 3622              	.L331:
 3623              	.LBE182:
 3624              	.LBE181:
3061:../FreeRTOS/Source/tasks.c **** 
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 163


 3625              		.loc 1 3061 0
 3626 001a 41F00041 		orr	r1, r1, #-2147483648
 3627              	.LVL314:
 3628 001e 0160     		str	r1, [r0]
3065:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3629              		.loc 1 3065 0
 3630 0020 C468     		ldr	r4, [r0, #12]
 3631              	.LVL315:
3066:../FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3632              		.loc 1 3066 0
 3633 0022 F4B1     		cbz	r4, .L337
3067:../FreeRTOS/Source/tasks.c **** 
 3634              		.loc 1 3067 0
 3635 0024 FFF7FEFF 		bl	uxListRemove
 3636              	.LVL316:
3072:../FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3637              		.loc 1 3072 0
 3638 0028 251D     		adds	r5, r4, #4
 3639 002a 2846     		mov	r0, r5
 3640 002c FFF7FEFF 		bl	uxListRemove
 3641              	.LVL317:
3073:../FreeRTOS/Source/tasks.c **** 
 3642              		.loc 1 3073 0
 3643 0030 E36A     		ldr	r3, [r4, #44]
 3644 0032 0122     		movs	r2, #1
 3645 0034 9A40     		lsls	r2, r2, r3
 3646 0036 1049     		ldr	r1, .L338+4
 3647 0038 0868     		ldr	r0, [r1]
 3648 003a 0243     		orrs	r2, r2, r0
 3649 003c 0A60     		str	r2, [r1]
 3650 003e 03EB8303 		add	r3, r3, r3, lsl #2
 3651 0042 9A00     		lsls	r2, r3, #2
 3652 0044 2946     		mov	r1, r5
 3653 0046 0D48     		ldr	r0, .L338+8
 3654 0048 1044     		add	r0, r0, r2
 3655 004a FFF7FEFF 		bl	vListInsertEnd
 3656              	.LVL318:
3075:../FreeRTOS/Source/tasks.c **** 	{
 3657              		.loc 1 3075 0
 3658 004e E26A     		ldr	r2, [r4, #44]
 3659 0050 0B4B     		ldr	r3, .L338+12
 3660 0052 1B68     		ldr	r3, [r3]
 3661 0054 DB6A     		ldr	r3, [r3, #44]
 3662 0056 9A42     		cmp	r2, r3
 3663 0058 02D9     		bls	.L330
3081:../FreeRTOS/Source/tasks.c **** 	}
 3664              		.loc 1 3081 0
 3665 005a 0A4B     		ldr	r3, .L338+16
 3666 005c 0122     		movs	r2, #1
 3667 005e 1A60     		str	r2, [r3]
 3668              	.L330:
3083:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3669              		.loc 1 3083 0
 3670 0060 38BD     		pop	{r3, r4, r5, pc}
 3671              	.LVL319:
 3672              	.L337:
 3673              	.LBB183:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 164


 3674              	.LBB184:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3675              		.loc 2 195 0
 3676              		.syntax unified
 3677              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3678 0062 4FF05003 			mov r3, #80												
 3679 0066 83F31188 		msr basepri, r3											
 3680 006a BFF36F8F 		isb														
 3681 006e BFF34F8F 		dsb														
 3682              	
 3683              	@ 0 "" 2
 3684              	.LVL320:
 3685              		.thumb
 3686              		.syntax unified
 3687              	.L334:
 3688 0072 FEE7     		b	.L334
 3689              	.L339:
 3690              		.align	2
 3691              	.L338:
 3692 0074 00000000 		.word	.LANCHOR16
 3693 0078 00000000 		.word	.LANCHOR13
 3694 007c 00000000 		.word	.LANCHOR4
 3695 0080 00000000 		.word	.LANCHOR10
 3696 0084 00000000 		.word	.LANCHOR20
 3697              	.LBE184:
 3698              	.LBE183:
 3699              		.cfi_endproc
 3700              	.LFE34:
 3702              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3703              		.align	1
 3704              		.global	vTaskSetTimeOutState
 3705              		.syntax unified
 3706              		.thumb
 3707              		.thumb_func
 3708              		.fpu fpv4-sp-d16
 3710              	vTaskSetTimeOutState:
 3711              	.LFB35:
3087:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3712              		.loc 1 3087 0
 3713              		.cfi_startproc
 3714              		@ args = 0, pretend = 0, frame = 0
 3715              		@ frame_needed = 0, uses_anonymous_args = 0
 3716              	.LVL321:
3088:../FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3717              		.loc 1 3088 0
 3718 0000 40B9     		cbnz	r0, .L341
 3719              	.LBB185:
 3720              	.LBB186:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3721              		.loc 2 195 0
 3722              		.syntax unified
 3723              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3724 0002 4FF05003 			mov r3, #80												
 3725 0006 83F31188 		msr basepri, r3											
 3726 000a BFF36F8F 		isb														
 3727 000e BFF34F8F 		dsb														
 3728              	
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 165


 3729              	@ 0 "" 2
 3730              	.LVL322:
 3731              		.thumb
 3732              		.syntax unified
 3733              	.L342:
 3734 0012 FEE7     		b	.L342
 3735              	.L341:
 3736              	.LBE186:
 3737              	.LBE185:
3087:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3738              		.loc 1 3087 0
 3739 0014 10B5     		push	{r4, lr}
 3740              	.LCFI36:
 3741              		.cfi_def_cfa_offset 8
 3742              		.cfi_offset 4, -8
 3743              		.cfi_offset 14, -4
 3744 0016 0446     		mov	r4, r0
3089:../FreeRTOS/Source/tasks.c **** 	{
 3745              		.loc 1 3089 0
 3746 0018 FFF7FEFF 		bl	vPortEnterCritical
 3747              	.LVL323:
3091:../FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3748              		.loc 1 3091 0
 3749 001c 044B     		ldr	r3, .L345
 3750 001e 1B68     		ldr	r3, [r3]
 3751 0020 2360     		str	r3, [r4]
3092:../FreeRTOS/Source/tasks.c **** 	}
 3752              		.loc 1 3092 0
 3753 0022 044B     		ldr	r3, .L345+4
 3754 0024 1B68     		ldr	r3, [r3]
 3755 0026 6360     		str	r3, [r4, #4]
3094:../FreeRTOS/Source/tasks.c **** }
 3756              		.loc 1 3094 0
 3757 0028 FFF7FEFF 		bl	vPortExitCritical
 3758              	.LVL324:
3095:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3759              		.loc 1 3095 0
 3760 002c 10BD     		pop	{r4, pc}
 3761              	.LVL325:
 3762              	.L346:
 3763 002e 00BF     		.align	2
 3764              	.L345:
 3765 0030 00000000 		.word	.LANCHOR18
 3766 0034 00000000 		.word	.LANCHOR15
 3767              		.cfi_endproc
 3768              	.LFE35:
 3770              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
 3771              		.align	1
 3772              		.global	vTaskInternalSetTimeOutState
 3773              		.syntax unified
 3774              		.thumb
 3775              		.thumb_func
 3776              		.fpu fpv4-sp-d16
 3778              	vTaskInternalSetTimeOutState:
 3779              	.LFB36:
3099:../FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3780              		.loc 1 3099 0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 166


 3781              		.cfi_startproc
 3782              		@ args = 0, pretend = 0, frame = 0
 3783              		@ frame_needed = 0, uses_anonymous_args = 0
 3784              		@ link register save eliminated.
 3785              	.LVL326:
3101:../FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3786              		.loc 1 3101 0
 3787 0000 034B     		ldr	r3, .L348
 3788 0002 1B68     		ldr	r3, [r3]
 3789 0004 0360     		str	r3, [r0]
3102:../FreeRTOS/Source/tasks.c **** }
 3790              		.loc 1 3102 0
 3791 0006 034B     		ldr	r3, .L348+4
 3792 0008 1B68     		ldr	r3, [r3]
 3793 000a 4360     		str	r3, [r0, #4]
3103:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3794              		.loc 1 3103 0
 3795 000c 7047     		bx	lr
 3796              	.L349:
 3797 000e 00BF     		.align	2
 3798              	.L348:
 3799 0010 00000000 		.word	.LANCHOR18
 3800 0014 00000000 		.word	.LANCHOR15
 3801              		.cfi_endproc
 3802              	.LFE36:
 3804              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3805              		.align	1
 3806              		.global	xTaskCheckForTimeOut
 3807              		.syntax unified
 3808              		.thumb
 3809              		.thumb_func
 3810              		.fpu fpv4-sp-d16
 3812              	xTaskCheckForTimeOut:
 3813              	.LFB37:
3107:../FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3814              		.loc 1 3107 0
 3815              		.cfi_startproc
 3816              		@ args = 0, pretend = 0, frame = 0
 3817              		@ frame_needed = 0, uses_anonymous_args = 0
 3818              	.LVL327:
 3819 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3820              	.LCFI37:
 3821              		.cfi_def_cfa_offset 24
 3822              		.cfi_offset 3, -24
 3823              		.cfi_offset 4, -20
 3824              		.cfi_offset 5, -16
 3825              		.cfi_offset 6, -12
 3826              		.cfi_offset 7, -8
 3827              		.cfi_offset 14, -4
3110:../FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3828              		.loc 1 3110 0
 3829 0002 50B1     		cbz	r0, .L361
 3830 0004 0546     		mov	r5, r0
3111:../FreeRTOS/Source/tasks.c **** 
 3831              		.loc 1 3111 0
 3832 0006 89B9     		cbnz	r1, .L353
 3833              	.LBB187:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 167


 3834              	.LBB188:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3835              		.loc 2 195 0
 3836              		.syntax unified
 3837              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3838 0008 4FF05003 			mov r3, #80												
 3839 000c 83F31188 		msr basepri, r3											
 3840 0010 BFF36F8F 		isb														
 3841 0014 BFF34F8F 		dsb														
 3842              	
 3843              	@ 0 "" 2
 3844              	.LVL328:
 3845              		.thumb
 3846              		.syntax unified
 3847              	.L354:
 3848 0018 FEE7     		b	.L354
 3849              	.L361:
 3850              	.LBE188:
 3851              	.LBE187:
 3852              	.LBB189:
 3853              	.LBB190:
 3854              		.syntax unified
 3855              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3856 001a 4FF05003 			mov r3, #80												
 3857 001e 83F31188 		msr basepri, r3											
 3858 0022 BFF36F8F 		isb														
 3859 0026 BFF34F8F 		dsb														
 3860              	
 3861              	@ 0 "" 2
 3862              	.LVL329:
 3863              		.thumb
 3864              		.syntax unified
 3865              	.L352:
 3866 002a FEE7     		b	.L352
 3867              	.L353:
 3868 002c 0C46     		mov	r4, r1
 3869              	.LBE190:
 3870              	.LBE189:
3113:../FreeRTOS/Source/tasks.c **** 	{
 3871              		.loc 1 3113 0
 3872 002e FFF7FEFF 		bl	vPortEnterCritical
 3873              	.LVL330:
 3874              	.LBB191:
3116:../FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3875              		.loc 1 3116 0
 3876 0032 114B     		ldr	r3, .L363
 3877 0034 1968     		ldr	r1, [r3]
 3878              	.LVL331:
3117:../FreeRTOS/Source/tasks.c **** 
 3879              		.loc 1 3117 0
 3880 0036 6868     		ldr	r0, [r5, #4]
 3881 0038 0A1A     		subs	r2, r1, r0
 3882              	.LVL332:
3131:../FreeRTOS/Source/tasks.c **** 			{
 3883              		.loc 1 3131 0
 3884 003a 2368     		ldr	r3, [r4]
 3885 003c B3F1FF3F 		cmp	r3, #-1
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 168


 3886 0040 16D0     		beq	.L358
3141:../FreeRTOS/Source/tasks.c **** 		{
 3887              		.loc 1 3141 0
 3888 0042 2F68     		ldr	r7, [r5]
 3889 0044 0D4E     		ldr	r6, .L363+4
 3890 0046 3668     		ldr	r6, [r6]
 3891 0048 B742     		cmp	r7, r6
 3892 004a 01D0     		beq	.L356
3141:../FreeRTOS/Source/tasks.c **** 		{
 3893              		.loc 1 3141 0 is_stmt 0 discriminator 1
 3894 004c 8842     		cmp	r0, r1
 3895 004e 11D9     		bls	.L359
 3896              	.L356:
3150:../FreeRTOS/Source/tasks.c **** 		{
 3897              		.loc 1 3150 0 is_stmt 1
 3898 0050 9342     		cmp	r3, r2
 3899 0052 03D8     		bhi	.L362
3159:../FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 3900              		.loc 1 3159 0
 3901 0054 0023     		movs	r3, #0
 3902 0056 2360     		str	r3, [r4]
 3903              	.LVL333:
3160:../FreeRTOS/Source/tasks.c **** 		}
 3904              		.loc 1 3160 0
 3905 0058 0124     		movs	r4, #1
 3906              	.LVL334:
 3907 005a 05E0     		b	.L355
 3908              	.LVL335:
 3909              	.L362:
3153:../FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 3910              		.loc 1 3153 0
 3911 005c 9B1A     		subs	r3, r3, r2
 3912 005e 2360     		str	r3, [r4]
3154:../FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 3913              		.loc 1 3154 0
 3914 0060 2846     		mov	r0, r5
 3915 0062 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 3916              	.LVL336:
3155:../FreeRTOS/Source/tasks.c **** 		}
 3917              		.loc 1 3155 0
 3918 0066 0024     		movs	r4, #0
 3919              	.LVL337:
 3920              	.L355:
 3921              	.LBE191:
3163:../FreeRTOS/Source/tasks.c **** 
 3922              		.loc 1 3163 0
 3923 0068 FFF7FEFF 		bl	vPortExitCritical
 3924              	.LVL338:
3166:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3925              		.loc 1 3166 0
 3926 006c 2046     		mov	r0, r4
 3927 006e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3928              	.LVL339:
 3929              	.L358:
 3930              	.LBB192:
3136:../FreeRTOS/Source/tasks.c **** 			}
 3931              		.loc 1 3136 0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 169


 3932 0070 0024     		movs	r4, #0
 3933              	.LVL340:
 3934 0072 F9E7     		b	.L355
 3935              	.LVL341:
 3936              	.L359:
3148:../FreeRTOS/Source/tasks.c **** 		}
 3937              		.loc 1 3148 0
 3938 0074 0124     		movs	r4, #1
 3939              	.LVL342:
 3940 0076 F7E7     		b	.L355
 3941              	.L364:
 3942              		.align	2
 3943              	.L363:
 3944 0078 00000000 		.word	.LANCHOR15
 3945 007c 00000000 		.word	.LANCHOR18
 3946              	.LBE192:
 3947              		.cfi_endproc
 3948              	.LFE37:
 3950              		.section	.text.vTaskMissedYield,"ax",%progbits
 3951              		.align	1
 3952              		.global	vTaskMissedYield
 3953              		.syntax unified
 3954              		.thumb
 3955              		.thumb_func
 3956              		.fpu fpv4-sp-d16
 3958              	vTaskMissedYield:
 3959              	.LFB38:
3170:../FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 3960              		.loc 1 3170 0
 3961              		.cfi_startproc
 3962              		@ args = 0, pretend = 0, frame = 0
 3963              		@ frame_needed = 0, uses_anonymous_args = 0
 3964              		@ link register save eliminated.
3171:../FreeRTOS/Source/tasks.c **** }
 3965              		.loc 1 3171 0
 3966 0000 014B     		ldr	r3, .L366
 3967 0002 0122     		movs	r2, #1
 3968 0004 1A60     		str	r2, [r3]
3172:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3969              		.loc 1 3172 0
 3970 0006 7047     		bx	lr
 3971              	.L367:
 3972              		.align	2
 3973              	.L366:
 3974 0008 00000000 		.word	.LANCHOR20
 3975              		.cfi_endproc
 3976              	.LFE38:
 3978              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 3979              		.align	1
 3980              		.global	uxTaskGetTaskNumber
 3981              		.syntax unified
 3982              		.thumb
 3983              		.thumb_func
 3984              		.fpu fpv4-sp-d16
 3986              	uxTaskGetTaskNumber:
 3987              	.LFB39:
3178:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 170


 3988              		.loc 1 3178 0
 3989              		.cfi_startproc
 3990              		@ args = 0, pretend = 0, frame = 0
 3991              		@ frame_needed = 0, uses_anonymous_args = 0
 3992              		@ link register save eliminated.
 3993              	.LVL343:
3182:../FreeRTOS/Source/tasks.c **** 		{
 3994              		.loc 1 3182 0
 3995 0000 08B1     		cbz	r0, .L370
 3996              	.LVL344:
3185:../FreeRTOS/Source/tasks.c **** 		}
 3997              		.loc 1 3185 0
 3998 0002 406C     		ldr	r0, [r0, #68]
 3999              	.LVL345:
 4000 0004 7047     		bx	lr
 4001              	.LVL346:
 4002              	.L370:
3189:../FreeRTOS/Source/tasks.c **** 		}
 4003              		.loc 1 3189 0
 4004 0006 0020     		movs	r0, #0
 4005              	.LVL347:
3193:../FreeRTOS/Source/tasks.c **** 
 4006              		.loc 1 3193 0
 4007 0008 7047     		bx	lr
 4008              		.cfi_endproc
 4009              	.LFE39:
 4011              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4012              		.align	1
 4013              		.global	vTaskSetTaskNumber
 4014              		.syntax unified
 4015              		.thumb
 4016              		.thumb_func
 4017              		.fpu fpv4-sp-d16
 4019              	vTaskSetTaskNumber:
 4020              	.LFB40:
3201:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4021              		.loc 1 3201 0
 4022              		.cfi_startproc
 4023              		@ args = 0, pretend = 0, frame = 0
 4024              		@ frame_needed = 0, uses_anonymous_args = 0
 4025              		@ link register save eliminated.
 4026              	.LVL348:
3204:../FreeRTOS/Source/tasks.c **** 		{
 4027              		.loc 1 3204 0
 4028 0000 00B1     		cbz	r0, .L371
 4029              	.LVL349:
3207:../FreeRTOS/Source/tasks.c **** 		}
 4030              		.loc 1 3207 0
 4031 0002 4164     		str	r1, [r0, #68]
 4032              	.LVL350:
 4033              	.L371:
3209:../FreeRTOS/Source/tasks.c **** 
 4034              		.loc 1 3209 0
 4035 0004 7047     		bx	lr
 4036              		.cfi_endproc
 4037              	.LFE40:
 4039              		.section	.text.vTaskGetInfo,"ax",%progbits
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 171


 4040              		.align	1
 4041              		.global	vTaskGetInfo
 4042              		.syntax unified
 4043              		.thumb
 4044              		.thumb_func
 4045              		.fpu fpv4-sp-d16
 4047              	vTaskGetInfo:
 4048              	.LFB44:
3500:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4049              		.loc 1 3500 0
 4050              		.cfi_startproc
 4051              		@ args = 0, pretend = 0, frame = 0
 4052              		@ frame_needed = 0, uses_anonymous_args = 0
 4053              	.LVL351:
 4054 0000 70B5     		push	{r4, r5, r6, lr}
 4055              	.LCFI38:
 4056              		.cfi_def_cfa_offset 16
 4057              		.cfi_offset 4, -16
 4058              		.cfi_offset 5, -12
 4059              		.cfi_offset 6, -8
 4060              		.cfi_offset 14, -4
 4061 0002 0C46     		mov	r4, r1
 4062 0004 1646     		mov	r6, r2
3504:../FreeRTOS/Source/tasks.c **** 
 4063              		.loc 1 3504 0
 4064 0006 0546     		mov	r5, r0
 4065 0008 D0B1     		cbz	r0, .L382
 4066              	.LVL352:
 4067              	.L374:
3506:../FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4068              		.loc 1 3506 0 discriminator 4
 4069 000a 2560     		str	r5, [r4]
3507:../FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4070              		.loc 1 3507 0 discriminator 4
 4071 000c 05F13402 		add	r2, r5, #52
 4072 0010 6260     		str	r2, [r4, #4]
3508:../FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4073              		.loc 1 3508 0 discriminator 4
 4074 0012 EA6A     		ldr	r2, [r5, #44]
 4075 0014 2261     		str	r2, [r4, #16]
3509:../FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4076              		.loc 1 3509 0 discriminator 4
 4077 0016 2A6B     		ldr	r2, [r5, #48]
 4078 0018 E261     		str	r2, [r4, #28]
3510:../FreeRTOS/Source/tasks.c **** 
 4079              		.loc 1 3510 0 discriminator 4
 4080 001a 2A6C     		ldr	r2, [r5, #64]
 4081 001c A260     		str	r2, [r4, #8]
3514:../FreeRTOS/Source/tasks.c **** 		}
 4082              		.loc 1 3514 0 discriminator 4
 4083 001e AA6C     		ldr	r2, [r5, #72]
 4084 0020 6261     		str	r2, [r4, #20]
3528:../FreeRTOS/Source/tasks.c **** 		}
 4085              		.loc 1 3528 0 discriminator 4
 4086 0022 0022     		movs	r2, #0
 4087 0024 A261     		str	r2, [r4, #24]
3535:../FreeRTOS/Source/tasks.c **** 		{
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 172


 4088              		.loc 1 3535 0 discriminator 4
 4089 0026 052B     		cmp	r3, #5
 4090 0028 19D0     		beq	.L375
3537:../FreeRTOS/Source/tasks.c **** 			{
 4091              		.loc 1 3537 0
 4092 002a 124A     		ldr	r2, .L386
 4093 002c 1268     		ldr	r2, [r2]
 4094 002e AA42     		cmp	r2, r5
 4095 0030 09D0     		beq	.L383
3543:../FreeRTOS/Source/tasks.c **** 
 4096              		.loc 1 3543 0
 4097 0032 2373     		strb	r3, [r4, #12]
3550:../FreeRTOS/Source/tasks.c **** 					{
 4098              		.loc 1 3550 0
 4099 0034 032B     		cmp	r3, #3
 4100 0036 09D0     		beq	.L384
 4101              	.LVL353:
 4102              	.L377:
3572:../FreeRTOS/Source/tasks.c **** 		{
 4103              		.loc 1 3572 0
 4104 0038 B6B9     		cbnz	r6, .L385
3586:../FreeRTOS/Source/tasks.c **** 		}
 4105              		.loc 1 3586 0
 4106 003a 0023     		movs	r3, #0
 4107 003c 2384     		strh	r3, [r4, #32]	@ movhi
 4108              	.L373:
3588:../FreeRTOS/Source/tasks.c **** 
 4109              		.loc 1 3588 0
 4110 003e 70BD     		pop	{r4, r5, r6, pc}
 4111              	.LVL354:
 4112              	.L382:
3504:../FreeRTOS/Source/tasks.c **** 
 4113              		.loc 1 3504 0 discriminator 1
 4114 0040 0C4A     		ldr	r2, .L386
 4115              	.LVL355:
 4116 0042 1568     		ldr	r5, [r2]
 4117              	.LVL356:
 4118 0044 E1E7     		b	.L374
 4119              	.LVL357:
 4120              	.L383:
3539:../FreeRTOS/Source/tasks.c **** 			}
 4121              		.loc 1 3539 0
 4122 0046 0023     		movs	r3, #0
 4123              	.LVL358:
 4124 0048 2373     		strb	r3, [r4, #12]
 4125 004a F5E7     		b	.L377
 4126              	.LVL359:
 4127              	.L384:
3552:../FreeRTOS/Source/tasks.c **** 						{
 4128              		.loc 1 3552 0
 4129 004c FFF7FEFF 		bl	vTaskSuspendAll
 4130              	.LVL360:
3554:../FreeRTOS/Source/tasks.c **** 							{
 4131              		.loc 1 3554 0
 4132 0050 AB6A     		ldr	r3, [r5, #40]
 4133 0052 0BB1     		cbz	r3, .L378
3556:../FreeRTOS/Source/tasks.c **** 							}
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 173


 4134              		.loc 1 3556 0
 4135 0054 0223     		movs	r3, #2
 4136 0056 2373     		strb	r3, [r4, #12]
 4137              	.L378:
3559:../FreeRTOS/Source/tasks.c **** 					}
 4138              		.loc 1 3559 0
 4139 0058 FFF7FEFF 		bl	xTaskResumeAll
 4140              	.LVL361:
 4141 005c ECE7     		b	.L377
 4142              	.LVL362:
 4143              	.L375:
3567:../FreeRTOS/Source/tasks.c **** 		}
 4144              		.loc 1 3567 0
 4145 005e 2846     		mov	r0, r5
 4146 0060 FFF7FEFF 		bl	eTaskGetState
 4147              	.LVL363:
 4148 0064 2073     		strb	r0, [r4, #12]
 4149 0066 E7E7     		b	.L377
 4150              	.L385:
3580:../FreeRTOS/Source/tasks.c **** 			}
 4151              		.loc 1 3580 0
 4152 0068 286B     		ldr	r0, [r5, #48]
 4153 006a FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4154              	.LVL364:
 4155 006e 2084     		strh	r0, [r4, #32]	@ movhi
 4156 0070 E5E7     		b	.L373
 4157              	.L387:
 4158 0072 00BF     		.align	2
 4159              	.L386:
 4160 0074 00000000 		.word	.LANCHOR10
 4161              		.cfi_endproc
 4162              	.LFE44:
 4164              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4165              		.align	1
 4166              		.syntax unified
 4167              		.thumb
 4168              		.thumb_func
 4169              		.fpu fpv4-sp-d16
 4171              	prvListTasksWithinSingleList:
 4172              	.LFB45:
3596:../FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 4173              		.loc 1 3596 0
 4174              		.cfi_startproc
 4175              		@ args = 0, pretend = 0, frame = 0
 4176              		@ frame_needed = 0, uses_anonymous_args = 0
 4177              	.LVL365:
 4178 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4179              	.LCFI39:
 4180              		.cfi_def_cfa_offset 32
 4181              		.cfi_offset 4, -32
 4182              		.cfi_offset 5, -28
 4183              		.cfi_offset 6, -24
 4184              		.cfi_offset 7, -20
 4185              		.cfi_offset 8, -16
 4186              		.cfi_offset 9, -12
 4187              		.cfi_offset 10, -8
 4188              		.cfi_offset 14, -4
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 174


 4189              	.LVL366:
3600:../FreeRTOS/Source/tasks.c **** 		{
 4190              		.loc 1 3600 0
 4191 0004 0B68     		ldr	r3, [r1]
 4192 0006 3BB3     		cbz	r3, .L393
 4193              	.LVL367:
 4194              	.LBB193:
3602:../FreeRTOS/Source/tasks.c **** 
 4195              		.loc 1 3602 0
 4196 0008 4B68     		ldr	r3, [r1, #4]
 4197 000a 5B68     		ldr	r3, [r3, #4]
 4198 000c 4B60     		str	r3, [r1, #4]
 4199 000e 01F10809 		add	r9, r1, #8
 4200 0012 4B45     		cmp	r3, r9
 4201 0014 07D0     		beq	.L395
 4202              	.L390:
 4203 0016 9046     		mov	r8, r2
 4204 0018 0C46     		mov	r4, r1
 4205 001a 0746     		mov	r7, r0
3602:../FreeRTOS/Source/tasks.c **** 
 4206              		.loc 1 3602 0 is_stmt 0 discriminator 3
 4207 001c 4B68     		ldr	r3, [r1, #4]
 4208 001e D3F80CA0 		ldr	r10, [r3, #12]
 4209              	.LVL368:
 4210              	.LBE193:
3598:../FreeRTOS/Source/tasks.c **** 
 4211              		.loc 1 3598 0 is_stmt 1 discriminator 3
 4212 0022 0025     		movs	r5, #0
 4213 0024 10E0     		b	.L392
 4214              	.LVL369:
 4215              	.L395:
 4216              	.LBB194:
3602:../FreeRTOS/Source/tasks.c **** 
 4217              		.loc 1 3602 0 discriminator 1
 4218 0026 5B68     		ldr	r3, [r3, #4]
 4219 0028 4B60     		str	r3, [r1, #4]
 4220 002a F4E7     		b	.L390
 4221              	.LVL370:
 4222              	.L391:
 4223              	.LBE194:
 4224              	.LBB195:
3610:../FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4225              		.loc 1 3610 0 discriminator 3
 4226 002c 6368     		ldr	r3, [r4, #4]
 4227 002e DE68     		ldr	r6, [r3, #12]
 4228              	.LVL371:
 4229              	.LBE195:
3611:../FreeRTOS/Source/tasks.c **** 				uxTask++;
 4230              		.loc 1 3611 0 discriminator 3
 4231 0030 05EBC503 		add	r3, r5, r5, lsl #3
 4232 0034 9900     		lsls	r1, r3, #2
 4233 0036 4346     		mov	r3, r8
 4234 0038 0122     		movs	r2, #1
 4235 003a 3944     		add	r1, r1, r7
 4236 003c 3046     		mov	r0, r6
 4237 003e FFF7FEFF 		bl	vTaskGetInfo
 4238              	.LVL372:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 175


3612:../FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4239              		.loc 1 3612 0 discriminator 3
 4240 0042 0135     		adds	r5, r5, #1
 4241              	.LVL373:
3613:../FreeRTOS/Source/tasks.c **** 		}
 4242              		.loc 1 3613 0 discriminator 3
 4243 0044 B245     		cmp	r10, r6
 4244 0046 08D0     		beq	.L388
 4245              	.LVL374:
 4246              	.L392:
 4247              	.LBB196:
3610:../FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4248              		.loc 1 3610 0
 4249 0048 6368     		ldr	r3, [r4, #4]
 4250 004a 5B68     		ldr	r3, [r3, #4]
 4251 004c 6360     		str	r3, [r4, #4]
 4252 004e 9945     		cmp	r9, r3
 4253 0050 ECD1     		bne	.L391
3610:../FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4254              		.loc 1 3610 0 is_stmt 0 discriminator 1
 4255 0052 5B68     		ldr	r3, [r3, #4]
 4256 0054 6360     		str	r3, [r4, #4]
 4257 0056 E9E7     		b	.L391
 4258              	.LVL375:
 4259              	.L393:
 4260              	.LBE196:
3598:../FreeRTOS/Source/tasks.c **** 
 4261              		.loc 1 3598 0 is_stmt 1
 4262 0058 0025     		movs	r5, #0
 4263              	.LVL376:
 4264              	.L388:
3621:../FreeRTOS/Source/tasks.c **** 
 4265              		.loc 1 3621 0
 4266 005a 2846     		mov	r0, r5
 4267 005c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4268              		.cfi_endproc
 4269              	.LFE45:
 4271              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 4272              		.align	1
 4273              		.global	uxTaskGetSystemState
 4274              		.syntax unified
 4275              		.thumb
 4276              		.thumb_func
 4277              		.fpu fpv4-sp-d16
 4279              	uxTaskGetSystemState:
 4280              	.LFB27:
2410:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4281              		.loc 1 2410 0
 4282              		.cfi_startproc
 4283              		@ args = 0, pretend = 0, frame = 0
 4284              		@ frame_needed = 0, uses_anonymous_args = 0
 4285              	.LVL377:
 4286 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4287              	.LCFI40:
 4288              		.cfi_def_cfa_offset 24
 4289              		.cfi_offset 3, -24
 4290              		.cfi_offset 4, -20
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 176


 4291              		.cfi_offset 5, -16
 4292              		.cfi_offset 6, -12
 4293              		.cfi_offset 7, -8
 4294              		.cfi_offset 14, -4
 4295 0002 0746     		mov	r7, r0
 4296 0004 0C46     		mov	r4, r1
 4297 0006 1646     		mov	r6, r2
 4298              	.LVL378:
2413:../FreeRTOS/Source/tasks.c **** 		{
 4299              		.loc 1 2413 0
 4300 0008 FFF7FEFF 		bl	vTaskSuspendAll
 4301              	.LVL379:
2416:../FreeRTOS/Source/tasks.c **** 			{
 4302              		.loc 1 2416 0
 4303 000c 224B     		ldr	r3, .L401
 4304 000e 1B68     		ldr	r3, [r3]
 4305 0010 A342     		cmp	r3, r4
 4306 0012 3BD8     		bhi	.L399
2411:../FreeRTOS/Source/tasks.c **** 
 4307              		.loc 1 2411 0
 4308 0014 0625     		movs	r5, #6
 4309 0016 0024     		movs	r4, #0
 4310              	.LVL380:
 4311              	.L398:
2422:../FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 4312              		.loc 1 2422 0 discriminator 1
 4313 0018 013D     		subs	r5, r5, #1
 4314              	.LVL381:
2423:../FreeRTOS/Source/tasks.c **** 
 4315              		.loc 1 2423 0 discriminator 1
 4316 001a 04EBC403 		add	r3, r4, r4, lsl #3
 4317 001e 9800     		lsls	r0, r3, #2
 4318 0020 05EB8502 		add	r2, r5, r5, lsl #2
 4319 0024 9300     		lsls	r3, r2, #2
 4320 0026 0122     		movs	r2, #1
 4321 0028 1C49     		ldr	r1, .L401+4
 4322 002a 1944     		add	r1, r1, r3
 4323 002c 3844     		add	r0, r0, r7
 4324 002e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4325              	.LVL382:
 4326 0032 0444     		add	r4, r4, r0
 4327              	.LVL383:
2425:../FreeRTOS/Source/tasks.c **** 
 4328              		.loc 1 2425 0 discriminator 1
 4329 0034 002D     		cmp	r5, #0
 4330 0036 EFD1     		bne	.L398
2429:../FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4331              		.loc 1 2429 0
 4332 0038 04EBC403 		add	r3, r4, r4, lsl #3
 4333 003c 9800     		lsls	r0, r3, #2
 4334 003e 184B     		ldr	r3, .L401+8
 4335 0040 1968     		ldr	r1, [r3]
 4336 0042 0222     		movs	r2, #2
 4337 0044 3844     		add	r0, r0, r7
 4338 0046 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4339              	.LVL384:
 4340 004a 0444     		add	r4, r4, r0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 177


 4341              	.LVL385:
2430:../FreeRTOS/Source/tasks.c **** 
 4342              		.loc 1 2430 0
 4343 004c 04EBC403 		add	r3, r4, r4, lsl #3
 4344 0050 9800     		lsls	r0, r3, #2
 4345 0052 144B     		ldr	r3, .L401+12
 4346 0054 1968     		ldr	r1, [r3]
 4347 0056 0222     		movs	r2, #2
 4348 0058 3844     		add	r0, r0, r7
 4349 005a FFF7FEFF 		bl	prvListTasksWithinSingleList
 4350              	.LVL386:
 4351 005e 0444     		add	r4, r4, r0
 4352              	.LVL387:
2436:../FreeRTOS/Source/tasks.c **** 				}
 4353              		.loc 1 2436 0
 4354 0060 04EBC403 		add	r3, r4, r4, lsl #3
 4355 0064 9800     		lsls	r0, r3, #2
 4356 0066 0422     		movs	r2, #4
 4357 0068 0F49     		ldr	r1, .L401+16
 4358 006a 3844     		add	r0, r0, r7
 4359 006c FFF7FEFF 		bl	prvListTasksWithinSingleList
 4360              	.LVL388:
 4361 0070 0444     		add	r4, r4, r0
 4362              	.LVL389:
2444:../FreeRTOS/Source/tasks.c **** 				}
 4363              		.loc 1 2444 0
 4364 0072 04EBC403 		add	r3, r4, r4, lsl #3
 4365 0076 9800     		lsls	r0, r3, #2
 4366 0078 0322     		movs	r2, #3
 4367 007a 0C49     		ldr	r1, .L401+20
 4368 007c 3844     		add	r0, r0, r7
 4369 007e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4370              	.LVL390:
 4371 0082 0444     		add	r4, r4, r0
 4372              	.LVL391:
2461:../FreeRTOS/Source/tasks.c **** 					{
 4373              		.loc 1 2461 0
 4374 0084 1EB1     		cbz	r6, .L397
2463:../FreeRTOS/Source/tasks.c **** 					}
 4375              		.loc 1 2463 0
 4376 0086 0023     		movs	r3, #0
 4377 0088 3360     		str	r3, [r6]
 4378 008a 00E0     		b	.L397
 4379              	.LVL392:
 4380              	.L399:
2411:../FreeRTOS/Source/tasks.c **** 
 4381              		.loc 1 2411 0
 4382 008c 0024     		movs	r4, #0
 4383              	.LVL393:
 4384              	.L397:
2473:../FreeRTOS/Source/tasks.c **** 
 4385              		.loc 1 2473 0
 4386 008e FFF7FEFF 		bl	xTaskResumeAll
 4387              	.LVL394:
2476:../FreeRTOS/Source/tasks.c **** 
 4388              		.loc 1 2476 0
 4389 0092 2046     		mov	r0, r4
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 178


 4390 0094 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4391              	.LVL395:
 4392              	.L402:
 4393 0096 00BF     		.align	2
 4394              	.L401:
 4395 0098 00000000 		.word	.LANCHOR9
 4396 009c 00000000 		.word	.LANCHOR4
 4397 00a0 00000000 		.word	.LANCHOR2
 4398 00a4 00000000 		.word	.LANCHOR8
 4399 00a8 00000000 		.word	.LANCHOR7
 4400 00ac 00000000 		.word	.LANCHOR0
 4401              		.cfi_endproc
 4402              	.LFE27:
 4404              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4405              		.align	1
 4406              		.global	xTaskGetCurrentTaskHandle
 4407              		.syntax unified
 4408              		.thumb
 4409              		.thumb_func
 4410              		.fpu fpv4-sp-d16
 4412              	xTaskGetCurrentTaskHandle:
 4413              	.LFB49:
3757:../FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 4414              		.loc 1 3757 0
 4415              		.cfi_startproc
 4416              		@ args = 0, pretend = 0, frame = 0
 4417              		@ frame_needed = 0, uses_anonymous_args = 0
 4418              		@ link register save eliminated.
3763:../FreeRTOS/Source/tasks.c **** 
 4419              		.loc 1 3763 0
 4420 0000 014B     		ldr	r3, .L404
 4421 0002 1868     		ldr	r0, [r3]
 4422              	.LVL396:
3766:../FreeRTOS/Source/tasks.c **** 
 4423              		.loc 1 3766 0
 4424 0004 7047     		bx	lr
 4425              	.L405:
 4426 0006 00BF     		.align	2
 4427              	.L404:
 4428 0008 00000000 		.word	.LANCHOR10
 4429              		.cfi_endproc
 4430              	.LFE49:
 4432              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4433              		.align	1
 4434              		.global	xTaskGetSchedulerState
 4435              		.syntax unified
 4436              		.thumb
 4437              		.thumb_func
 4438              		.fpu fpv4-sp-d16
 4440              	xTaskGetSchedulerState:
 4441              	.LFB50:
3774:../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4442              		.loc 1 3774 0
 4443              		.cfi_startproc
 4444              		@ args = 0, pretend = 0, frame = 0
 4445              		@ frame_needed = 0, uses_anonymous_args = 0
 4446              		@ link register save eliminated.
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 179


3777:../FreeRTOS/Source/tasks.c **** 		{
 4447              		.loc 1 3777 0
 4448 0000 054B     		ldr	r3, .L411
 4449 0002 1B68     		ldr	r3, [r3]
 4450 0004 33B1     		cbz	r3, .L408
3783:../FreeRTOS/Source/tasks.c **** 			{
 4451              		.loc 1 3783 0
 4452 0006 054B     		ldr	r3, .L411+4
 4453 0008 1B68     		ldr	r3, [r3]
 4454 000a 0BB1     		cbz	r3, .L410
3789:../FreeRTOS/Source/tasks.c **** 			}
 4455              		.loc 1 3789 0
 4456 000c 0020     		movs	r0, #0
 4457              	.LVL397:
3794:../FreeRTOS/Source/tasks.c **** 
 4458              		.loc 1 3794 0
 4459 000e 7047     		bx	lr
 4460              	.LVL398:
 4461              	.L410:
3785:../FreeRTOS/Source/tasks.c **** 			}
 4462              		.loc 1 3785 0
 4463 0010 0220     		movs	r0, #2
 4464 0012 7047     		bx	lr
 4465              	.L408:
3779:../FreeRTOS/Source/tasks.c **** 		}
 4466              		.loc 1 3779 0
 4467 0014 0120     		movs	r0, #1
 4468 0016 7047     		bx	lr
 4469              	.L412:
 4470              		.align	2
 4471              	.L411:
 4472 0018 00000000 		.word	.LANCHOR11
 4473 001c 00000000 		.word	.LANCHOR16
 4474              		.cfi_endproc
 4475              	.LFE50:
 4477              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4478              		.align	1
 4479              		.global	xTaskPriorityInherit
 4480              		.syntax unified
 4481              		.thumb
 4482              		.thumb_func
 4483              		.fpu fpv4-sp-d16
 4485              	xTaskPriorityInherit:
 4486              	.LFB51:
3802:../FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 4487              		.loc 1 3802 0
 4488              		.cfi_startproc
 4489              		@ args = 0, pretend = 0, frame = 0
 4490              		@ frame_needed = 0, uses_anonymous_args = 0
 4491              	.LVL399:
3809:../FreeRTOS/Source/tasks.c **** 		{
 4492              		.loc 1 3809 0
 4493 0000 0028     		cmp	r0, #0
 4494 0002 50D0     		beq	.L420
3802:../FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 4495              		.loc 1 3802 0
 4496 0004 38B5     		push	{r3, r4, r5, lr}
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 180


 4497              	.LCFI41:
 4498              		.cfi_def_cfa_offset 16
 4499              		.cfi_offset 3, -16
 4500              		.cfi_offset 4, -12
 4501              		.cfi_offset 5, -8
 4502              		.cfi_offset 14, -4
 4503 0006 0446     		mov	r4, r0
3814:../FreeRTOS/Source/tasks.c **** 			{
 4504              		.loc 1 3814 0
 4505 0008 C26A     		ldr	r2, [r0, #44]
 4506 000a 2849     		ldr	r1, .L428
 4507 000c 0968     		ldr	r1, [r1]
 4508 000e C96A     		ldr	r1, [r1, #44]
 4509 0010 8A42     		cmp	r2, r1
 4510 0012 3ED2     		bcs	.L415
3819:../FreeRTOS/Source/tasks.c **** 				{
 4511              		.loc 1 3819 0
 4512 0014 8169     		ldr	r1, [r0, #24]
 4513 0016 0029     		cmp	r1, #0
 4514 0018 05DB     		blt	.L416
3821:../FreeRTOS/Source/tasks.c **** 				}
 4515              		.loc 1 3821 0
 4516 001a 2449     		ldr	r1, .L428
 4517 001c 0968     		ldr	r1, [r1]
 4518 001e C96A     		ldr	r1, [r1, #44]
 4519 0020 C1F10601 		rsb	r1, r1, #6
 4520 0024 8161     		str	r1, [r0, #24]
 4521              	.L416:
3830:../FreeRTOS/Source/tasks.c **** 				{
 4522              		.loc 1 3830 0
 4523 0026 6069     		ldr	r0, [r4, #20]
 4524              	.LVL400:
 4525 0028 02EB8202 		add	r2, r2, r2, lsl #2
 4526 002c 9100     		lsls	r1, r2, #2
 4527 002e 204A     		ldr	r2, .L428+4
 4528 0030 0A44     		add	r2, r2, r1
 4529 0032 9042     		cmp	r0, r2
 4530 0034 05D0     		beq	.L426
3848:../FreeRTOS/Source/tasks.c **** 				}
 4531              		.loc 1 3848 0
 4532 0036 1D4A     		ldr	r2, .L428
 4533 0038 1268     		ldr	r2, [r2]
 4534 003a D26A     		ldr	r2, [r2, #44]
 4535 003c E262     		str	r2, [r4, #44]
3854:../FreeRTOS/Source/tasks.c **** 			}
 4536              		.loc 1 3854 0
 4537 003e 0120     		movs	r0, #1
 4538              	.LVL401:
 4539              	.L413:
3881:../FreeRTOS/Source/tasks.c **** 
 4540              		.loc 1 3881 0
 4541 0040 38BD     		pop	{r3, r4, r5, pc}
 4542              	.LVL402:
 4543              	.L426:
3832:../FreeRTOS/Source/tasks.c **** 					{
 4544              		.loc 1 3832 0
 4545 0042 251D     		adds	r5, r4, #4
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 181


 4546 0044 2846     		mov	r0, r5
 4547 0046 FFF7FEFF 		bl	uxListRemove
 4548              	.LVL403:
 4549 004a 68B9     		cbnz	r0, .L419
3834:../FreeRTOS/Source/tasks.c **** 					}
 4550              		.loc 1 3834 0
 4551 004c E36A     		ldr	r3, [r4, #44]
 4552 004e 03EB8301 		add	r1, r3, r3, lsl #2
 4553 0052 8A00     		lsls	r2, r1, #2
 4554 0054 1649     		ldr	r1, .L428+4
 4555 0056 8A58     		ldr	r2, [r1, r2]
 4556 0058 32B9     		cbnz	r2, .L419
3834:../FreeRTOS/Source/tasks.c **** 					}
 4557              		.loc 1 3834 0 is_stmt 0 discriminator 1
 4558 005a 0122     		movs	r2, #1
 4559 005c 9A40     		lsls	r2, r2, r3
 4560 005e 1549     		ldr	r1, .L428+8
 4561 0060 0B68     		ldr	r3, [r1]
 4562 0062 23EA0203 		bic	r3, r3, r2
 4563 0066 0B60     		str	r3, [r1]
 4564              	.L419:
3842:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4565              		.loc 1 3842 0 is_stmt 1
 4566 0068 104B     		ldr	r3, .L428
 4567 006a 1B68     		ldr	r3, [r3]
 4568 006c DB6A     		ldr	r3, [r3, #44]
 4569 006e E362     		str	r3, [r4, #44]
3843:../FreeRTOS/Source/tasks.c **** 				}
 4570              		.loc 1 3843 0
 4571 0070 0124     		movs	r4, #1
 4572              	.LVL404:
 4573 0072 04FA03F2 		lsl	r2, r4, r3
 4574 0076 0F49     		ldr	r1, .L428+8
 4575 0078 0868     		ldr	r0, [r1]
 4576 007a 0243     		orrs	r2, r2, r0
 4577 007c 0A60     		str	r2, [r1]
 4578 007e 03EB8303 		add	r3, r3, r3, lsl #2
 4579 0082 9A00     		lsls	r2, r3, #2
 4580 0084 2946     		mov	r1, r5
 4581 0086 0A48     		ldr	r0, .L428+4
 4582 0088 1044     		add	r0, r0, r2
 4583 008a FFF7FEFF 		bl	vListInsertEnd
 4584              	.LVL405:
3854:../FreeRTOS/Source/tasks.c **** 			}
 4585              		.loc 1 3854 0
 4586 008e 2046     		mov	r0, r4
 4587 0090 D6E7     		b	.L413
 4588              	.LVL406:
 4589              	.L415:
3858:../FreeRTOS/Source/tasks.c **** 				{
 4590              		.loc 1 3858 0
 4591 0092 826C     		ldr	r2, [r0, #72]
 4592 0094 054B     		ldr	r3, .L428
 4593 0096 1B68     		ldr	r3, [r3]
 4594 0098 DB6A     		ldr	r3, [r3, #44]
 4595 009a 9A42     		cmp	r2, r3
 4596 009c 01D2     		bcs	.L427
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 182


3867:../FreeRTOS/Source/tasks.c **** 				}
 4597              		.loc 1 3867 0
 4598 009e 0120     		movs	r0, #1
 4599              	.LVL407:
3880:../FreeRTOS/Source/tasks.c **** 	}
 4600              		.loc 1 3880 0
 4601 00a0 CEE7     		b	.L413
 4602              	.LVL408:
 4603              	.L427:
3804:../FreeRTOS/Source/tasks.c **** 
 4604              		.loc 1 3804 0
 4605 00a2 0020     		movs	r0, #0
 4606              	.LVL409:
 4607 00a4 CCE7     		b	.L413
 4608              	.LVL410:
 4609              	.L420:
 4610              	.LCFI42:
 4611              		.cfi_def_cfa_offset 0
 4612              		.cfi_restore 3
 4613              		.cfi_restore 4
 4614              		.cfi_restore 5
 4615              		.cfi_restore 14
 4616 00a6 0020     		movs	r0, #0
 4617              	.LVL411:
3881:../FreeRTOS/Source/tasks.c **** 
 4618              		.loc 1 3881 0
 4619 00a8 7047     		bx	lr
 4620              	.L429:
 4621 00aa 00BF     		.align	2
 4622              	.L428:
 4623 00ac 00000000 		.word	.LANCHOR10
 4624 00b0 00000000 		.word	.LANCHOR4
 4625 00b4 00000000 		.word	.LANCHOR13
 4626              		.cfi_endproc
 4627              	.LFE51:
 4629              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4630              		.align	1
 4631              		.global	xTaskPriorityDisinherit
 4632              		.syntax unified
 4633              		.thumb
 4634              		.thumb_func
 4635              		.fpu fpv4-sp-d16
 4637              	xTaskPriorityDisinherit:
 4638              	.LFB52:
3889:../FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4639              		.loc 1 3889 0
 4640              		.cfi_startproc
 4641              		@ args = 0, pretend = 0, frame = 0
 4642              		@ frame_needed = 0, uses_anonymous_args = 0
 4643              	.LVL412:
3893:../FreeRTOS/Source/tasks.c **** 		{
 4644              		.loc 1 3893 0
 4645 0000 0028     		cmp	r0, #0
 4646 0002 49D0     		beq	.L437
3889:../FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4647              		.loc 1 3889 0
 4648 0004 38B5     		push	{r3, r4, r5, lr}
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 183


 4649              	.LCFI43:
 4650              		.cfi_def_cfa_offset 16
 4651              		.cfi_offset 3, -16
 4652              		.cfi_offset 4, -12
 4653              		.cfi_offset 5, -8
 4654              		.cfi_offset 14, -4
 4655 0006 0446     		mov	r4, r0
3899:../FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4656              		.loc 1 3899 0
 4657 0008 264A     		ldr	r2, .L444
 4658 000a 1268     		ldr	r2, [r2]
 4659 000c 8242     		cmp	r2, r0
 4660 000e 08D0     		beq	.L432
 4661              	.LBB197:
 4662              	.LBB198:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4663              		.loc 2 195 0
 4664              		.syntax unified
 4665              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4666 0010 4FF05003 			mov r3, #80												
 4667 0014 83F31188 		msr basepri, r3											
 4668 0018 BFF36F8F 		isb														
 4669 001c BFF34F8F 		dsb														
 4670              	
 4671              	@ 0 "" 2
 4672              	.LVL413:
 4673              		.thumb
 4674              		.syntax unified
 4675              	.L433:
 4676 0020 FEE7     		b	.L433
 4677              	.L432:
 4678              	.LBE198:
 4679              	.LBE197:
3900:../FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4680              		.loc 1 3900 0
 4681 0022 C26C     		ldr	r2, [r0, #76]
 4682 0024 42B9     		cbnz	r2, .L434
 4683              	.LBB199:
 4684              	.LBB200:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4685              		.loc 2 195 0
 4686              		.syntax unified
 4687              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4688 0026 4FF05003 			mov r3, #80												
 4689 002a 83F31188 		msr basepri, r3											
 4690 002e BFF36F8F 		isb														
 4691 0032 BFF34F8F 		dsb														
 4692              	
 4693              	@ 0 "" 2
 4694              	.LVL414:
 4695              		.thumb
 4696              		.syntax unified
 4697              	.L435:
 4698 0036 FEE7     		b	.L435
 4699              	.L434:
 4700              	.LBE200:
 4701              	.LBE199:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 184


3901:../FreeRTOS/Source/tasks.c **** 
 4702              		.loc 1 3901 0
 4703 0038 013A     		subs	r2, r2, #1
 4704 003a C264     		str	r2, [r0, #76]
3905:../FreeRTOS/Source/tasks.c **** 			{
 4705              		.loc 1 3905 0
 4706 003c C06A     		ldr	r0, [r0, #44]
 4707              	.LVL415:
 4708 003e A16C     		ldr	r1, [r4, #72]
 4709 0040 8842     		cmp	r0, r1
 4710 0042 2BD0     		beq	.L438
3908:../FreeRTOS/Source/tasks.c **** 				{
 4711              		.loc 1 3908 0
 4712 0044 62BB     		cbnz	r2, .L439
3915:../FreeRTOS/Source/tasks.c **** 					{
 4713              		.loc 1 3915 0
 4714 0046 251D     		adds	r5, r4, #4
 4715 0048 2846     		mov	r0, r5
 4716 004a FFF7FEFF 		bl	uxListRemove
 4717              	.LVL416:
 4718 004e 70B9     		cbnz	r0, .L436
3917:../FreeRTOS/Source/tasks.c **** 					}
 4719              		.loc 1 3917 0
 4720 0050 E26A     		ldr	r2, [r4, #44]
 4721 0052 1423     		movs	r3, #20
 4722 0054 03FB02F3 		mul	r3, r3, r2
 4723 0058 1349     		ldr	r1, .L444+4
 4724 005a CB58     		ldr	r3, [r1, r3]
 4725 005c 3BB9     		cbnz	r3, .L436
3917:../FreeRTOS/Source/tasks.c **** 					}
 4726              		.loc 1 3917 0 is_stmt 0 discriminator 1
 4727 005e 0123     		movs	r3, #1
 4728 0060 03FA02F2 		lsl	r2, r3, r2
 4729 0064 1149     		ldr	r1, .L444+8
 4730 0066 0B68     		ldr	r3, [r1]
 4731 0068 23EA0203 		bic	r3, r3, r2
 4732 006c 0B60     		str	r3, [r1]
 4733              	.L436:
3927:../FreeRTOS/Source/tasks.c **** 
 4734              		.loc 1 3927 0 is_stmt 1
 4735 006e A36C     		ldr	r3, [r4, #72]
 4736 0070 E362     		str	r3, [r4, #44]
3932:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4737              		.loc 1 3932 0
 4738 0072 C3F10602 		rsb	r2, r3, #6
 4739 0076 A261     		str	r2, [r4, #24]
3933:../FreeRTOS/Source/tasks.c **** 
 4740              		.loc 1 3933 0
 4741 0078 0124     		movs	r4, #1
 4742              	.LVL417:
 4743 007a 04FA03F2 		lsl	r2, r4, r3
 4744 007e 0B49     		ldr	r1, .L444+8
 4745 0080 0868     		ldr	r0, [r1]
 4746 0082 0243     		orrs	r2, r2, r0
 4747 0084 0A60     		str	r2, [r1]
 4748 0086 2946     		mov	r1, r5
 4749 0088 074A     		ldr	r2, .L444+4
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 185


 4750 008a 1420     		movs	r0, #20
 4751 008c 00FB0320 		mla	r0, r0, r3, r2
 4752 0090 FFF7FEFF 		bl	vListInsertEnd
 4753              	.LVL418:
3943:../FreeRTOS/Source/tasks.c **** 				}
 4754              		.loc 1 3943 0
 4755 0094 2046     		mov	r0, r4
 4756              	.LVL419:
 4757              	.L430:
3961:../FreeRTOS/Source/tasks.c **** 
 4758              		.loc 1 3961 0
 4759 0096 38BD     		pop	{r3, r4, r5, pc}
 4760              	.LVL420:
 4761              	.L437:
 4762              	.LCFI44:
 4763              		.cfi_def_cfa_offset 0
 4764              		.cfi_restore 3
 4765              		.cfi_restore 4
 4766              		.cfi_restore 5
 4767              		.cfi_restore 14
3891:../FreeRTOS/Source/tasks.c **** 
 4768              		.loc 1 3891 0
 4769 0098 0020     		movs	r0, #0
 4770              	.LVL421:
3961:../FreeRTOS/Source/tasks.c **** 
 4771              		.loc 1 3961 0
 4772 009a 7047     		bx	lr
 4773              	.LVL422:
 4774              	.L438:
 4775              	.LCFI45:
 4776              		.cfi_def_cfa_offset 16
 4777              		.cfi_offset 3, -16
 4778              		.cfi_offset 4, -12
 4779              		.cfi_offset 5, -8
 4780              		.cfi_offset 14, -4
3891:../FreeRTOS/Source/tasks.c **** 
 4781              		.loc 1 3891 0
 4782 009c 0020     		movs	r0, #0
 4783 009e FAE7     		b	.L430
 4784              	.L439:
 4785 00a0 0020     		movs	r0, #0
3960:../FreeRTOS/Source/tasks.c **** 	}
 4786              		.loc 1 3960 0
 4787 00a2 F8E7     		b	.L430
 4788              	.L445:
 4789              		.align	2
 4790              	.L444:
 4791 00a4 00000000 		.word	.LANCHOR10
 4792 00a8 00000000 		.word	.LANCHOR4
 4793 00ac 00000000 		.word	.LANCHOR13
 4794              		.cfi_endproc
 4795              	.LFE52:
 4797              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4798              		.align	1
 4799              		.global	vTaskPriorityDisinheritAfterTimeout
 4800              		.syntax unified
 4801              		.thumb
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 186


 4802              		.thumb_func
 4803              		.fpu fpv4-sp-d16
 4805              	vTaskPriorityDisinheritAfterTimeout:
 4806              	.LFB53:
3969:../FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4807              		.loc 1 3969 0
 4808              		.cfi_startproc
 4809              		@ args = 0, pretend = 0, frame = 0
 4810              		@ frame_needed = 0, uses_anonymous_args = 0
 4811              	.LVL423:
3974:../FreeRTOS/Source/tasks.c **** 		{
 4812              		.loc 1 3974 0
 4813 0000 0028     		cmp	r0, #0
 4814 0002 55D0     		beq	.L456
3969:../FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4815              		.loc 1 3969 0
 4816 0004 38B5     		push	{r3, r4, r5, lr}
 4817              	.LCFI46:
 4818              		.cfi_def_cfa_offset 16
 4819              		.cfi_offset 3, -16
 4820              		.cfi_offset 4, -12
 4821              		.cfi_offset 5, -8
 4822              		.cfi_offset 14, -4
 4823 0006 0346     		mov	r3, r0
3978:../FreeRTOS/Source/tasks.c **** 
 4824              		.loc 1 3978 0
 4825 0008 C06C     		ldr	r0, [r0, #76]
 4826              	.LVL424:
 4827 000a 40B9     		cbnz	r0, .L448
 4828              	.LBB201:
 4829              	.LBB202:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4830              		.loc 2 195 0
 4831              		.syntax unified
 4832              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4833 000c 4FF05003 			mov r3, #80												
 4834 0010 83F31188 		msr basepri, r3											
 4835 0014 BFF36F8F 		isb														
 4836 0018 BFF34F8F 		dsb														
 4837              	
 4838              	@ 0 "" 2
 4839              	.LVL425:
 4840              		.thumb
 4841              		.syntax unified
 4842              	.L449:
 4843 001c FEE7     		b	.L449
 4844              	.LVL426:
 4845              	.L448:
 4846              	.LBE202:
 4847              	.LBE201:
3984:../FreeRTOS/Source/tasks.c **** 			{
 4848              		.loc 1 3984 0
 4849 001e 9A6C     		ldr	r2, [r3, #72]
 4850 0020 8A42     		cmp	r2, r1
 4851 0022 00D2     		bcs	.L450
3986:../FreeRTOS/Source/tasks.c **** 			}
 4852              		.loc 1 3986 0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 187


 4853 0024 0A46     		mov	r2, r1
 4854              	.L450:
 4855              	.LVL427:
3994:../FreeRTOS/Source/tasks.c **** 			{
 4856              		.loc 1 3994 0
 4857 0026 D96A     		ldr	r1, [r3, #44]
 4858              	.LVL428:
 4859 0028 9142     		cmp	r1, r2
 4860 002a 01D0     		beq	.L446
4000:../FreeRTOS/Source/tasks.c **** 				{
 4861              		.loc 1 4000 0
 4862 002c 0128     		cmp	r0, #1
 4863 002e 00D0     		beq	.L459
 4864              	.LVL429:
 4865              	.L446:
4063:../FreeRTOS/Source/tasks.c **** 
 4866              		.loc 1 4063 0
 4867 0030 38BD     		pop	{r3, r4, r5, pc}
 4868              	.LVL430:
 4869              	.L459:
4005:../FreeRTOS/Source/tasks.c **** 
 4870              		.loc 1 4005 0
 4871 0032 2048     		ldr	r0, .L460
 4872 0034 0068     		ldr	r0, [r0]
 4873 0036 9842     		cmp	r0, r3
 4874 0038 08D1     		bne	.L451
 4875              	.LBB203:
 4876              	.LBB204:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4877              		.loc 2 195 0
 4878              		.syntax unified
 4879              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4880 003a 4FF05003 			mov r3, #80												
 4881 003e 83F31188 		msr basepri, r3											
 4882 0042 BFF36F8F 		isb														
 4883 0046 BFF34F8F 		dsb														
 4884              	
 4885              	@ 0 "" 2
 4886              	.LVL431:
 4887              		.thumb
 4888              		.syntax unified
 4889              	.L452:
 4890 004a FEE7     		b	.L452
 4891              	.LVL432:
 4892              	.L451:
 4893              	.LBE204:
 4894              	.LBE203:
4012:../FreeRTOS/Source/tasks.c **** 
 4895              		.loc 1 4012 0
 4896 004c DA62     		str	r2, [r3, #44]
4016:../FreeRTOS/Source/tasks.c **** 					{
 4897              		.loc 1 4016 0
 4898 004e 9869     		ldr	r0, [r3, #24]
 4899 0050 0028     		cmp	r0, #0
 4900 0052 02DB     		blt	.L453
4018:../FreeRTOS/Source/tasks.c **** 					}
 4901              		.loc 1 4018 0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 188


 4902 0054 C2F10602 		rsb	r2, r2, #6
 4903              	.LVL433:
 4904 0058 9A61     		str	r2, [r3, #24]
 4905              	.L453:
4031:../FreeRTOS/Source/tasks.c **** 					{
 4906              		.loc 1 4031 0
 4907 005a 5A69     		ldr	r2, [r3, #20]
 4908 005c 1648     		ldr	r0, .L460+4
 4909 005e 1424     		movs	r4, #20
 4910 0060 04FB0101 		mla	r1, r4, r1, r0
 4911              	.LVL434:
 4912 0064 8A42     		cmp	r2, r1
 4913 0066 E3D1     		bne	.L446
 4914 0068 1C46     		mov	r4, r3
4033:../FreeRTOS/Source/tasks.c **** 						{
 4915              		.loc 1 4033 0
 4916 006a 1D1D     		adds	r5, r3, #4
 4917 006c 2846     		mov	r0, r5
 4918 006e FFF7FEFF 		bl	uxListRemove
 4919              	.LVL435:
 4920 0072 70B9     		cbnz	r0, .L454
4035:../FreeRTOS/Source/tasks.c **** 						}
 4921              		.loc 1 4035 0
 4922 0074 E26A     		ldr	r2, [r4, #44]
 4923 0076 1423     		movs	r3, #20
 4924 0078 03FB02F3 		mul	r3, r3, r2
 4925 007c 0E49     		ldr	r1, .L460+4
 4926 007e CB58     		ldr	r3, [r1, r3]
 4927 0080 3BB9     		cbnz	r3, .L454
4035:../FreeRTOS/Source/tasks.c **** 						}
 4928              		.loc 1 4035 0 is_stmt 0 discriminator 1
 4929 0082 0123     		movs	r3, #1
 4930 0084 03FA02F2 		lsl	r2, r3, r2
 4931 0088 0C49     		ldr	r1, .L460+8
 4932 008a 0B68     		ldr	r3, [r1]
 4933 008c 23EA0203 		bic	r3, r3, r2
 4934 0090 0B60     		str	r3, [r1]
 4935              	.L454:
4042:../FreeRTOS/Source/tasks.c **** 					}
 4936              		.loc 1 4042 0 is_stmt 1
 4937 0092 E26A     		ldr	r2, [r4, #44]
 4938 0094 0123     		movs	r3, #1
 4939 0096 9340     		lsls	r3, r3, r2
 4940 0098 0849     		ldr	r1, .L460+8
 4941 009a 0868     		ldr	r0, [r1]
 4942 009c 0343     		orrs	r3, r3, r0
 4943 009e 0B60     		str	r3, [r1]
 4944 00a0 2946     		mov	r1, r5
 4945 00a2 054B     		ldr	r3, .L460+4
 4946 00a4 1420     		movs	r0, #20
 4947 00a6 00FB0230 		mla	r0, r0, r2, r3
 4948 00aa FFF7FEFF 		bl	vListInsertEnd
 4949              	.LVL436:
4063:../FreeRTOS/Source/tasks.c **** 
 4950              		.loc 1 4063 0
 4951 00ae BFE7     		b	.L446
 4952              	.LVL437:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 189


 4953              	.L456:
 4954              	.LCFI47:
 4955              		.cfi_def_cfa_offset 0
 4956              		.cfi_restore 3
 4957              		.cfi_restore 4
 4958              		.cfi_restore 5
 4959              		.cfi_restore 14
 4960 00b0 7047     		bx	lr
 4961              	.L461:
 4962 00b2 00BF     		.align	2
 4963              	.L460:
 4964 00b4 00000000 		.word	.LANCHOR10
 4965 00b8 00000000 		.word	.LANCHOR4
 4966 00bc 00000000 		.word	.LANCHOR13
 4967              		.cfi_endproc
 4968              	.LFE53:
 4970              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 4971              		.align	1
 4972              		.global	uxTaskResetEventItemValue
 4973              		.syntax unified
 4974              		.thumb
 4975              		.thumb_func
 4976              		.fpu fpv4-sp-d16
 4978              	uxTaskResetEventItemValue:
 4979              	.LFB54:
4383:../FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 4980              		.loc 1 4383 0
 4981              		.cfi_startproc
 4982              		@ args = 0, pretend = 0, frame = 0
 4983              		@ frame_needed = 0, uses_anonymous_args = 0
 4984              		@ link register save eliminated.
4386:../FreeRTOS/Source/tasks.c **** 
 4985              		.loc 1 4386 0
 4986 0000 044A     		ldr	r2, .L463
 4987 0002 1368     		ldr	r3, [r2]
 4988 0004 9869     		ldr	r0, [r3, #24]
 4989              	.LVL438:
4390:../FreeRTOS/Source/tasks.c **** 
 4990              		.loc 1 4390 0
 4991 0006 1368     		ldr	r3, [r2]
 4992 0008 DB6A     		ldr	r3, [r3, #44]
 4993 000a 1268     		ldr	r2, [r2]
 4994 000c C3F10603 		rsb	r3, r3, #6
 4995 0010 9361     		str	r3, [r2, #24]
4393:../FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4996              		.loc 1 4393 0
 4997 0012 7047     		bx	lr
 4998              	.L464:
 4999              		.align	2
 5000              	.L463:
 5001 0014 00000000 		.word	.LANCHOR10
 5002              		.cfi_endproc
 5003              	.LFE54:
 5005              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5006              		.align	1
 5007              		.global	pvTaskIncrementMutexHeldCount
 5008              		.syntax unified
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 190


 5009              		.thumb
 5010              		.thumb_func
 5011              		.fpu fpv4-sp-d16
 5013              	pvTaskIncrementMutexHeldCount:
 5014              	.LFB55:
4399:../FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 5015              		.loc 1 4399 0
 5016              		.cfi_startproc
 5017              		@ args = 0, pretend = 0, frame = 0
 5018              		@ frame_needed = 0, uses_anonymous_args = 0
 5019              		@ link register save eliminated.
4402:../FreeRTOS/Source/tasks.c **** 		{
 5020              		.loc 1 4402 0
 5021 0000 054B     		ldr	r3, .L467
 5022 0002 1B68     		ldr	r3, [r3]
 5023 0004 23B1     		cbz	r3, .L466
4404:../FreeRTOS/Source/tasks.c **** 		}
 5024              		.loc 1 4404 0
 5025 0006 044B     		ldr	r3, .L467
 5026 0008 1A68     		ldr	r2, [r3]
 5027 000a D36C     		ldr	r3, [r2, #76]
 5028 000c 0133     		adds	r3, r3, #1
 5029 000e D364     		str	r3, [r2, #76]
 5030              	.L466:
4407:../FreeRTOS/Source/tasks.c **** 	}
 5031              		.loc 1 4407 0
 5032 0010 014B     		ldr	r3, .L467
 5033 0012 1868     		ldr	r0, [r3]
4408:../FreeRTOS/Source/tasks.c **** 
 5034              		.loc 1 4408 0
 5035 0014 7047     		bx	lr
 5036              	.L468:
 5037 0016 00BF     		.align	2
 5038              	.L467:
 5039 0018 00000000 		.word	.LANCHOR10
 5040              		.cfi_endproc
 5041              	.LFE55:
 5043              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5044              		.align	1
 5045              		.global	ulTaskNotifyTake
 5046              		.syntax unified
 5047              		.thumb
 5048              		.thumb_func
 5049              		.fpu fpv4-sp-d16
 5051              	ulTaskNotifyTake:
 5052              	.LFB56:
4416:../FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 5053              		.loc 1 4416 0
 5054              		.cfi_startproc
 5055              		@ args = 0, pretend = 0, frame = 0
 5056              		@ frame_needed = 0, uses_anonymous_args = 0
 5057              	.LVL439:
 5058 0000 38B5     		push	{r3, r4, r5, lr}
 5059              	.LCFI48:
 5060              		.cfi_def_cfa_offset 16
 5061              		.cfi_offset 3, -16
 5062              		.cfi_offset 4, -12
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 191


 5063              		.cfi_offset 5, -8
 5064              		.cfi_offset 14, -4
 5065 0002 0546     		mov	r5, r0
 5066 0004 0C46     		mov	r4, r1
4419:../FreeRTOS/Source/tasks.c **** 		{
 5067              		.loc 1 4419 0
 5068 0006 FFF7FEFF 		bl	vPortEnterCritical
 5069              	.LVL440:
4422:../FreeRTOS/Source/tasks.c **** 			{
 5070              		.loc 1 4422 0
 5071 000a 194B     		ldr	r3, .L476
 5072 000c 1B68     		ldr	r3, [r3]
 5073 000e 1B6D     		ldr	r3, [r3, #80]
 5074 0010 2BB9     		cbnz	r3, .L470
4425:../FreeRTOS/Source/tasks.c **** 
 5075              		.loc 1 4425 0
 5076 0012 174B     		ldr	r3, .L476
 5077 0014 1B68     		ldr	r3, [r3]
 5078 0016 0122     		movs	r2, #1
 5079 0018 83F85420 		strb	r2, [r3, #84]
4427:../FreeRTOS/Source/tasks.c **** 				{
 5080              		.loc 1 4427 0
 5081 001c ACB9     		cbnz	r4, .L474
 5082              	.L470:
4448:../FreeRTOS/Source/tasks.c **** 
 5083              		.loc 1 4448 0
 5084 001e FFF7FEFF 		bl	vPortExitCritical
 5085              	.LVL441:
4450:../FreeRTOS/Source/tasks.c **** 		{
 5086              		.loc 1 4450 0
 5087 0022 FFF7FEFF 		bl	vPortEnterCritical
 5088              	.LVL442:
4453:../FreeRTOS/Source/tasks.c **** 
 5089              		.loc 1 4453 0
 5090 0026 124B     		ldr	r3, .L476
 5091 0028 1B68     		ldr	r3, [r3]
 5092 002a 1C6D     		ldr	r4, [r3, #80]
 5093              	.LVL443:
4455:../FreeRTOS/Source/tasks.c **** 			{
 5094              		.loc 1 4455 0
 5095 002c 24B1     		cbz	r4, .L471
4457:../FreeRTOS/Source/tasks.c **** 				{
 5096              		.loc 1 4457 0
 5097 002e CDB9     		cbnz	r5, .L475
4463:../FreeRTOS/Source/tasks.c **** 				}
 5098              		.loc 1 4463 0
 5099 0030 0F4B     		ldr	r3, .L476
 5100 0032 1B68     		ldr	r3, [r3]
 5101 0034 621E     		subs	r2, r4, #1
 5102 0036 1A65     		str	r2, [r3, #80]
 5103              	.L471:
4471:../FreeRTOS/Source/tasks.c **** 		}
 5104              		.loc 1 4471 0
 5105 0038 0D4B     		ldr	r3, .L476
 5106 003a 1B68     		ldr	r3, [r3]
 5107 003c 0022     		movs	r2, #0
 5108 003e 83F85420 		strb	r2, [r3, #84]
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 192


4473:../FreeRTOS/Source/tasks.c **** 
 5109              		.loc 1 4473 0
 5110 0042 FFF7FEFF 		bl	vPortExitCritical
 5111              	.LVL444:
4476:../FreeRTOS/Source/tasks.c **** 
 5112              		.loc 1 4476 0
 5113 0046 2046     		mov	r0, r4
 5114 0048 38BD     		pop	{r3, r4, r5, pc}
 5115              	.LVL445:
 5116              	.L474:
4429:../FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 5117              		.loc 1 4429 0
 5118 004a 1146     		mov	r1, r2
 5119 004c 2046     		mov	r0, r4
 5120 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5121              	.LVL446:
4436:../FreeRTOS/Source/tasks.c **** 				}
 5122              		.loc 1 4436 0
 5123 0052 084B     		ldr	r3, .L476+4
 5124 0054 4FF08052 		mov	r2, #268435456
 5125 0058 1A60     		str	r2, [r3]
 5126              		.syntax unified
 5127              	@ 4436 "../FreeRTOS/Source/tasks.c" 1
 5128 005a BFF34F8F 		dsb
 5129              	@ 0 "" 2
 5130              	@ 4436 "../FreeRTOS/Source/tasks.c" 1
 5131 005e BFF36F8F 		isb
 5132              	@ 0 "" 2
 5133              		.thumb
 5134              		.syntax unified
 5135 0062 DCE7     		b	.L470
 5136              	.LVL447:
 5137              	.L475:
4459:../FreeRTOS/Source/tasks.c **** 				}
 5138              		.loc 1 4459 0
 5139 0064 024B     		ldr	r3, .L476
 5140 0066 1B68     		ldr	r3, [r3]
 5141 0068 0022     		movs	r2, #0
 5142 006a 1A65     		str	r2, [r3, #80]
 5143 006c E4E7     		b	.L471
 5144              	.L477:
 5145 006e 00BF     		.align	2
 5146              	.L476:
 5147 0070 00000000 		.word	.LANCHOR10
 5148 0074 04ED00E0 		.word	-536810236
 5149              		.cfi_endproc
 5150              	.LFE56:
 5152              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5153              		.align	1
 5154              		.global	xTaskNotifyWait
 5155              		.syntax unified
 5156              		.thumb
 5157              		.thumb_func
 5158              		.fpu fpv4-sp-d16
 5160              	xTaskNotifyWait:
 5161              	.LFB57:
4484:../FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 193


 5162              		.loc 1 4484 0
 5163              		.cfi_startproc
 5164              		@ args = 0, pretend = 0, frame = 0
 5165              		@ frame_needed = 0, uses_anonymous_args = 0
 5166              	.LVL448:
 5167 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5168              	.LCFI49:
 5169              		.cfi_def_cfa_offset 24
 5170              		.cfi_offset 3, -24
 5171              		.cfi_offset 4, -20
 5172              		.cfi_offset 5, -16
 5173              		.cfi_offset 6, -12
 5174              		.cfi_offset 7, -8
 5175              		.cfi_offset 14, -4
 5176 0002 0746     		mov	r7, r0
 5177 0004 0D46     		mov	r5, r1
 5178 0006 1446     		mov	r4, r2
 5179 0008 1E46     		mov	r6, r3
4487:../FreeRTOS/Source/tasks.c **** 		{
 5180              		.loc 1 4487 0
 5181 000a FFF7FEFF 		bl	vPortEnterCritical
 5182              	.LVL449:
4490:../FreeRTOS/Source/tasks.c **** 			{
 5183              		.loc 1 4490 0
 5184 000e 204B     		ldr	r3, .L486
 5185 0010 1B68     		ldr	r3, [r3]
 5186 0012 93F85430 		ldrb	r3, [r3, #84]	@ zero_extendqisi2
 5187 0016 DBB2     		uxtb	r3, r3
 5188 0018 022B     		cmp	r3, #2
 5189 001a 0AD0     		beq	.L479
4495:../FreeRTOS/Source/tasks.c **** 
 5190              		.loc 1 4495 0
 5191 001c 1C4B     		ldr	r3, .L486
 5192 001e 1A68     		ldr	r2, [r3]
 5193 0020 106D     		ldr	r0, [r2, #80]
 5194 0022 20EA0700 		bic	r0, r0, r7
 5195 0026 1065     		str	r0, [r2, #80]
4498:../FreeRTOS/Source/tasks.c **** 
 5196              		.loc 1 4498 0
 5197 0028 1B68     		ldr	r3, [r3]
 5198 002a 0122     		movs	r2, #1
 5199 002c 83F85420 		strb	r2, [r3, #84]
4500:../FreeRTOS/Source/tasks.c **** 				{
 5200              		.loc 1 4500 0
 5201 0030 CEB9     		cbnz	r6, .L484
 5202              	.L479:
4521:../FreeRTOS/Source/tasks.c **** 
 5203              		.loc 1 4521 0
 5204 0032 FFF7FEFF 		bl	vPortExitCritical
 5205              	.LVL450:
4523:../FreeRTOS/Source/tasks.c **** 		{
 5206              		.loc 1 4523 0
 5207 0036 FFF7FEFF 		bl	vPortEnterCritical
 5208              	.LVL451:
4527:../FreeRTOS/Source/tasks.c **** 			{
 5209              		.loc 1 4527 0
 5210 003a 1CB1     		cbz	r4, .L480
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 194


4531:../FreeRTOS/Source/tasks.c **** 			}
 5211              		.loc 1 4531 0
 5212 003c 144B     		ldr	r3, .L486
 5213 003e 1B68     		ldr	r3, [r3]
 5214 0040 1B6D     		ldr	r3, [r3, #80]
 5215 0042 2360     		str	r3, [r4]
 5216              	.L480:
4538:../FreeRTOS/Source/tasks.c **** 			{
 5217              		.loc 1 4538 0
 5218 0044 124B     		ldr	r3, .L486
 5219 0046 1B68     		ldr	r3, [r3]
 5220 0048 93F85430 		ldrb	r3, [r3, #84]	@ zero_extendqisi2
 5221 004c DBB2     		uxtb	r3, r3
 5222 004e 022B     		cmp	r3, #2
 5223 0050 16D0     		beq	.L485
4541:../FreeRTOS/Source/tasks.c **** 			}
 5224              		.loc 1 4541 0
 5225 0052 0024     		movs	r4, #0
 5226              	.LVL452:
 5227              	.L481:
4551:../FreeRTOS/Source/tasks.c **** 		}
 5228              		.loc 1 4551 0
 5229 0054 0E4B     		ldr	r3, .L486
 5230 0056 1B68     		ldr	r3, [r3]
 5231 0058 0022     		movs	r2, #0
 5232 005a 83F85420 		strb	r2, [r3, #84]
4553:../FreeRTOS/Source/tasks.c **** 
 5233              		.loc 1 4553 0
 5234 005e FFF7FEFF 		bl	vPortExitCritical
 5235              	.LVL453:
4556:../FreeRTOS/Source/tasks.c **** 
 5236              		.loc 1 4556 0
 5237 0062 2046     		mov	r0, r4
 5238 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5239              	.LVL454:
 5240              	.L484:
4502:../FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5241              		.loc 1 4502 0
 5242 0066 1146     		mov	r1, r2
 5243 0068 3046     		mov	r0, r6
 5244 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5245              	.LVL455:
4509:../FreeRTOS/Source/tasks.c **** 				}
 5246              		.loc 1 4509 0
 5247 006e 094B     		ldr	r3, .L486+4
 5248 0070 4FF08052 		mov	r2, #268435456
 5249 0074 1A60     		str	r2, [r3]
 5250              		.syntax unified
 5251              	@ 4509 "../FreeRTOS/Source/tasks.c" 1
 5252 0076 BFF34F8F 		dsb
 5253              	@ 0 "" 2
 5254              	@ 4509 "../FreeRTOS/Source/tasks.c" 1
 5255 007a BFF36F8F 		isb
 5256              	@ 0 "" 2
 5257              		.thumb
 5258              		.syntax unified
 5259 007e D8E7     		b	.L479
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 195


 5260              	.L485:
4547:../FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5261              		.loc 1 4547 0
 5262 0080 034B     		ldr	r3, .L486
 5263 0082 1A68     		ldr	r2, [r3]
 5264 0084 136D     		ldr	r3, [r2, #80]
 5265 0086 23EA0505 		bic	r5, r3, r5
 5266              	.LVL456:
 5267 008a 1565     		str	r5, [r2, #80]
 5268              	.LVL457:
4548:../FreeRTOS/Source/tasks.c **** 			}
 5269              		.loc 1 4548 0
 5270 008c 0124     		movs	r4, #1
 5271              	.LVL458:
 5272 008e E1E7     		b	.L481
 5273              	.L487:
 5274              		.align	2
 5275              	.L486:
 5276 0090 00000000 		.word	.LANCHOR10
 5277 0094 04ED00E0 		.word	-536810236
 5278              		.cfi_endproc
 5279              	.LFE57:
 5281              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5282              		.align	1
 5283              		.global	xTaskGenericNotify
 5284              		.syntax unified
 5285              		.thumb
 5286              		.thumb_func
 5287              		.fpu fpv4-sp-d16
 5289              	xTaskGenericNotify:
 5290              	.LFB58:
4564:../FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5291              		.loc 1 4564 0
 5292              		.cfi_startproc
 5293              		@ args = 0, pretend = 0, frame = 0
 5294              		@ frame_needed = 0, uses_anonymous_args = 0
 5295              	.LVL459:
 5296 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5297              	.LCFI50:
 5298              		.cfi_def_cfa_offset 24
 5299              		.cfi_offset 3, -24
 5300              		.cfi_offset 4, -20
 5301              		.cfi_offset 5, -16
 5302              		.cfi_offset 6, -12
 5303              		.cfi_offset 7, -8
 5304              		.cfi_offset 14, -4
 5305              	.LVL460:
4569:../FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5306              		.loc 1 4569 0
 5307 0002 40B9     		cbnz	r0, .L489
 5308              	.LBB205:
 5309              	.LBB206:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5310              		.loc 2 195 0
 5311              		.syntax unified
 5312              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5313 0004 4FF05003 			mov r3, #80												
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 196


 5314 0008 83F31188 		msr basepri, r3											
 5315 000c BFF36F8F 		isb														
 5316 0010 BFF34F8F 		dsb														
 5317              	
 5318              	@ 0 "" 2
 5319              	.LVL461:
 5320              		.thumb
 5321              		.syntax unified
 5322              	.L490:
 5323 0014 FEE7     		b	.L490
 5324              	.LVL462:
 5325              	.L489:
 5326 0016 0446     		mov	r4, r0
 5327 0018 1F46     		mov	r7, r3
 5328 001a 1546     		mov	r5, r2
 5329 001c 0E46     		mov	r6, r1
 5330              	.LVL463:
 5331              	.LBE206:
 5332              	.LBE205:
4572:../FreeRTOS/Source/tasks.c **** 		{
 5333              		.loc 1 4572 0
 5334 001e FFF7FEFF 		bl	vPortEnterCritical
 5335              	.LVL464:
4574:../FreeRTOS/Source/tasks.c **** 			{
 5336              		.loc 1 4574 0
 5337 0022 0FB1     		cbz	r7, .L491
4576:../FreeRTOS/Source/tasks.c **** 			}
 5338              		.loc 1 4576 0
 5339 0024 236D     		ldr	r3, [r4, #80]
 5340 0026 3B60     		str	r3, [r7]
 5341              	.L491:
4579:../FreeRTOS/Source/tasks.c **** 
 5342              		.loc 1 4579 0
 5343 0028 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 5344 002c DBB2     		uxtb	r3, r3
 5345              	.LVL465:
4581:../FreeRTOS/Source/tasks.c **** 
 5346              		.loc 1 4581 0
 5347 002e 0222     		movs	r2, #2
 5348 0030 84F85420 		strb	r2, [r4, #84]
4583:../FreeRTOS/Source/tasks.c **** 			{
 5349              		.loc 1 4583 0
 5350 0034 6A1E     		subs	r2, r5, #1
 5351 0036 032A     		cmp	r2, #3
 5352 0038 1AD8     		bhi	.L501
 5353 003a DFE802F0 		tbb	[pc, r2]
 5354              	.L494:
 5355 003e 02       		.byte	(.L493-.L494)/2
 5356 003f 0C       		.byte	(.L495-.L494)/2
 5357 0040 11       		.byte	(.L496-.L494)/2
 5358 0041 14       		.byte	(.L497-.L494)/2
 5359              		.p2align 1
 5360              	.L493:
4586:../FreeRTOS/Source/tasks.c **** 					break;
 5361              		.loc 1 4586 0
 5362 0042 226D     		ldr	r2, [r4, #80]
 5363 0044 1643     		orrs	r6, r6, r2
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 197


 5364              	.LVL466:
 5365 0046 2665     		str	r6, [r4, #80]
4566:../FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5366              		.loc 1 4566 0
 5367 0048 0125     		movs	r5, #1
 5368              	.L492:
 5369              	.LVL467:
4619:../FreeRTOS/Source/tasks.c **** 			{
 5370              		.loc 1 4619 0
 5371 004a 012B     		cmp	r3, #1
 5372 004c 14D0     		beq	.L504
 5373              	.LVL468:
 5374              	.L498:
4659:../FreeRTOS/Source/tasks.c **** 
 5375              		.loc 1 4659 0
 5376 004e FFF7FEFF 		bl	vPortExitCritical
 5377              	.LVL469:
4662:../FreeRTOS/Source/tasks.c **** 
 5378              		.loc 1 4662 0
 5379 0052 2846     		mov	r0, r5
 5380 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5381              	.LVL470:
 5382              	.L495:
4590:../FreeRTOS/Source/tasks.c **** 					break;
 5383              		.loc 1 4590 0
 5384 0056 226D     		ldr	r2, [r4, #80]
 5385 0058 0132     		adds	r2, r2, #1
 5386 005a 2265     		str	r2, [r4, #80]
4566:../FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5387              		.loc 1 4566 0
 5388 005c 0125     		movs	r5, #1
4591:../FreeRTOS/Source/tasks.c **** 
 5389              		.loc 1 4591 0
 5390 005e F4E7     		b	.L492
 5391              	.L496:
4594:../FreeRTOS/Source/tasks.c **** 					break;
 5392              		.loc 1 4594 0
 5393 0060 2665     		str	r6, [r4, #80]
4566:../FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5394              		.loc 1 4566 0
 5395 0062 0125     		movs	r5, #1
4595:../FreeRTOS/Source/tasks.c **** 
 5396              		.loc 1 4595 0
 5397 0064 F1E7     		b	.L492
 5398              	.L497:
4598:../FreeRTOS/Source/tasks.c **** 					{
 5399              		.loc 1 4598 0
 5400 0066 022B     		cmp	r3, #2
 5401 0068 04D0     		beq	.L502
4600:../FreeRTOS/Source/tasks.c **** 					}
 5402              		.loc 1 4600 0
 5403 006a 2665     		str	r6, [r4, #80]
4566:../FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5404              		.loc 1 4566 0
 5405 006c 0125     		movs	r5, #1
 5406 006e ECE7     		b	.L492
 5407              	.L501:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 198


 5408 0070 0125     		movs	r5, #1
 5409 0072 EAE7     		b	.L492
 5410              	.L502:
4605:../FreeRTOS/Source/tasks.c **** 					}
 5411              		.loc 1 4605 0
 5412 0074 0025     		movs	r5, #0
 5413 0076 E8E7     		b	.L492
 5414              	.LVL471:
 5415              	.L504:
4621:../FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5416              		.loc 1 4621 0
 5417 0078 261D     		adds	r6, r4, #4
 5418 007a 3046     		mov	r0, r6
 5419 007c FFF7FEFF 		bl	uxListRemove
 5420              	.LVL472:
4622:../FreeRTOS/Source/tasks.c **** 
 5421              		.loc 1 4622 0
 5422 0080 E26A     		ldr	r2, [r4, #44]
 5423 0082 0123     		movs	r3, #1
 5424 0084 9340     		lsls	r3, r3, r2
 5425 0086 1249     		ldr	r1, .L505
 5426 0088 0868     		ldr	r0, [r1]
 5427 008a 0343     		orrs	r3, r3, r0
 5428 008c 0B60     		str	r3, [r1]
 5429 008e 3146     		mov	r1, r6
 5430 0090 104B     		ldr	r3, .L505+4
 5431 0092 1420     		movs	r0, #20
 5432 0094 00FB0230 		mla	r0, r0, r2, r3
 5433 0098 FFF7FEFF 		bl	vListInsertEnd
 5434              	.LVL473:
4625:../FreeRTOS/Source/tasks.c **** 
 5435              		.loc 1 4625 0
 5436 009c A36A     		ldr	r3, [r4, #40]
 5437 009e 43B1     		cbz	r3, .L499
 5438              	.LBB207:
 5439              	.LBB208:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5440              		.loc 2 195 0
 5441              		.syntax unified
 5442              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5443 00a0 4FF05003 			mov r3, #80												
 5444 00a4 83F31188 		msr basepri, r3											
 5445 00a8 BFF36F8F 		isb														
 5446 00ac BFF34F8F 		dsb														
 5447              	
 5448              	@ 0 "" 2
 5449              	.LVL474:
 5450              		.thumb
 5451              		.syntax unified
 5452              	.L500:
 5453 00b0 FEE7     		b	.L500
 5454              	.L499:
 5455              	.LBE208:
 5456              	.LBE207:
4643:../FreeRTOS/Source/tasks.c **** 				{
 5457              		.loc 1 4643 0
 5458 00b2 E26A     		ldr	r2, [r4, #44]
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 199


 5459 00b4 084B     		ldr	r3, .L505+8
 5460 00b6 1B68     		ldr	r3, [r3]
 5461 00b8 DB6A     		ldr	r3, [r3, #44]
 5462 00ba 9A42     		cmp	r2, r3
 5463 00bc C7D9     		bls	.L498
4647:../FreeRTOS/Source/tasks.c **** 				}
 5464              		.loc 1 4647 0
 5465 00be 074B     		ldr	r3, .L505+12
 5466 00c0 4FF08052 		mov	r2, #268435456
 5467 00c4 1A60     		str	r2, [r3]
 5468              		.syntax unified
 5469              	@ 4647 "../FreeRTOS/Source/tasks.c" 1
 5470 00c6 BFF34F8F 		dsb
 5471              	@ 0 "" 2
 5472              	@ 4647 "../FreeRTOS/Source/tasks.c" 1
 5473 00ca BFF36F8F 		isb
 5474              	@ 0 "" 2
 5475              		.thumb
 5476              		.syntax unified
 5477 00ce BEE7     		b	.L498
 5478              	.L506:
 5479              		.align	2
 5480              	.L505:
 5481 00d0 00000000 		.word	.LANCHOR13
 5482 00d4 00000000 		.word	.LANCHOR4
 5483 00d8 00000000 		.word	.LANCHOR10
 5484 00dc 04ED00E0 		.word	-536810236
 5485              		.cfi_endproc
 5486              	.LFE58:
 5488              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5489              		.align	1
 5490              		.global	xTaskGenericNotifyFromISR
 5491              		.syntax unified
 5492              		.thumb
 5493              		.thumb_func
 5494              		.fpu fpv4-sp-d16
 5496              	xTaskGenericNotifyFromISR:
 5497              	.LFB59:
4670:../FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5498              		.loc 1 4670 0
 5499              		.cfi_startproc
 5500              		@ args = 4, pretend = 0, frame = 0
 5501              		@ frame_needed = 0, uses_anonymous_args = 0
 5502              	.LVL475:
 5503 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5504              	.LCFI51:
 5505              		.cfi_def_cfa_offset 32
 5506              		.cfi_offset 3, -32
 5507              		.cfi_offset 4, -28
 5508              		.cfi_offset 5, -24
 5509              		.cfi_offset 6, -20
 5510              		.cfi_offset 7, -16
 5511              		.cfi_offset 8, -12
 5512              		.cfi_offset 9, -8
 5513              		.cfi_offset 14, -4
 5514 0004 089E     		ldr	r6, [sp, #32]
 5515              	.LVL476:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 200


4676:../FreeRTOS/Source/tasks.c **** 
 5516              		.loc 1 4676 0
 5517 0006 40B9     		cbnz	r0, .L508
 5518              	.LBB209:
 5519              	.LBB210:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5520              		.loc 2 195 0
 5521              		.syntax unified
 5522              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5523 0008 4FF05003 			mov r3, #80												
 5524 000c 83F31188 		msr basepri, r3											
 5525 0010 BFF36F8F 		isb														
 5526 0014 BFF34F8F 		dsb														
 5527              	
 5528              	@ 0 "" 2
 5529              	.LVL477:
 5530              		.thumb
 5531              		.syntax unified
 5532              	.L509:
 5533 0018 FEE7     		b	.L509
 5534              	.LVL478:
 5535              	.L508:
 5536 001a 0446     		mov	r4, r0
 5537 001c 9946     		mov	r9, r3
 5538 001e 1546     		mov	r5, r2
 5539 0020 8846     		mov	r8, r1
 5540              	.LBE210:
 5541              	.LBE209:
4694:../FreeRTOS/Source/tasks.c **** 
 5542              		.loc 1 4694 0
 5543 0022 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5544              	.LVL479:
 5545              	.LBB211:
 5546              	.LBB212:
 211:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5547              		.loc 2 211 0
 5548              		.syntax unified
 5549              	@ 211 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5550 0026 EFF31187 			mrs r7, basepri											
 5551 002a 4FF05003 		mov r3, #80												
 5552 002e 83F31188 		msr basepri, r3											
 5553 0032 BFF36F8F 		isb														
 5554 0036 BFF34F8F 		dsb														
 5555              	
 5556              	@ 0 "" 2
 5557              		.thumb
 5558              		.syntax unified
 5559              	.LBE212:
 5560              	.LBE211:
4700:../FreeRTOS/Source/tasks.c **** 			{
 5561              		.loc 1 4700 0
 5562 003a B9F1000F 		cmp	r9, #0
 5563 003e 02D0     		beq	.L510
4702:../FreeRTOS/Source/tasks.c **** 			}
 5564              		.loc 1 4702 0
 5565 0040 236D     		ldr	r3, [r4, #80]
 5566 0042 C9F80030 		str	r3, [r9]
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 201


 5567              	.L510:
4705:../FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5568              		.loc 1 4705 0
 5569 0046 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 5570 004a DBB2     		uxtb	r3, r3
 5571              	.LVL480:
4706:../FreeRTOS/Source/tasks.c **** 
 5572              		.loc 1 4706 0
 5573 004c 0222     		movs	r2, #2
 5574 004e 84F85420 		strb	r2, [r4, #84]
4708:../FreeRTOS/Source/tasks.c **** 			{
 5575              		.loc 1 4708 0
 5576 0052 6A1E     		subs	r2, r5, #1
 5577 0054 032A     		cmp	r2, #3
 5578 0056 1ED8     		bhi	.L523
 5579 0058 DFE802F0 		tbb	[pc, r2]
 5580              	.L513:
 5581 005c 02       		.byte	(.L512-.L513)/2
 5582 005d 0E       		.byte	(.L514-.L513)/2
 5583 005e 13       		.byte	(.L515-.L513)/2
 5584 005f 17       		.byte	(.L516-.L513)/2
 5585              		.p2align 1
 5586              	.L512:
4711:../FreeRTOS/Source/tasks.c **** 					break;
 5587              		.loc 1 4711 0
 5588 0060 226D     		ldr	r2, [r4, #80]
 5589 0062 42EA0802 		orr	r2, r2, r8
 5590 0066 2265     		str	r2, [r4, #80]
4673:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5591              		.loc 1 4673 0
 5592 0068 0125     		movs	r5, #1
 5593              	.L511:
 5594              	.LVL481:
4744:../FreeRTOS/Source/tasks.c **** 			{
 5595              		.loc 1 4744 0
 5596 006a 012B     		cmp	r3, #1
 5597 006c 17D0     		beq	.L526
 5598              	.LVL482:
 5599              	.L517:
 5600              	.LBB213:
 5601              	.LBB214:
 5602              		.loc 2 229 0
 5603              		.syntax unified
 5604              	@ 229 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5605 006e 87F31188 			msr basepri, r7	
 5606              	@ 0 "" 2
 5607              	.LVL483:
 5608              		.thumb
 5609              		.syntax unified
 5610              	.LBE214:
 5611              	.LBE213:
4786:../FreeRTOS/Source/tasks.c **** 
 5612              		.loc 1 4786 0
 5613 0072 2846     		mov	r0, r5
 5614 0074 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5615              	.LVL484:
 5616              	.L514:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 202


4715:../FreeRTOS/Source/tasks.c **** 					break;
 5617              		.loc 1 4715 0
 5618 0078 226D     		ldr	r2, [r4, #80]
 5619 007a 0132     		adds	r2, r2, #1
 5620 007c 2265     		str	r2, [r4, #80]
4673:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5621              		.loc 1 4673 0
 5622 007e 0125     		movs	r5, #1
4716:../FreeRTOS/Source/tasks.c **** 
 5623              		.loc 1 4716 0
 5624 0080 F3E7     		b	.L511
 5625              	.L515:
4719:../FreeRTOS/Source/tasks.c **** 					break;
 5626              		.loc 1 4719 0
 5627 0082 C4F85080 		str	r8, [r4, #80]
4673:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5628              		.loc 1 4673 0
 5629 0086 0125     		movs	r5, #1
4720:../FreeRTOS/Source/tasks.c **** 
 5630              		.loc 1 4720 0
 5631 0088 EFE7     		b	.L511
 5632              	.L516:
4723:../FreeRTOS/Source/tasks.c **** 					{
 5633              		.loc 1 4723 0
 5634 008a 022B     		cmp	r3, #2
 5635 008c 05D0     		beq	.L524
4725:../FreeRTOS/Source/tasks.c **** 					}
 5636              		.loc 1 4725 0
 5637 008e C4F85080 		str	r8, [r4, #80]
4673:../FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5638              		.loc 1 4673 0
 5639 0092 0125     		movs	r5, #1
 5640 0094 E9E7     		b	.L511
 5641              	.L523:
 5642 0096 0125     		movs	r5, #1
 5643 0098 E7E7     		b	.L511
 5644              	.L524:
4730:../FreeRTOS/Source/tasks.c **** 					}
 5645              		.loc 1 4730 0
 5646 009a 0025     		movs	r5, #0
 5647 009c E5E7     		b	.L511
 5648              	.LVL485:
 5649              	.L526:
4747:../FreeRTOS/Source/tasks.c **** 
 5650              		.loc 1 4747 0
 5651 009e A36A     		ldr	r3, [r4, #40]
 5652              	.LVL486:
 5653 00a0 43B1     		cbz	r3, .L518
 5654              	.LBB215:
 5655              	.LBB216:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5656              		.loc 2 195 0
 5657              		.syntax unified
 5658              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5659 00a2 4FF05003 			mov r3, #80												
 5660 00a6 83F31188 		msr basepri, r3											
 5661 00aa BFF36F8F 		isb														
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 203


 5662 00ae BFF34F8F 		dsb														
 5663              	
 5664              	@ 0 "" 2
 5665              	.LVL487:
 5666              		.thumb
 5667              		.syntax unified
 5668              	.L519:
 5669 00b2 FEE7     		b	.L519
 5670              	.L518:
 5671              	.LBE216:
 5672              	.LBE215:
4749:../FreeRTOS/Source/tasks.c **** 				{
 5673              		.loc 1 4749 0
 5674 00b4 144B     		ldr	r3, .L527
 5675 00b6 1B68     		ldr	r3, [r3]
 5676 00b8 E3B9     		cbnz	r3, .L520
4751:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5677              		.loc 1 4751 0
 5678 00ba 04F10408 		add	r8, r4, #4
 5679              	.LVL488:
 5680 00be 4046     		mov	r0, r8
 5681 00c0 FFF7FEFF 		bl	uxListRemove
 5682              	.LVL489:
4752:../FreeRTOS/Source/tasks.c **** 				}
 5683              		.loc 1 4752 0
 5684 00c4 E26A     		ldr	r2, [r4, #44]
 5685 00c6 0123     		movs	r3, #1
 5686 00c8 9340     		lsls	r3, r3, r2
 5687 00ca 1049     		ldr	r1, .L527+4
 5688 00cc 0868     		ldr	r0, [r1]
 5689 00ce 0343     		orrs	r3, r3, r0
 5690 00d0 0B60     		str	r3, [r1]
 5691 00d2 4146     		mov	r1, r8
 5692 00d4 0E4B     		ldr	r3, .L527+8
 5693 00d6 1420     		movs	r0, #20
 5694 00d8 00FB0230 		mla	r0, r0, r2, r3
 5695 00dc FFF7FEFF 		bl	vListInsertEnd
 5696              	.LVL490:
 5697              	.L521:
4761:../FreeRTOS/Source/tasks.c **** 				{
 5698              		.loc 1 4761 0
 5699 00e0 E26A     		ldr	r2, [r4, #44]
 5700 00e2 0C4B     		ldr	r3, .L527+12
 5701 00e4 1B68     		ldr	r3, [r3]
 5702 00e6 DB6A     		ldr	r3, [r3, #44]
 5703 00e8 9A42     		cmp	r2, r3
 5704 00ea C0D9     		bls	.L517
4765:../FreeRTOS/Source/tasks.c **** 					{
 5705              		.loc 1 4765 0
 5706 00ec 46B1     		cbz	r6, .L522
4767:../FreeRTOS/Source/tasks.c **** 					}
 5707              		.loc 1 4767 0
 5708 00ee 0123     		movs	r3, #1
 5709 00f0 3360     		str	r3, [r6]
 5710 00f2 BCE7     		b	.L517
 5711              	.LVL491:
 5712              	.L520:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 204


4758:../FreeRTOS/Source/tasks.c **** 				}
 5713              		.loc 1 4758 0
 5714 00f4 04F11801 		add	r1, r4, #24
 5715 00f8 0748     		ldr	r0, .L527+16
 5716 00fa FFF7FEFF 		bl	vListInsertEnd
 5717              	.LVL492:
 5718 00fe EFE7     		b	.L521
 5719              	.LVL493:
 5720              	.L522:
4774:../FreeRTOS/Source/tasks.c **** 					}
 5721              		.loc 1 4774 0
 5722 0100 064B     		ldr	r3, .L527+20
 5723 0102 0122     		movs	r2, #1
 5724 0104 1A60     		str	r2, [r3]
 5725 0106 B2E7     		b	.L517
 5726              	.L528:
 5727              		.align	2
 5728              	.L527:
 5729 0108 00000000 		.word	.LANCHOR16
 5730 010c 00000000 		.word	.LANCHOR13
 5731 0110 00000000 		.word	.LANCHOR4
 5732 0114 00000000 		.word	.LANCHOR10
 5733 0118 00000000 		.word	.LANCHOR1
 5734 011c 00000000 		.word	.LANCHOR20
 5735              		.cfi_endproc
 5736              	.LFE59:
 5738              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5739              		.align	1
 5740              		.global	vTaskNotifyGiveFromISR
 5741              		.syntax unified
 5742              		.thumb
 5743              		.thumb_func
 5744              		.fpu fpv4-sp-d16
 5746              	vTaskNotifyGiveFromISR:
 5747              	.LFB60:
4794:../FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5748              		.loc 1 4794 0
 5749              		.cfi_startproc
 5750              		@ args = 0, pretend = 0, frame = 0
 5751              		@ frame_needed = 0, uses_anonymous_args = 0
 5752              	.LVL494:
 5753 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5754              	.LCFI52:
 5755              		.cfi_def_cfa_offset 24
 5756              		.cfi_offset 3, -24
 5757              		.cfi_offset 4, -20
 5758              		.cfi_offset 5, -16
 5759              		.cfi_offset 6, -12
 5760              		.cfi_offset 7, -8
 5761              		.cfi_offset 14, -4
4799:../FreeRTOS/Source/tasks.c **** 
 5762              		.loc 1 4799 0
 5763 0002 40B9     		cbnz	r0, .L530
 5764              	.LBB217:
 5765              	.LBB218:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5766              		.loc 2 195 0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 205


 5767              		.syntax unified
 5768              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5769 0004 4FF05003 			mov r3, #80												
 5770 0008 83F31188 		msr basepri, r3											
 5771 000c BFF36F8F 		isb														
 5772 0010 BFF34F8F 		dsb														
 5773              	
 5774              	@ 0 "" 2
 5775              	.LVL495:
 5776              		.thumb
 5777              		.syntax unified
 5778              	.L531:
 5779 0014 FEE7     		b	.L531
 5780              	.L530:
 5781 0016 0446     		mov	r4, r0
 5782 0018 0D46     		mov	r5, r1
 5783              	.LBE218:
 5784              	.LBE217:
4817:../FreeRTOS/Source/tasks.c **** 
 5785              		.loc 1 4817 0
 5786 001a FFF7FEFF 		bl	vPortValidateInterruptPriority
 5787              	.LVL496:
 5788              	.LBB219:
 5789              	.LBB220:
 211:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5790              		.loc 2 211 0
 5791              		.syntax unified
 5792              	@ 211 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5793 001e EFF31186 			mrs r6, basepri											
 5794 0022 4FF05003 		mov r3, #80												
 5795 0026 83F31188 		msr basepri, r3											
 5796 002a BFF36F8F 		isb														
 5797 002e BFF34F8F 		dsb														
 5798              	
 5799              	@ 0 "" 2
 5800              		.thumb
 5801              		.syntax unified
 5802              	.LBE220:
 5803              	.LBE219:
4823:../FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5804              		.loc 1 4823 0
 5805 0032 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 5806 0036 DBB2     		uxtb	r3, r3
 5807              	.LVL497:
4824:../FreeRTOS/Source/tasks.c **** 
 5808              		.loc 1 4824 0
 5809 0038 0222     		movs	r2, #2
 5810 003a 84F85420 		strb	r2, [r4, #84]
4828:../FreeRTOS/Source/tasks.c **** 
 5811              		.loc 1 4828 0
 5812 003e 226D     		ldr	r2, [r4, #80]
 5813 0040 0132     		adds	r2, r2, #1
 5814 0042 2265     		str	r2, [r4, #80]
4834:../FreeRTOS/Source/tasks.c **** 			{
 5815              		.loc 1 4834 0
 5816 0044 012B     		cmp	r3, #1
 5817 0046 02D0     		beq	.L539
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 206


 5818              	.LVL498:
 5819              	.L532:
 5820              	.LBB221:
 5821              	.LBB222:
 5822              		.loc 2 229 0
 5823              		.syntax unified
 5824              	@ 229 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5825 0048 86F31188 			msr basepri, r6	
 5826              	@ 0 "" 2
 5827              	.LVL499:
 5828              		.thumb
 5829              		.syntax unified
 5830              	.LBE222:
 5831              	.LBE221:
4874:../FreeRTOS/Source/tasks.c **** 
 5832              		.loc 1 4874 0
 5833 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5834              	.LVL500:
 5835              	.L539:
4837:../FreeRTOS/Source/tasks.c **** 
 5836              		.loc 1 4837 0
 5837 004e A36A     		ldr	r3, [r4, #40]
 5838              	.LVL501:
 5839 0050 43B1     		cbz	r3, .L533
 5840              	.LBB223:
 5841              	.LBB224:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5842              		.loc 2 195 0
 5843              		.syntax unified
 5844              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5845 0052 4FF05003 			mov r3, #80												
 5846 0056 83F31188 		msr basepri, r3											
 5847 005a BFF36F8F 		isb														
 5848 005e BFF34F8F 		dsb														
 5849              	
 5850              	@ 0 "" 2
 5851              	.LVL502:
 5852              		.thumb
 5853              		.syntax unified
 5854              	.L534:
 5855 0062 FEE7     		b	.L534
 5856              	.L533:
 5857              	.LBE224:
 5858              	.LBE223:
4839:../FreeRTOS/Source/tasks.c **** 				{
 5859              		.loc 1 4839 0
 5860 0064 144B     		ldr	r3, .L540
 5861 0066 1B68     		ldr	r3, [r3]
 5862 0068 DBB9     		cbnz	r3, .L535
4841:../FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5863              		.loc 1 4841 0
 5864 006a 271D     		adds	r7, r4, #4
 5865 006c 3846     		mov	r0, r7
 5866 006e FFF7FEFF 		bl	uxListRemove
 5867              	.LVL503:
4842:../FreeRTOS/Source/tasks.c **** 				}
 5868              		.loc 1 4842 0
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 207


 5869 0072 E26A     		ldr	r2, [r4, #44]
 5870 0074 0123     		movs	r3, #1
 5871 0076 9340     		lsls	r3, r3, r2
 5872 0078 1049     		ldr	r1, .L540+4
 5873 007a 0868     		ldr	r0, [r1]
 5874 007c 0343     		orrs	r3, r3, r0
 5875 007e 0B60     		str	r3, [r1]
 5876 0080 3946     		mov	r1, r7
 5877 0082 0F4B     		ldr	r3, .L540+8
 5878 0084 1420     		movs	r0, #20
 5879 0086 00FB0230 		mla	r0, r0, r2, r3
 5880 008a FFF7FEFF 		bl	vListInsertEnd
 5881              	.LVL504:
 5882              	.L536:
4851:../FreeRTOS/Source/tasks.c **** 				{
 5883              		.loc 1 4851 0
 5884 008e E26A     		ldr	r2, [r4, #44]
 5885 0090 0C4B     		ldr	r3, .L540+12
 5886 0092 1B68     		ldr	r3, [r3]
 5887 0094 DB6A     		ldr	r3, [r3, #44]
 5888 0096 9A42     		cmp	r2, r3
 5889 0098 D6D9     		bls	.L532
4855:../FreeRTOS/Source/tasks.c **** 					{
 5890              		.loc 1 4855 0
 5891 009a 45B1     		cbz	r5, .L537
4857:../FreeRTOS/Source/tasks.c **** 					}
 5892              		.loc 1 4857 0
 5893 009c 0123     		movs	r3, #1
 5894 009e 2B60     		str	r3, [r5]
 5895 00a0 D2E7     		b	.L532
 5896              	.L535:
4848:../FreeRTOS/Source/tasks.c **** 				}
 5897              		.loc 1 4848 0
 5898 00a2 04F11801 		add	r1, r4, #24
 5899 00a6 0848     		ldr	r0, .L540+16
 5900 00a8 FFF7FEFF 		bl	vListInsertEnd
 5901              	.LVL505:
 5902 00ac EFE7     		b	.L536
 5903              	.L537:
4864:../FreeRTOS/Source/tasks.c **** 					}
 5904              		.loc 1 4864 0
 5905 00ae 074B     		ldr	r3, .L540+20
 5906 00b0 0122     		movs	r2, #1
 5907 00b2 1A60     		str	r2, [r3]
 5908 00b4 C8E7     		b	.L532
 5909              	.L541:
 5910 00b6 00BF     		.align	2
 5911              	.L540:
 5912 00b8 00000000 		.word	.LANCHOR16
 5913 00bc 00000000 		.word	.LANCHOR13
 5914 00c0 00000000 		.word	.LANCHOR4
 5915 00c4 00000000 		.word	.LANCHOR10
 5916 00c8 00000000 		.word	.LANCHOR1
 5917 00cc 00000000 		.word	.LANCHOR20
 5918              		.cfi_endproc
 5919              	.LFE60:
 5921              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 208


 5922              		.align	1
 5923              		.global	xTaskNotifyStateClear
 5924              		.syntax unified
 5925              		.thumb
 5926              		.thumb_func
 5927              		.fpu fpv4-sp-d16
 5929              	xTaskNotifyStateClear:
 5930              	.LFB61:
4883:../FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 5931              		.loc 1 4883 0
 5932              		.cfi_startproc
 5933              		@ args = 0, pretend = 0, frame = 0
 5934              		@ frame_needed = 0, uses_anonymous_args = 0
 5935              	.LVL506:
 5936 0000 10B5     		push	{r4, lr}
 5937              	.LCFI53:
 5938              		.cfi_def_cfa_offset 8
 5939              		.cfi_offset 4, -8
 5940              		.cfi_offset 14, -4
4889:../FreeRTOS/Source/tasks.c **** 
 5941              		.loc 1 4889 0
 5942 0002 0446     		mov	r4, r0
 5943 0004 58B1     		cbz	r0, .L547
 5944              	.LVL507:
 5945              	.L543:
4891:../FreeRTOS/Source/tasks.c **** 		{
 5946              		.loc 1 4891 0 discriminator 4
 5947 0006 FFF7FEFF 		bl	vPortEnterCritical
 5948              	.LVL508:
4893:../FreeRTOS/Source/tasks.c **** 			{
 5949              		.loc 1 4893 0 discriminator 4
 5950 000a 94F85430 		ldrb	r3, [r4, #84]	@ zero_extendqisi2
 5951 000e DBB2     		uxtb	r3, r3
 5952 0010 022B     		cmp	r3, #2
 5953 0012 07D0     		beq	.L548
4900:../FreeRTOS/Source/tasks.c **** 			}
 5954              		.loc 1 4900 0
 5955 0014 0024     		movs	r4, #0
 5956              	.LVL509:
 5957              	.L544:
4903:../FreeRTOS/Source/tasks.c **** 
 5958              		.loc 1 4903 0
 5959 0016 FFF7FEFF 		bl	vPortExitCritical
 5960              	.LVL510:
4906:../FreeRTOS/Source/tasks.c **** 
 5961              		.loc 1 4906 0
 5962 001a 2046     		mov	r0, r4
 5963 001c 10BD     		pop	{r4, pc}
 5964              	.LVL511:
 5965              	.L547:
4889:../FreeRTOS/Source/tasks.c **** 
 5966              		.loc 1 4889 0 discriminator 1
 5967 001e 044B     		ldr	r3, .L549
 5968 0020 1C68     		ldr	r4, [r3]
 5969              	.LVL512:
 5970 0022 F0E7     		b	.L543
 5971              	.LVL513:
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 209


 5972              	.L548:
4895:../FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 5973              		.loc 1 4895 0
 5974 0024 0023     		movs	r3, #0
 5975 0026 84F85430 		strb	r3, [r4, #84]
 5976              	.LVL514:
4896:../FreeRTOS/Source/tasks.c **** 			}
 5977              		.loc 1 4896 0
 5978 002a 0124     		movs	r4, #1
 5979              	.LVL515:
 5980 002c F3E7     		b	.L544
 5981              	.L550:
 5982 002e 00BF     		.align	2
 5983              	.L549:
 5984 0030 00000000 		.word	.LANCHOR10
 5985              		.cfi_endproc
 5986              	.LFE61:
 5988              		.global	pxCurrentTCB
 5989              		.section	.bss.pxCurrentTCB,"aw",%nobits
 5990              		.align	2
 5991              		.set	.LANCHOR10,. + 0
 5994              	pxCurrentTCB:
 5995 0000 00000000 		.space	4
 5996              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 5997              		.align	2
 5998              		.set	.LANCHOR2,. + 0
 6001              	pxDelayedTaskList:
 6002 0000 00000000 		.space	4
 6003              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 6004              		.align	2
 6005              		.set	.LANCHOR8,. + 0
 6008              	pxOverflowDelayedTaskList:
 6009 0000 00000000 		.space	4
 6010              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 6011              		.align	2
 6012              		.set	.LANCHOR4,. + 0
 6015              	pxReadyTasksLists:
 6016 0000 00000000 		.space	120
 6016      00000000 
 6016      00000000 
 6016      00000000 
 6016      00000000 
 6017              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 6018              		.align	2
 6019              		.set	.LANCHOR9,. + 0
 6022              	uxCurrentNumberOfTasks:
 6023 0000 00000000 		.space	4
 6024              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 6025              		.align	2
 6026              		.set	.LANCHOR14,. + 0
 6029              	uxDeletedTasksWaitingCleanUp:
 6030 0000 00000000 		.space	4
 6031              		.section	.bss.uxPendedTicks,"aw",%nobits
 6032              		.align	2
 6033              		.set	.LANCHOR19,. + 0
 6036              	uxPendedTicks:
 6037 0000 00000000 		.space	4
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 210


 6038              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 6039              		.align	2
 6040              		.set	.LANCHOR16,. + 0
 6043              	uxSchedulerSuspended:
 6044 0000 00000000 		.space	4
 6045              		.section	.bss.uxTaskNumber,"aw",%nobits
 6046              		.align	2
 6047              		.set	.LANCHOR12,. + 0
 6050              	uxTaskNumber:
 6051 0000 00000000 		.space	4
 6052              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 6053              		.align	2
 6054              		.set	.LANCHOR13,. + 0
 6057              	uxTopReadyPriority:
 6058 0000 00000000 		.space	4
 6059              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 6060              		.align	2
 6061              		.set	.LANCHOR5,. + 0
 6064              	xDelayedTaskList1:
 6065 0000 00000000 		.space	20
 6065      00000000 
 6065      00000000 
 6065      00000000 
 6065      00000000 
 6066              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 6067              		.align	2
 6068              		.set	.LANCHOR6,. + 0
 6071              	xDelayedTaskList2:
 6072 0000 00000000 		.space	20
 6072      00000000 
 6072      00000000 
 6072      00000000 
 6072      00000000 
 6073              		.section	.bss.xIdleTaskHandle,"aw",%nobits
 6074              		.align	2
 6075              		.set	.LANCHOR17,. + 0
 6078              	xIdleTaskHandle:
 6079 0000 00000000 		.space	4
 6080              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 6081              		.align	2
 6082              		.set	.LANCHOR3,. + 0
 6085              	xNextTaskUnblockTime:
 6086 0000 00000000 		.space	4
 6087              		.section	.bss.xNumOfOverflows,"aw",%nobits
 6088              		.align	2
 6089              		.set	.LANCHOR18,. + 0
 6092              	xNumOfOverflows:
 6093 0000 00000000 		.space	4
 6094              		.section	.bss.xPendingReadyList,"aw",%nobits
 6095              		.align	2
 6096              		.set	.LANCHOR1,. + 0
 6099              	xPendingReadyList:
 6100 0000 00000000 		.space	20
 6100      00000000 
 6100      00000000 
 6100      00000000 
 6100      00000000 
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 211


 6101              		.section	.bss.xSchedulerRunning,"aw",%nobits
 6102              		.align	2
 6103              		.set	.LANCHOR11,. + 0
 6106              	xSchedulerRunning:
 6107 0000 00000000 		.space	4
 6108              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 6109              		.align	2
 6110              		.set	.LANCHOR0,. + 0
 6113              	xSuspendedTaskList:
 6114 0000 00000000 		.space	20
 6114      00000000 
 6114      00000000 
 6114      00000000 
 6114      00000000 
 6115              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 6116              		.align	2
 6117              		.set	.LANCHOR7,. + 0
 6120              	xTasksWaitingTermination:
 6121 0000 00000000 		.space	20
 6121      00000000 
 6121      00000000 
 6121      00000000 
 6121      00000000 
 6122              		.section	.bss.xTickCount,"aw",%nobits
 6123              		.align	2
 6124              		.set	.LANCHOR15,. + 0
 6127              	xTickCount:
 6128 0000 00000000 		.space	4
 6129              		.section	.bss.xYieldPending,"aw",%nobits
 6130              		.align	2
 6131              		.set	.LANCHOR20,. + 0
 6134              	xYieldPending:
 6135 0000 00000000 		.space	4
 6136              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 6137              		.align	2
 6138              	.LC0:
 6139 0000 49444C45 		.ascii	"IDLE\000"
 6139      00
 6140              		.text
 6141              	.Letext0:
 6142              		.file 3 "c:\\tools\\gcc7_2017-q4-major\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h"
 6143              		.file 4 "c:\\tools\\gcc7_2017-q4-major\\arm-none-eabi\\include\\machine\\_default_types.h"
 6144              		.file 5 "c:\\tools\\gcc7_2017-q4-major\\arm-none-eabi\\include\\sys\\lock.h"
 6145              		.file 6 "c:\\tools\\gcc7_2017-q4-major\\arm-none-eabi\\include\\sys\\_types.h"
 6146              		.file 7 "c:\\tools\\gcc7_2017-q4-major\\arm-none-eabi\\include\\sys\\reent.h"
 6147              		.file 8 "c:\\tools\\gcc7_2017-q4-major\\arm-none-eabi\\include\\stdlib.h"
 6148              		.file 9 "c:\\tools\\gcc7_2017-q4-major\\arm-none-eabi\\include\\sys\\_stdint.h"
 6149              		.file 10 "../FreeRTOS/Source/include/projdefs.h"
 6150              		.file 11 "../FreeRTOS/Source/include/list.h"
 6151              		.file 12 "../FreeRTOS/Source/include/task.h"
 6152              		.file 13 "../FreeRTOS/Source/include/portable.h"
 6153              		.file 14 "../FreeRTOS/Source/include/timers.h"
 6154              		.file 15 "c:\\tools\\gcc7_2017-q4-major\\arm-none-eabi\\include\\string.h"
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 212


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
E:\msys32\tmp\cc6hMKF5.s:18     .text.prvTaskIsTaskSuspended:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:24     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
E:\msys32\tmp\cc6hMKF5.s:92     .text.prvTaskIsTaskSuspended:00000038 $d
E:\msys32\tmp\cc6hMKF5.s:98     .text.prvTaskCheckFreeStackSpace:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:104    .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
E:\msys32\tmp\cc6hMKF5.s:138    .text.prvResetNextTaskUnblockTime:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:144    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
E:\msys32\tmp\cc6hMKF5.s:178    .text.prvResetNextTaskUnblockTime:00000024 $d
E:\msys32\tmp\cc6hMKF5.s:184    .text.prvDeleteTCB:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:190    .text.prvDeleteTCB:00000000 prvDeleteTCB
E:\msys32\tmp\cc6hMKF5.s:218    .text.prvInitialiseNewTask:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:224    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
E:\msys32\tmp\cc6hMKF5.s:344    .text.prvInitialiseTaskLists:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:350    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
E:\msys32\tmp\cc6hMKF5.s:417    .text.prvInitialiseTaskLists:00000048 $d
E:\msys32\tmp\cc6hMKF5.s:429    .text.prvAddNewTaskToReadyList:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:435    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
E:\msys32\tmp\cc6hMKF5.s:545    .text.prvAddNewTaskToReadyList:00000090 $d
E:\msys32\tmp\cc6hMKF5.s:556    .text.prvCheckTasksWaitingTermination:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:562    .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
E:\msys32\tmp\cc6hMKF5.s:629    .text.prvCheckTasksWaitingTermination:00000040 $d
E:\msys32\tmp\cc6hMKF5.s:636    .text.prvAddCurrentTaskToDelayedList:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:642    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
E:\msys32\tmp\cc6hMKF5.s:743    .text.prvAddCurrentTaskToDelayedList:0000007c $d
E:\msys32\tmp\cc6hMKF5.s:754    .text.prvIdleTask:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:760    .text.prvIdleTask:00000000 prvIdleTask
E:\msys32\tmp\cc6hMKF5.s:807    .text.prvIdleTask:00000028 $d
E:\msys32\tmp\cc6hMKF5.s:813    .text.xTaskCreate:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:820    .text.xTaskCreate:00000000 xTaskCreate
E:\msys32\tmp\cc6hMKF5.s:925    .text.vTaskDelete:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:932    .text.vTaskDelete:00000000 vTaskDelete
E:\msys32\tmp\cc6hMKF5.s:1084   .text.vTaskDelete:000000b8 $d
E:\msys32\tmp\cc6hMKF5.s:1098   .text.eTaskGetState:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:1105   .text.eTaskGetState:00000000 eTaskGetState
E:\msys32\tmp\cc6hMKF5.s:1219   .text.eTaskGetState:0000006c $d
E:\msys32\tmp\cc6hMKF5.s:1228   .text.uxTaskPriorityGet:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:1235   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
E:\msys32\tmp\cc6hMKF5.s:1274   .text.uxTaskPriorityGet:0000001c $d
E:\msys32\tmp\cc6hMKF5.s:1279   .text.uxTaskPriorityGetFromISR:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:1286   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
E:\msys32\tmp\cc6hMKF5.s:1349   .text.uxTaskPriorityGetFromISR:0000002c $d
E:\msys32\tmp\cc6hMKF5.s:1354   .text.vTaskPrioritySet:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:1361   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
E:\msys32\tmp\cc6hMKF5.s:1539   .text.vTaskPrioritySet:000000cc $d
E:\msys32\tmp\cc6hMKF5.s:1547   .text.vTaskResume:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:1554   .text.vTaskResume:00000000 vTaskResume
E:\msys32\tmp\cc6hMKF5.s:1657   .text.vTaskResume:00000074 $d
E:\msys32\tmp\cc6hMKF5.s:1665   .text.xTaskResumeFromISR:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:1672   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
E:\msys32\tmp\cc6hMKF5.s:1805   .text.xTaskResumeFromISR:00000090 $d
E:\msys32\tmp\cc6hMKF5.s:1814   .text.vTaskStartScheduler:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:1821   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
E:\msys32\tmp\cc6hMKF5.s:1924   .text.vTaskStartScheduler:0000006c $d
E:\msys32\tmp\cc6hMKF5.s:1936   .text.vTaskEndScheduler:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:1943   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 213


E:\msys32\tmp\cc6hMKF5.s:1981   .text.vTaskEndScheduler:00000020 $d
E:\msys32\tmp\cc6hMKF5.s:1986   .text.vTaskSuspendAll:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:1993   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
E:\msys32\tmp\cc6hMKF5.s:2010   .text.vTaskSuspendAll:0000000c $d
E:\msys32\tmp\cc6hMKF5.s:2015   .text.xTaskGetTickCount:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:2022   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
E:\msys32\tmp\cc6hMKF5.s:2038   .text.xTaskGetTickCount:00000008 $d
E:\msys32\tmp\cc6hMKF5.s:2043   .text.xTaskGetTickCountFromISR:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:2050   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
E:\msys32\tmp\cc6hMKF5.s:2073   .text.xTaskGetTickCountFromISR:0000000c $d
E:\msys32\tmp\cc6hMKF5.s:2078   .text.uxTaskGetNumberOfTasks:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:2085   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
E:\msys32\tmp\cc6hMKF5.s:2100   .text.uxTaskGetNumberOfTasks:00000008 $d
E:\msys32\tmp\cc6hMKF5.s:2105   .text.pcTaskGetName:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:2112   .text.pcTaskGetName:00000000 pcTaskGetName
E:\msys32\tmp\cc6hMKF5.s:2158   .text.pcTaskGetName:00000024 $d
E:\msys32\tmp\cc6hMKF5.s:2165   .text.xTaskIncrementTick:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:2172   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
E:\msys32\tmp\cc6hMKF5.s:2376   .text.xTaskIncrementTick:000000ec $d
E:\msys32\tmp\cc6hMKF5.s:2391   .text.xTaskResumeAll:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:2398   .text.xTaskResumeAll:00000000 xTaskResumeAll
E:\msys32\tmp\cc6hMKF5.s:2582   .text.xTaskResumeAll:000000d0 $d
E:\msys32\tmp\cc6hMKF5.s:2595   .text.vTaskDelayUntil:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:2602   .text.vTaskDelayUntil:00000000 vTaskDelayUntil
E:\msys32\tmp\cc6hMKF5.s:2767   .text.vTaskDelayUntil:00000098 $d
E:\msys32\tmp\cc6hMKF5.s:2775   .text.vTaskDelay:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:2782   .text.vTaskDelay:00000000 vTaskDelay
E:\msys32\tmp\cc6hMKF5.s:2855   .text.vTaskDelay:00000044 $d
E:\msys32\tmp\cc6hMKF5.s:2861   .text.vTaskSwitchContext:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:2868   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
E:\msys32\tmp\cc6hMKF5.s:3025   .text.vTaskSwitchContext:000000b4 $d
E:\msys32\tmp\cc6hMKF5.s:3036   .text.vTaskSuspend:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:3043   .text.vTaskSuspend:00000000 vTaskSuspend
E:\msys32\tmp\cc6hMKF5.s:3209   .text.vTaskSuspend:000000cc $d
E:\msys32\tmp\cc6hMKF5.s:3221   .text.vTaskPlaceOnEventList:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:3228   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
E:\msys32\tmp\cc6hMKF5.s:3281   .text.vTaskPlaceOnEventList:0000002c $d
E:\msys32\tmp\cc6hMKF5.s:3286   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:3293   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
E:\msys32\tmp\cc6hMKF5.s:3381   .text.vTaskPlaceOnUnorderedEventList:00000054 $d
E:\msys32\tmp\cc6hMKF5.s:3387   .text.vTaskPlaceOnEventListRestricted:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:3394   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
E:\msys32\tmp\cc6hMKF5.s:3456   .text.vTaskPlaceOnEventListRestricted:00000034 $d
E:\msys32\tmp\cc6hMKF5.s:3461   .text.xTaskRemoveFromEventList:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:3468   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
E:\msys32\tmp\cc6hMKF5.s:3571   .text.xTaskRemoveFromEventList:00000074 $d
E:\msys32\tmp\cc6hMKF5.s:3581   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:3588   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
E:\msys32\tmp\cc6hMKF5.s:3692   .text.vTaskRemoveFromUnorderedEventList:00000074 $d
E:\msys32\tmp\cc6hMKF5.s:3703   .text.vTaskSetTimeOutState:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:3710   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
E:\msys32\tmp\cc6hMKF5.s:3765   .text.vTaskSetTimeOutState:00000030 $d
E:\msys32\tmp\cc6hMKF5.s:3771   .text.vTaskInternalSetTimeOutState:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:3778   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
E:\msys32\tmp\cc6hMKF5.s:3799   .text.vTaskInternalSetTimeOutState:00000010 $d
E:\msys32\tmp\cc6hMKF5.s:3805   .text.xTaskCheckForTimeOut:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:3812   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 214


E:\msys32\tmp\cc6hMKF5.s:3944   .text.xTaskCheckForTimeOut:00000078 $d
E:\msys32\tmp\cc6hMKF5.s:3951   .text.vTaskMissedYield:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:3958   .text.vTaskMissedYield:00000000 vTaskMissedYield
E:\msys32\tmp\cc6hMKF5.s:3974   .text.vTaskMissedYield:00000008 $d
E:\msys32\tmp\cc6hMKF5.s:3979   .text.uxTaskGetTaskNumber:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:3986   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
E:\msys32\tmp\cc6hMKF5.s:4012   .text.vTaskSetTaskNumber:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:4019   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
E:\msys32\tmp\cc6hMKF5.s:4040   .text.vTaskGetInfo:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:4047   .text.vTaskGetInfo:00000000 vTaskGetInfo
E:\msys32\tmp\cc6hMKF5.s:4160   .text.vTaskGetInfo:00000074 $d
E:\msys32\tmp\cc6hMKF5.s:4165   .text.prvListTasksWithinSingleList:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:4171   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
E:\msys32\tmp\cc6hMKF5.s:4272   .text.uxTaskGetSystemState:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:4279   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
E:\msys32\tmp\cc6hMKF5.s:4395   .text.uxTaskGetSystemState:00000098 $d
E:\msys32\tmp\cc6hMKF5.s:4405   .text.xTaskGetCurrentTaskHandle:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:4412   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
E:\msys32\tmp\cc6hMKF5.s:4428   .text.xTaskGetCurrentTaskHandle:00000008 $d
E:\msys32\tmp\cc6hMKF5.s:4433   .text.xTaskGetSchedulerState:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:4440   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
E:\msys32\tmp\cc6hMKF5.s:4472   .text.xTaskGetSchedulerState:00000018 $d
E:\msys32\tmp\cc6hMKF5.s:4478   .text.xTaskPriorityInherit:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:4485   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
E:\msys32\tmp\cc6hMKF5.s:4623   .text.xTaskPriorityInherit:000000ac $d
E:\msys32\tmp\cc6hMKF5.s:4630   .text.xTaskPriorityDisinherit:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:4637   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
E:\msys32\tmp\cc6hMKF5.s:4791   .text.xTaskPriorityDisinherit:000000a4 $d
E:\msys32\tmp\cc6hMKF5.s:4798   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:4805   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
E:\msys32\tmp\cc6hMKF5.s:4964   .text.vTaskPriorityDisinheritAfterTimeout:000000b4 $d
E:\msys32\tmp\cc6hMKF5.s:4971   .text.uxTaskResetEventItemValue:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:4978   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
E:\msys32\tmp\cc6hMKF5.s:5001   .text.uxTaskResetEventItemValue:00000014 $d
E:\msys32\tmp\cc6hMKF5.s:5006   .text.pvTaskIncrementMutexHeldCount:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:5013   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
E:\msys32\tmp\cc6hMKF5.s:5039   .text.pvTaskIncrementMutexHeldCount:00000018 $d
E:\msys32\tmp\cc6hMKF5.s:5044   .text.ulTaskNotifyTake:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:5051   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
E:\msys32\tmp\cc6hMKF5.s:5147   .text.ulTaskNotifyTake:00000070 $d
E:\msys32\tmp\cc6hMKF5.s:5153   .text.xTaskNotifyWait:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:5160   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
E:\msys32\tmp\cc6hMKF5.s:5276   .text.xTaskNotifyWait:00000090 $d
E:\msys32\tmp\cc6hMKF5.s:5282   .text.xTaskGenericNotify:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:5289   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
E:\msys32\tmp\cc6hMKF5.s:5355   .text.xTaskGenericNotify:0000003e $d
E:\msys32\tmp\cc6hMKF5.s:5359   .text.xTaskGenericNotify:00000042 $t
E:\msys32\tmp\cc6hMKF5.s:5481   .text.xTaskGenericNotify:000000d0 $d
E:\msys32\tmp\cc6hMKF5.s:5489   .text.xTaskGenericNotifyFromISR:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:5496   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
E:\msys32\tmp\cc6hMKF5.s:5581   .text.xTaskGenericNotifyFromISR:0000005c $d
E:\msys32\tmp\cc6hMKF5.s:5585   .text.xTaskGenericNotifyFromISR:00000060 $t
E:\msys32\tmp\cc6hMKF5.s:5729   .text.xTaskGenericNotifyFromISR:00000108 $d
E:\msys32\tmp\cc6hMKF5.s:5739   .text.vTaskNotifyGiveFromISR:00000000 $t
E:\msys32\tmp\cc6hMKF5.s:5746   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
E:\msys32\tmp\cc6hMKF5.s:5912   .text.vTaskNotifyGiveFromISR:000000b8 $d
E:\msys32\tmp\cc6hMKF5.s:5922   .text.xTaskNotifyStateClear:00000000 $t
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 215


E:\msys32\tmp\cc6hMKF5.s:5929   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
E:\msys32\tmp\cc6hMKF5.s:5984   .text.xTaskNotifyStateClear:00000030 $d
E:\msys32\tmp\cc6hMKF5.s:5994   .bss.pxCurrentTCB:00000000 pxCurrentTCB
E:\msys32\tmp\cc6hMKF5.s:5990   .bss.pxCurrentTCB:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:5997   .bss.pxDelayedTaskList:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:6001   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
E:\msys32\tmp\cc6hMKF5.s:6004   .bss.pxOverflowDelayedTaskList:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:6008   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
E:\msys32\tmp\cc6hMKF5.s:6011   .bss.pxReadyTasksLists:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:6015   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
E:\msys32\tmp\cc6hMKF5.s:6018   .bss.uxCurrentNumberOfTasks:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:6022   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
E:\msys32\tmp\cc6hMKF5.s:6025   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:6029   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
E:\msys32\tmp\cc6hMKF5.s:6032   .bss.uxPendedTicks:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:6036   .bss.uxPendedTicks:00000000 uxPendedTicks
E:\msys32\tmp\cc6hMKF5.s:6039   .bss.uxSchedulerSuspended:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:6043   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
E:\msys32\tmp\cc6hMKF5.s:6046   .bss.uxTaskNumber:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:6050   .bss.uxTaskNumber:00000000 uxTaskNumber
E:\msys32\tmp\cc6hMKF5.s:6053   .bss.uxTopReadyPriority:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:6057   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
E:\msys32\tmp\cc6hMKF5.s:6060   .bss.xDelayedTaskList1:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:6064   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
E:\msys32\tmp\cc6hMKF5.s:6067   .bss.xDelayedTaskList2:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:6071   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
E:\msys32\tmp\cc6hMKF5.s:6074   .bss.xIdleTaskHandle:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:6078   .bss.xIdleTaskHandle:00000000 xIdleTaskHandle
E:\msys32\tmp\cc6hMKF5.s:6081   .bss.xNextTaskUnblockTime:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:6085   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
E:\msys32\tmp\cc6hMKF5.s:6088   .bss.xNumOfOverflows:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:6092   .bss.xNumOfOverflows:00000000 xNumOfOverflows
E:\msys32\tmp\cc6hMKF5.s:6095   .bss.xPendingReadyList:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:6099   .bss.xPendingReadyList:00000000 xPendingReadyList
E:\msys32\tmp\cc6hMKF5.s:6102   .bss.xSchedulerRunning:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:6106   .bss.xSchedulerRunning:00000000 xSchedulerRunning
E:\msys32\tmp\cc6hMKF5.s:6109   .bss.xSuspendedTaskList:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:6113   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
E:\msys32\tmp\cc6hMKF5.s:6116   .bss.xTasksWaitingTermination:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:6120   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
E:\msys32\tmp\cc6hMKF5.s:6123   .bss.xTickCount:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:6127   .bss.xTickCount:00000000 xTickCount
E:\msys32\tmp\cc6hMKF5.s:6130   .bss.xYieldPending:00000000 $d
E:\msys32\tmp\cc6hMKF5.s:6134   .bss.xYieldPending:00000000 xYieldPending
E:\msys32\tmp\cc6hMKF5.s:6137   .rodata.vTaskStartScheduler.str1.4:00000000 $d

UNDEFINED SYMBOLS
vPortFree
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
vPortExitCritical
uxListRemove
vListInsert
ARM GAS  E:\msys32\tmp\cc6hMKF5.s 			page 216


vApplicationIdleHook
pvPortMalloc
vPortValidateInterruptPriority
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
vApplicationStackOverflowHook
