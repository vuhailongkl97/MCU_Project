ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"port.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskExitError,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvTaskExitError:
  25              	.LFB6:
  26              		.file 1 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c"
   1:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
   2:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * FreeRTOS Kernel V10.0.1
   3:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *
   5:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * the Software without restriction, including without limitation the rights to
   8:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * subject to the following conditions:
  11:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *
  12:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * copies or substantial portions of the Software.
  14:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *
  15:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *
  22:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * http://www.FreeRTOS.org
  23:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * http://aws.amazon.com/freertos
  24:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *
  25:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * 1 tab == 4 spaces!
  26:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
  27:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  28:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------
  29:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Implementation of functions defined in portable.h for the ARM CM4F port.
  30:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  *----------------------------------------------------------*/
  31:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  32:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Scheduler includes. */
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 2


  33:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "FreeRTOS.h"
  34:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #include "task.h"
  35:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  36:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #ifndef __VFP_FP__
  37:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#error This port can only be used when the project options are configured to enable hardware float
  38:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif
  39:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  40:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #ifndef configSYSTICK_CLOCK_HZ
  41:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#define configSYSTICK_CLOCK_HZ configCPU_CLOCK_HZ
  42:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Ensure the SysTick is clocked at the same frequency as the core. */
  43:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 1UL << 2UL )
  44:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #else
  45:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* The way the SysTick is clocked is not modified in case it is not the same
  46:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	as the core. */
  47:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#define portNVIC_SYSTICK_CLK_BIT	( 0 )
  48:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif
  49:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  50:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the core.  Registers first... */
  51:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CTRL_REG			( * ( ( volatile uint32_t * ) 0xe000e010 ) )
  52:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_LOAD_REG			( * ( ( volatile uint32_t * ) 0xe000e014 ) )
  53:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_CURRENT_VALUE_REG	( * ( ( volatile uint32_t * ) 0xe000e018 ) )
  54:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSPRI2_REG				( * ( ( volatile uint32_t * ) 0xe000ed20 ) )
  55:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* ...then bits in the registers. */
  56:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_INT_BIT			( 1UL << 1UL )
  57:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_ENABLE_BIT			( 1UL << 0UL )
  58:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_COUNT_FLAG_BIT		( 1UL << 16UL )
  59:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSVCLEAR_BIT 			( 1UL << 27UL )
  60:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PEND_SYSTICK_CLEAR_BIT		( 1UL << 25UL )
  61:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  62:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants used to detect a Cortex-M7 r0p1 core, which should use the ARM_CM7
  63:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** r0p1 port. */
  64:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portCPUID							( * ( ( volatile uint32_t * ) 0xE000ed00 ) )
  65:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p1_ID				( 0x410FC271UL )
  66:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portCORTEX_M7_r0p0_ID				( 0x410FC270UL )
  67:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  68:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_PENDSV_PRI					( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 16UL )
  69:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_SYSTICK_PRI				( ( ( uint32_t ) configKERNEL_INTERRUPT_PRIORITY ) << 24UL )
  70:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  71:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to check the validity of an interrupt priority. */
  72:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portFIRST_USER_INTERRUPT_NUMBER		( 16 )
  73:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portNVIC_IP_REGISTERS_OFFSET_16 	( 0xE000E3F0 )
  74:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portAIRCR_REG						( * ( ( volatile uint32_t * ) 0xE000ED0C ) )
  75:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_8_BIT_VALUE					( ( uint8_t ) 0xff )
  76:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portTOP_BIT_OF_BYTE					( ( uint8_t ) 0x80 )
  77:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_PRIGROUP_BITS				( ( uint8_t ) 7 )
  78:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portPRIORITY_GROUP_MASK				( 0x07UL << 8UL )
  79:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portPRIGROUP_SHIFT					( 8UL )
  80:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  81:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Masks off all bits but the VECTACTIVE bits in the ICSR register. */
  82:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portVECTACTIVE_MASK					( 0xFFUL )
  83:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  84:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to manipulate the VFP. */
  85:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portFPCCR							( ( volatile uint32_t * ) 0xe000ef34 ) /* Floating point context control re
  86:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portASPEN_AND_LSPEN_BITS			( 0x3UL << 30UL )
  87:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  88:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Constants required to set up the initial stack. */
  89:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_XPSR					( 0x01000000 )
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 3


  90:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portINITIAL_EXC_RETURN				( 0xfffffffd )
  91:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  92:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* The systick is a 24-bit counter. */
  93:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portMAX_24_BIT_NUMBER				( 0xffffffUL )
  94:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  95:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* For strict compliance with the Cortex-M spec the task start address should
  96:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** have bit-0 clear, as it is loaded into the PC on exit from an ISR. */
  97:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portSTART_ADDRESS_MASK		( ( StackType_t ) 0xfffffffeUL )
  98:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
  99:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* A fiddle factor to estimate the number of SysTick counts that would have
 100:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** occurred while the SysTick counter is stopped during tickless idle
 101:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** calculations. */
 102:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #define portMISSED_COUNTS_FACTOR			( 45UL )
 103:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 104:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Let the user override the pre-loading of the initial LR with the address of
 105:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** prvTaskExitError() in case it messes up unwinding of the stack in the
 106:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** debugger. */
 107:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #ifdef configTASK_RETURN_ADDRESS
 108:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#define portTASK_RETURN_ADDRESS	configTASK_RETURN_ADDRESS
 109:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #else
 110:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#define portTASK_RETURN_ADDRESS	prvTaskExitError
 111:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif
 112:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 113:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 114:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the timer to generate the tick interrupts.  The implementation in this
 115:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * file is weak to allow application writers to change the timer used to
 116:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * generate the tick interrupt.
 117:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 118:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSetupTimerInterrupt( void );
 119:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 120:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 121:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Exception handlers.
 122:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 123:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void ) __attribute__ (( naked ));
 124:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void );
 125:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void ) __attribute__ (( naked ));
 126:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 127:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 128:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Start first task is a separate function so it can be tested in isolation.
 129:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 130:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void ) __attribute__ (( naked ));
 131:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 132:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 133:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Function to enable the VFP.
 134:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 135:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void ) __attribute__ (( naked ));
 136:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 137:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 138:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Used to catch tasks that attempt to return from their implementing function.
 139:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 140:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void );
 141:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 142:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 143:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 144:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* Each task maintains its own interrupt status in the critical nesting
 145:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** variable. */
 146:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static UBaseType_t uxCriticalNesting = 0xaaaaaaaa;
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 4


 147:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 148:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 149:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * The number of SysTick increments that make up one tick period.
 150:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 151:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 152:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	static uint32_t ulTimerCountsForOneTick = 0;
 153:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 154:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 155:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 156:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * The maximum number of tick periods that can be suppressed is limited by the
 157:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * 24 bit resolution of the SysTick timer.
 158:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 159:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 160:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	static uint32_t xMaximumPossibleSuppressedTicks = 0;
 161:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 162:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 163:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 164:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Compensate for the CPU cycles that pass while the SysTick is stopped (low
 165:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * power functionality only.
 166:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 167:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 168:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	static uint32_t ulStoppedTimerCompensation = 0;
 169:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configUSE_TICKLESS_IDLE */
 170:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 171:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 172:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Used by the portASSERT_IF_INTERRUPT_PRIORITY_INVALID() macro to ensure
 173:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * FreeRTOS API functions are not called from interrupts that have been assigned
 174:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * a priority above configMAX_SYSCALL_INTERRUPT_PRIORITY.
 175:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 176:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if( configASSERT_DEFINED == 1 )
 177:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	 static uint8_t ucMaxSysCallPriority = 0;
 178:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	 static uint32_t ulMaxPRIGROUPValue = 0;
 179:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	 static const volatile uint8_t * const pcInterruptPriorityRegisters = ( const volatile uint8_t * c
 180:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* configASSERT_DEFINED */
 181:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 182:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 183:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 184:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 185:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 186:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 187:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParam
 188:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 189:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 190:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	interrupt. */
 191:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 192:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Offset added to account for the way the MCU uses the stack on entry/exit
 193:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	of interrupts, and to ensure alignment. */
 194:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 196:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 197:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 198:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 199:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 200:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 201:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 202:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Save code space by skipping register initialisation. */
 203:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 5


 204:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 205:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 206:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* A save method is being used that requires each task to maintain its
 207:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	own exec return value. */
 208:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 209:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*pxTopOfStack = portINITIAL_EXC_RETURN;
 210:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 211:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 212:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 213:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	return pxTopOfStack;
 214:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 215:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 216:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 217:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvTaskExitError( void )
 218:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
  27              		.loc 1 218 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32 0000 82B0     		sub	sp, sp, #8
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
 219:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** volatile uint32_t ulDummy = 0;
  35              		.loc 1 219 0
  36 0002 0023     		movs	r3, #0
  37 0004 0193     		str	r3, [sp, #4]
 220:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 221:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* A function that implements a task must not exit or attempt to return to
 222:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	its caller as there is nothing to return to.  If a task wants to exit it
 223:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	should instead call vTaskDelete( NULL ).
 224:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 225:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	Artificially force an assert() to be triggered if configASSERT() is
 226:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	defined, then stop here so application writers can catch the error. */
 227:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting == ~0UL );
  38              		.loc 1 227 0
  39 0006 0D4B     		ldr	r3, .L6
  40 0008 1B68     		ldr	r3, [r3]
  41 000a B3F1FF3F 		cmp	r3, #-1
  42 000e 08D0     		beq	.L2
  43              	.LBB31:
  44              	.LBB32:
  45              		.file 2 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 6


  15:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 7


  72:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 8


 129:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 9


 186:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  46              		.loc 2 195 0
  47              		.syntax unified
  48              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  49 0010 4FF05003 			mov r3, #80												
  50 0014 83F31188 		msr basepri, r3											
  51 0018 BFF36F8F 		isb														
  52 001c BFF34F8F 		dsb														
  53              	
  54              	@ 0 "" 2
  55              	.LVL0:
  56              		.thumb
  57              		.syntax unified
  58              	.L3:
  59 0020 FEE7     		b	.L3
  60              	.L2:
  61              	.LBE32:
  62              	.LBE31:
  63              	.LBB33:
  64              	.LBB34:
  65              		.syntax unified
  66              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  67 0022 4FF05003 			mov r3, #80												
  68 0026 83F31188 		msr basepri, r3											
  69 002a BFF36F8F 		isb														
  70 002e BFF34F8F 		dsb														
  71              	
  72              	@ 0 "" 2
  73              	.LVL1:
  74              		.thumb
  75              		.syntax unified
  76              	.L4:
  77              	.LBE34:
  78              	.LBE33:
 228:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 229:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	while( ulDummy == 0 )
  79              		.loc 1 229 0 discriminator 1
  80 0032 019B     		ldr	r3, [sp, #4]
  81 0034 002B     		cmp	r3, #0
  82 0036 FCD0     		beq	.L4
 230:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 231:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* This file calls prvTaskExitError() after the scheduler has been
 232:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		started to remove a compiler warning about the function being defined
 233:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		but never called.  ulDummy is used purely to quieten other warnings
 234:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		about code appearing after this function is called - making ulDummy
 235:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		volatile makes the compiler think the function could return and
 236:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		therefore not output an 'unreachable code' warning for code that appears
 237:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		after it. */
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 10


 238:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 239:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
  83              		.loc 1 239 0
  84 0038 02B0     		add	sp, sp, #8
  85              	.LCFI1:
  86              		.cfi_def_cfa_offset 0
  87              		@ sp needed
  88 003a 7047     		bx	lr
  89              	.L7:
  90              		.align	2
  91              	.L6:
  92 003c 00000000 		.word	.LANCHOR0
  93              		.cfi_endproc
  94              	.LFE6:
  96              		.section	.text.prvPortStartFirstTask,"ax",%progbits
  97              		.align	1
  98              		.syntax unified
  99              		.thumb
 100              		.thumb_func
 101              		.fpu fpv4-sp-d16
 103              	prvPortStartFirstTask:
 104              	.LFB8:
 240:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 241:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 242:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortSVCHandler( void )
 243:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 244:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile (
 245:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 246:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r1, [r3]					\n" /* Use pxCurrentTCBConst to get the pxCurrentTCB address. */
 247:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr r0, [r1]					\n" /* The first item in pxCurrentTCB is the task top of stack. */
 248:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldmia r0!, {r4-r11, r14}		\n" /* Pop the registers that are not automatically saved on excep
 249:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr psp, r0						\n" /* Restore the task stack pointer. */
 250:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	isb								\n"
 251:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	mov r0, #0 						\n"
 252:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	msr	basepri, r0					\n"
 253:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	bx r14							\n"
 254:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"									\n"
 255:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	.align 4						\n"
 256:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
 257:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				);
 258:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 259:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 260:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 261:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void prvPortStartFirstTask( void )
 262:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 105              		.loc 1 262 0
 106              		.cfi_startproc
 107              		@ Naked Function: prologue and epilogue provided by programmer.
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 263:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the first task.  This also clears the bit that indicates the FPU is
 264:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	in use in case the FPU was used before the scheduler was started - which
 265:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	would otherwise result in the unnecessary leaving of space in the SVC stack
 266:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	for lazy saving of FPU registers. */
 267:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile(
 110              		.loc 1 267 0
 111              		.syntax unified
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 11


 112              	@ 267 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 113 0000 0848     		 ldr r0, =0xE000ED08 	
 114 0002 0068     	 ldr r0, [r0] 			
 115 0004 0068     	 ldr r0, [r0] 			
 116 0006 80F30888 	 msr msp, r0			
 117 000a 4FF00000 	 mov r0, #0			
 118 000e 80F31488 	 msr control, r0		
 119 0012 62B6     	 cpsie i				
 120 0014 61B6     	 cpsie f				
 121 0016 BFF34F8F 	 dsb					
 122 001a BFF36F8F 	 isb					
 123 001e 00DF     	 svc 0					
 124 0020 00BF     	 nop					
 125              	
 126              	@ 0 "" 2
 268:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, =0xE000ED08 	\n" /* Use the NVIC offset register to locate the stack. */
 269:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 270:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" ldr r0, [r0] 			\n"
 271:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" msr msp, r0			\n" /* Set the msp back to the start of the stack. */
 272:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" mov r0, #0			\n" /* Clear the bit that indicates the FPU is in use, see comment above. */
 273:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" msr control, r0		\n"
 274:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" cpsie i				\n" /* Globally enable interrupts. */
 275:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" cpsie f				\n"
 276:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" dsb					\n"
 277:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" isb					\n"
 278:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" svc 0					\n" /* System call to start first task. */
 279:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					" nop					\n"
 280:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				);
 281:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 127              		.loc 1 281 0
 128              		.thumb
 129              		.syntax unified
 130              		.cfi_endproc
 131              	.LFE8:
 133 0022 0000     		.section	.text.vPortEnableVFP,"ax",%progbits
 134              		.align	1
 135              		.syntax unified
 136              		.thumb
 137              		.thumb_func
 138              		.fpu fpv4-sp-d16
 140              	vPortEnableVFP:
 141              	.LFB16:
 282:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 283:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 284:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 285:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * See header file for description.
 286:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 287:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** BaseType_t xPortStartScheduler( void )
 288:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 289:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 290:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
 291:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );
 292:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 293:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This port can be used on all revisions of the Cortex-M7 core other than
 294:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	the r0p1 parts.  r0p1 parts should use the port from the
 295:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/source/portable/GCC/ARM_CM7/r0p1 directory. */
 296:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 12


 297:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 298:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 299:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#if( configASSERT_DEFINED == 1 )
 300:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 301:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		volatile uint32_t ulOriginalPriority;
 302:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_I
 303:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		volatile uint8_t ucMaxPriorityValue;
 304:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 305:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Determine the maximum priority from which ISR safe FreeRTOS API
 306:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		functions can be called.  ISR safe functions are those that end in
 307:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
 308:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ensure interrupt entry is as fast and simple as possible.
 309:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 310:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		Save the interrupt priority value that is about to be clobbered. */
 311:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulOriginalPriority = *pucFirstUserPriorityRegister;
 312:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 313:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Determine the number of priority bits available.  First write to all
 314:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		possible bits. */
 315:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 316:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 317:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Read the value back to see how many bits stuck. */
 318:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 319:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 320:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Use the same mask on the maximum system call priority. */
 321:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 322:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 323:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Calculate the maximum acceptable priority group value for the number
 324:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		of bits read back. */
 325:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 326:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 327:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 328:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			ulMaxPRIGROUPValue--;
 329:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 330:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 331:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 332:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		#ifdef __NVIC_PRIO_BITS
 333:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 334:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Check the CMSIS configuration that defines the number of
 335:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			priority bits matches the number of priority bits actually queried
 336:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			from the hardware. */
 337:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 338:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 339:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		#endif
 340:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 341:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		#ifdef configPRIO_BITS
 342:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 343:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Check the FreeRTOS configuration that defines the number of
 344:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			priority bits matches the number of priority bits actually queried
 345:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			from the hardware. */
 346:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 347:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 348:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		#endif
 349:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 350:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Shift the priority group value back to its position within the AIRCR
 351:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		register. */
 352:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 353:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 13


 354:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 355:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Restore the clobbered interrupt priority register to its original
 356:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		value. */
 357:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		*pucFirstUserPriorityRegister = ulOriginalPriority;
 358:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 359:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#endif /* conifgASSERT_DEFINED */
 360:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 361:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Make PendSV and SysTick the lowest priority interrupts. */
 362:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 363:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 364:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 365:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the timer that generates the tick ISR.  Interrupts are disabled
 366:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	here already. */
 367:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	vPortSetupTimerInterrupt();
 368:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 369:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Initialise the critical nesting count ready for the first task. */
 370:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting = 0;
 371:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 372:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Ensure the VFP is enabled - it should be anyway. */
 373:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	vPortEnableVFP();
 374:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 375:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Lazy save always. */
 376:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 377:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 378:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Start the first task. */
 379:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	prvPortStartFirstTask();
 380:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 381:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Should never get here as the tasks will now be executing!  Call the task
 382:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	exit error function to prevent compiler warnings about a static function
 383:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	not being called in the case that the application writer overrides this
 384:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	functionality by defining configTASK_RETURN_ADDRESS.  Call
 385:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	vTaskSwitchContext() so link time optimisation does not remove the
 386:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	symbol. */
 387:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	vTaskSwitchContext();
 388:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	prvTaskExitError();
 389:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 390:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Should not get here! */
 391:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	return 0;
 392:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 393:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 394:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 395:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEndScheduler( void )
 396:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 397:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 398:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	Artificially force an assert. */
 399:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting == 1000UL );
 400:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 401:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 402:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 403:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortEnterCritical( void )
 404:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 405:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 406:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting++;
 407:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 408:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is not the interrupt safe version of the enter critical function so
 409:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	assert() if it is being called from an interrupt context.  Only API
 410:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	functions that end in "FromISR" can be used in an interrupt.  Only assert if
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 14


 411:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	the critical nesting count is 1 to protect against recursive calls if the
 412:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	assert function also uses a critical section. */
 413:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 1 )
 414:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 415:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 416:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 417:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 418:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 419:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 420:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void vPortExitCritical( void )
 421:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 422:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting );
 423:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 424:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 425:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 426:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		portENABLE_INTERRUPTS();
 427:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 428:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 429:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 430:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 431:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortPendSVHandler( void )
 432:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 433:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is a naked function. */
 434:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 435:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 436:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	(
 437:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mrs r0, psp							\n"
 438:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	isb									\n"
 439:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 440:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r3, pxCurrentTCBConst			\n" /* Get the location of the current TCB. */
 441:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr	r2, [r3]						\n"
 442:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 443:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, push high vfp registers. *
 444:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 445:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	vstmdbeq r0!, {s16-s31}				\n"
 446:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 447:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb r0!, {r4-r11, r14}			\n" /* Save the core registers. */
 448:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	str r0, [r2]						\n" /* Save the new top of stack into the first member of the TCB. */
 449:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 450:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	stmdb sp!, {r0, r3}					\n"
 451:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, %0 							\n"
 452:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 453:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	dsb									\n"
 454:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	isb									\n"
 455:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	bl vTaskSwitchContext				\n"
 456:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	mov r0, #0							\n"
 457:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr basepri, r0						\n"
 458:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia sp!, {r0, r3}					\n"
 459:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 460:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r1, [r3]						\n" /* The first item in pxCurrentTCB is the task top of stack. */
 461:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldr r0, [r1]						\n"
 462:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 463:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	ldmia r0!, {r4-r11, r14}			\n" /* Pop the core registers. */
 464:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 465:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	tst r14, #0x10						\n" /* Is the task using the FPU context?  If so, pop the high vfp registers
 466:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	it eq								\n"
 467:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	vldmiaeq r0!, {s16-s31}				\n"
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 15


 468:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 469:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	msr psp, r0							\n"
 470:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	isb									\n"
 471:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 472:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#ifdef WORKAROUND_PMU_CM001 /* XMC4000 specific errata workaround. */
 473:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		#if WORKAROUND_PMU_CM001 == 1
 474:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"			push { r14 }				\n"
 475:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"			pop { pc }					\n"
 476:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		#endif
 477:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#endif
 478:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 479:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	bx r14								\n"
 480:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"										\n"
 481:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"	.align 4							\n"
 482:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
 483:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
 484:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	);
 485:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 486:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 487:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 488:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** void xPortSysTickHandler( void )
 489:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 490:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 491:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	executes all interrupts must be unmasked.  There is therefore no need to
 492:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	save and then restore the interrupt mask value as its value is already
 493:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	known. */
 494:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 495:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 496:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Increment the RTOS tick. */
 497:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		if( xTaskIncrementTick() != pdFALSE )
 498:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 499:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* A context switch is required.  Context switching is performed in
 500:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			the PendSV interrupt.  Pend the PendSV interrupt. */
 501:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 502:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 503:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 504:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portENABLE_INTERRUPTS();
 505:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 506:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 507:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 508:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if( configUSE_TICKLESS_IDLE == 1 )
 509:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 510:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
 511:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 512:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
 513:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	TickType_t xModifiableIdleTime;
 514:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 515:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Make sure the SysTick reload value does not overflow the counter. */
 516:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 517:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 518:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 519:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 520:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 521:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
 522:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		is accounted for as best it can be, but using the tickless mode will
 523:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		inevitably result in some tiny drift of the time maintained by the
 524:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		kernel with respect to calendar time. */
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 16


 525:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 526:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 527:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Calculate the reload value required to wait xExpectedIdleTime
 528:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		tick periods.  -1 is used because this code will execute part way
 529:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		through one of the tick periods. */
 530:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleT
 531:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		if( ulReloadValue > ulStoppedTimerCompensation )
 532:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 533:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			ulReloadValue -= ulStoppedTimerCompensation;
 534:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 535:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 536:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Enter a critical section but don't use the taskENTER_CRITICAL()
 537:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		method as that will mask interrupts that should exit sleep mode. */
 538:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "cpsid i" ::: "memory" );
 539:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "dsb" );
 540:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "isb" );
 541:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 542:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* If a context switch is pending or a task is waiting for the scheduler
 543:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		to be unsuspended then abandon the low power entry. */
 544:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 545:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 546:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart from whatever is left in the count register to complete
 547:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			this tick period. */
 548:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 549:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 550:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick. */
 551:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 552:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 553:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Reset the reload register to the value required for normal tick
 554:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			periods. */
 555:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 556:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 557:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Re-enable interrupts - see comments above the cpsid instruction()
 558:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			above. */
 559:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 560:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 561:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		else
 562:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 563:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Set the new reload value. */
 564:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 565:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 566:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Clear the SysTick count flag and set the count value back to
 567:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			zero. */
 568:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 569:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 570:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick. */
 571:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 572:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 573:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Sleep until something happens.  configPRE_SLEEP_PROCESSING() can
 574:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			set its parameter to 0 to indicate that its implementation contains
 575:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			its own wait for interrupt or wait for event instruction, and so wfi
 576:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			should not be executed again.  However, the original expected idle
 577:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			time variable must remain unmodified, so a copy is taken. */
 578:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			xModifiableIdleTime = xExpectedIdleTime;
 579:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configPRE_SLEEP_PROCESSING( xModifiableIdleTime );
 580:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			if( xModifiableIdleTime > 0 )
 581:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			{
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 17


 582:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "dsb" ::: "memory" );
 583:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "wfi" );
 584:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				__asm volatile( "isb" );
 585:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			}
 586:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configPOST_SLEEP_PROCESSING( xExpectedIdleTime );
 587:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 588:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Re-enable interrupts to allow the interrupt that brought the MCU
 589:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			out of sleep mode to execute immediately.  see comments above
 590:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			__disable_interrupt() call above. */
 591:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 592:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "dsb" );
 593:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "isb" );
 594:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 595:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Disable interrupts again because the clock is about to be stopped
 596:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			and interrupts that execute while the clock is stopped will increase
 597:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			any slippage between the time maintained by the RTOS and calendar
 598:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			time. */
 599:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "cpsid i" ::: "memory" );
 600:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "dsb" );
 601:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "isb" );
 602:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 603:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Disable the SysTick clock without reading the
 604:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG register to ensure the
 605:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_COUNT_FLAG_BIT is not cleared if it is set.  Again,
 606:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			the time the SysTick is stopped for is accounted for as best it can
 607:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			be, but using the tickless mode will inevitably result in some tiny
 608:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			drift of the time maintained by the kernel with respect to calendar
 609:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			time*/
 610:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 611:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 612:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Determine if the SysTick clock has already counted to zero and
 613:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			been set back to the current reload value (the reload back being
 614:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			correct for the entire expected idle time) or if the SysTick is yet
 615:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			to count to zero (in which case an interrupt other than the SysTick
 616:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			must have brought the system out of sleep mode). */
 617:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 618:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			{
 619:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				uint32_t ulCalculatedLoadValue;
 620:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 621:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				/* The tick interrupt is already pending, and the SysTick count
 622:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				reloaded with ulReloadValue.  Reset the
 623:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG with whatever remains of this tick
 624:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				period. */
 625:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_
 626:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 627:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				/* Don't allow a tiny value, or values that have somehow
 628:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				underflowed because the post sleep hook did something
 629:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				that took too long. */
 630:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimer
 631:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				{
 632:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 633:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				}
 634:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 635:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 636:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 637:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				/* As the pending tick will be processed as soon as this
 638:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				function exits, the tick value maintained by the tick is stepped
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 18


 639:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				forward by one less than the time spent waiting. */
 640:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 641:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			}
 642:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			else
 643:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			{
 644:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				/* Something other than the tick interrupt ended the sleep.
 645:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				Work out how long the sleep lasted rounded to complete tick
 646:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				periods (not the ulReload value which accounted for part
 647:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				ticks). */
 648:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTI
 649:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 650:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				/* How many complete tick periods passed while the processor
 651:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				was waiting? */
 652:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 653:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 654:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				/* The reload value is set to whatever fraction of a single tick
 655:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				period remains. */
 656:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulC
 657:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			}
 658:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 659:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Restart SysTick so it runs from portNVIC_SYSTICK_LOAD_REG
 660:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			again, then set portNVIC_SYSTICK_LOAD_REG back to its standard
 661:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			value. */
 662:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 663:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 664:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			vTaskStepTick( ulCompleteTickPeriods );
 665:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 666:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 667:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Exit with interrpts enabled. */
 668:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			__asm volatile( "cpsie i" ::: "memory" );
 669:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 670:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 671:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 672:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #endif /* #if configUSE_TICKLESS_IDLE */
 673:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 674:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 675:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*
 676:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * Setup the systick timer to generate the tick interrupts at the required
 677:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  * frequency.
 678:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c ****  */
 679:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** __attribute__(( weak )) void vPortSetupTimerInterrupt( void )
 680:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 681:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 682:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#if( configUSE_TICKLESS_IDLE == 1 )
 683:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 684:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 685:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 686:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOC
 687:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 688:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	#endif /* configUSE_TICKLESS_IDLE */
 689:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 690:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Stop and clear the SysTick. */
 691:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CTRL_REG = 0UL;
 692:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 693:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 694:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Configure SysTick to interrupt at the requested rate. */
 695:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 19


 696:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 697:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 698:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 699:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 700:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /* This is a naked function. */
 701:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** static void vPortEnableVFP( void )
 702:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** {
 142              		.loc 1 702 0
 143              		.cfi_startproc
 144              		@ Naked Function: prologue and epilogue provided by programmer.
 145              		@ args = 0, pretend = 0, frame = 0
 146              		@ frame_needed = 0, uses_anonymous_args = 0
 703:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile
 147              		.loc 1 703 0
 148              		.syntax unified
 149              	@ 703 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 150 0000 DFF80C00 			ldr.w r0, =0xE000ED88		
 151 0004 0168     		ldr r1, [r0]				
 152              									
 153 0006 41F47001 		orr r1, r1, #( 0xf << 20 )	
 154 000a 0160     		str r1, [r0]				
 155 000c 7047     		bx r14						
 156              	@ 0 "" 2
 704:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	(
 705:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	ldr.w r0, =0xE000ED88		\n" /* The FPU enable bits are in the CPACR. */
 706:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	ldr r1, [r0]				\n"
 707:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"								\n"
 708:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
 709:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	str r1, [r0]				\n"
 710:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		"	bx r14						"
 711:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	);
 712:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 157              		.loc 1 712 0
 158              		.thumb
 159              		.syntax unified
 160              		.cfi_endproc
 161              	.LFE16:
 163 000e 0000     		.section	.text.pxPortInitialiseStack,"ax",%progbits
 164              		.align	1
 165              		.global	pxPortInitialiseStack
 166              		.syntax unified
 167              		.thumb
 168              		.thumb_func
 169              		.fpu fpv4-sp-d16
 171              	pxPortInitialiseStack:
 172              	.LFB5:
 188:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Simulate the stack frame as it would be created by a context switch
 173              		.loc 1 188 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 0, uses_anonymous_args = 0
 177              		@ link register save eliminated.
 178              	.LVL2:
 196:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 179              		.loc 1 196 0
 180 0000 4FF08073 		mov	r3, #16777216
 181 0004 40F8043C 		str	r3, [r0, #-4]
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 20


 182              	.LVL3:
 198:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	pxTopOfStack--;
 183              		.loc 1 198 0
 184 0008 21F00101 		bic	r1, r1, #1
 185              	.LVL4:
 186 000c 40F8081C 		str	r1, [r0, #-8]
 187              	.LVL5:
 200:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 188              		.loc 1 200 0
 189 0010 054B     		ldr	r3, .L11
 190 0012 40F80C3C 		str	r3, [r0, #-12]
 191              	.LVL6:
 204:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 192              		.loc 1 204 0
 193 0016 40F8202C 		str	r2, [r0, #-32]
 194              	.LVL7:
 209:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 195              		.loc 1 209 0
 196 001a 6FF00203 		mvn	r3, #2
 197 001e 40F8243C 		str	r3, [r0, #-36]
 198              	.LVL8:
 214:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 199              		.loc 1 214 0
 200 0022 4438     		subs	r0, r0, #68
 201              	.LVL9:
 202 0024 7047     		bx	lr
 203              	.L12:
 204 0026 00BF     		.align	2
 205              	.L11:
 206 0028 00000000 		.word	prvTaskExitError
 207              		.cfi_endproc
 208              	.LFE5:
 210              		.section	.text.SVC_Handler,"ax",%progbits
 211              		.align	1
 212              		.global	SVC_Handler
 213              		.syntax unified
 214              		.thumb
 215              		.thumb_func
 216              		.fpu fpv4-sp-d16
 218              	SVC_Handler:
 219              	.LFB7:
 243:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	__asm volatile (
 220              		.loc 1 243 0
 221              		.cfi_startproc
 222              		@ Naked Function: prologue and epilogue provided by programmer.
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 244:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 					"	ldr	r3, pxCurrentTCBConst2		\n" /* Restore the context. */
 225              		.loc 1 244 0
 226              		.syntax unified
 227              	@ 244 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 228 0000 074B     			ldr	r3, pxCurrentTCBConst2		
 229 0002 1968     		ldr r1, [r3]					
 230 0004 0868     		ldr r0, [r1]					
 231 0006 B0E8F04F 		ldmia r0!, {r4-r11, r14}		
 232 000a 80F30988 		msr psp, r0						
 233 000e BFF36F8F 		isb								
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 21


 234 0012 4FF00000 		mov r0, #0 						
 235 0016 80F31188 		msr	basepri, r0					
 236 001a 7047     		bx r14							
 237              										
 238 001c AFF30080 		.align 4						
 239 0020 00000000 	pxCurrentTCBConst2: .word pxCurrentTCB				
 240              	
 241              	@ 0 "" 2
 258:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 242              		.loc 1 258 0
 243              		.thumb
 244              		.syntax unified
 245              		.cfi_endproc
 246              	.LFE7:
 248              		.section	.text.vPortEndScheduler,"ax",%progbits
 249              		.align	1
 250              		.global	vPortEndScheduler
 251              		.syntax unified
 252              		.thumb
 253              		.thumb_func
 254              		.fpu fpv4-sp-d16
 256              	vPortEndScheduler:
 257              	.LFB10:
 396:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Not implemented in ports where there is nothing to return to.
 258              		.loc 1 396 0
 259              		.cfi_startproc
 260              		@ args = 0, pretend = 0, frame = 0
 261              		@ frame_needed = 0, uses_anonymous_args = 0
 262              		@ link register save eliminated.
 399:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 263              		.loc 1 399 0
 264 0000 074B     		ldr	r3, .L17
 265 0002 1B68     		ldr	r3, [r3]
 266 0004 B3F57A7F 		cmp	r3, #1000
 267 0008 08D0     		beq	.L14
 268              	.LBB35:
 269              	.LBB36:
 270              		.loc 2 195 0
 271              		.syntax unified
 272              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 273 000a 4FF05003 			mov r3, #80												
 274 000e 83F31188 		msr basepri, r3											
 275 0012 BFF36F8F 		isb														
 276 0016 BFF34F8F 		dsb														
 277              	
 278              	@ 0 "" 2
 279              	.LVL10:
 280              		.thumb
 281              		.syntax unified
 282              	.L16:
 283 001a FEE7     		b	.L16
 284              	.L14:
 285              	.LBE36:
 286              	.LBE35:
 400:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 287              		.loc 1 400 0
 288 001c 7047     		bx	lr
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 22


 289              	.L18:
 290 001e 00BF     		.align	2
 291              	.L17:
 292 0020 00000000 		.word	.LANCHOR0
 293              		.cfi_endproc
 294              	.LFE10:
 296              		.section	.text.vPortEnterCritical,"ax",%progbits
 297              		.align	1
 298              		.global	vPortEnterCritical
 299              		.syntax unified
 300              		.thumb
 301              		.thumb_func
 302              		.fpu fpv4-sp-d16
 304              	vPortEnterCritical:
 305              	.LFB11:
 404:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portDISABLE_INTERRUPTS();
 306              		.loc 1 404 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 0
 309              		@ frame_needed = 0, uses_anonymous_args = 0
 310              		@ link register save eliminated.
 311              	.LBB37:
 312              	.LBB38:
 313              		.loc 2 195 0
 314              		.syntax unified
 315              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 316 0000 4FF05003 			mov r3, #80												
 317 0004 83F31188 		msr basepri, r3											
 318 0008 BFF36F8F 		isb														
 319 000c BFF34F8F 		dsb														
 320              	
 321              	@ 0 "" 2
 322              		.thumb
 323              		.syntax unified
 324              	.LBE38:
 325              	.LBE37:
 406:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 326              		.loc 1 406 0
 327 0010 0A4A     		ldr	r2, .L23
 328 0012 1368     		ldr	r3, [r2]
 329 0014 0133     		adds	r3, r3, #1
 330 0016 1360     		str	r3, [r2]
 413:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 331              		.loc 1 413 0
 332 0018 012B     		cmp	r3, #1
 333 001a 00D0     		beq	.L22
 334              	.L19:
 417:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 335              		.loc 1 417 0
 336 001c 7047     		bx	lr
 337              	.L22:
 415:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 338              		.loc 1 415 0
 339 001e 084B     		ldr	r3, .L23+4
 340 0020 1B68     		ldr	r3, [r3]
 341 0022 13F0FF0F 		tst	r3, #255
 342 0026 F9D0     		beq	.L19
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 23


 343              	.LBB39:
 344              	.LBB40:
 345              		.loc 2 195 0
 346              		.syntax unified
 347              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 348 0028 4FF05003 			mov r3, #80												
 349 002c 83F31188 		msr basepri, r3											
 350 0030 BFF36F8F 		isb														
 351 0034 BFF34F8F 		dsb														
 352              	
 353              	@ 0 "" 2
 354              	.LVL11:
 355              		.thumb
 356              		.syntax unified
 357              	.L21:
 358 0038 FEE7     		b	.L21
 359              	.L24:
 360 003a 00BF     		.align	2
 361              	.L23:
 362 003c 00000000 		.word	.LANCHOR0
 363 0040 04ED00E0 		.word	-536810236
 364              	.LBE40:
 365              	.LBE39:
 366              		.cfi_endproc
 367              	.LFE11:
 369              		.section	.text.vPortExitCritical,"ax",%progbits
 370              		.align	1
 371              		.global	vPortExitCritical
 372              		.syntax unified
 373              		.thumb
 374              		.thumb_func
 375              		.fpu fpv4-sp-d16
 377              	vPortExitCritical:
 378              	.LFB12:
 421:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( uxCriticalNesting );
 379              		.loc 1 421 0
 380              		.cfi_startproc
 381              		@ args = 0, pretend = 0, frame = 0
 382              		@ frame_needed = 0, uses_anonymous_args = 0
 383              		@ link register save eliminated.
 422:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uxCriticalNesting--;
 384              		.loc 1 422 0
 385 0000 094B     		ldr	r3, .L29
 386 0002 1B68     		ldr	r3, [r3]
 387 0004 43B9     		cbnz	r3, .L26
 388              	.LBB41:
 389              	.LBB42:
 390              		.loc 2 195 0
 391              		.syntax unified
 392              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 393 0006 4FF05003 			mov r3, #80												
 394 000a 83F31188 		msr basepri, r3											
 395 000e BFF36F8F 		isb														
 396 0012 BFF34F8F 		dsb														
 397              	
 398              	@ 0 "" 2
 399              	.LVL12:
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 24


 400              		.thumb
 401              		.syntax unified
 402              	.L27:
 403 0016 FEE7     		b	.L27
 404              	.L26:
 405              	.LBE42:
 406              	.LBE41:
 423:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	if( uxCriticalNesting == 0 )
 407              		.loc 1 423 0
 408 0018 013B     		subs	r3, r3, #1
 409 001a 034A     		ldr	r2, .L29
 410 001c 1360     		str	r3, [r2]
 424:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 411              		.loc 1 424 0
 412 001e 0BB9     		cbnz	r3, .L25
 413              	.LVL13:
 414              	.LBB43:
 415              	.LBB44:
 196:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 212:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 416              		.loc 2 229 0
 417              		.syntax unified
 418              	@ 229 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 419 0020 83F31188 			msr basepri, r3	
 420              	@ 0 "" 2
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 25


 421              	.LVL14:
 422              		.thumb
 423              		.syntax unified
 424              	.L25:
 425              	.LBE44:
 426              	.LBE43:
 428:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 427              		.loc 1 428 0
 428 0024 7047     		bx	lr
 429              	.L30:
 430 0026 00BF     		.align	2
 431              	.L29:
 432 0028 00000000 		.word	.LANCHOR0
 433              		.cfi_endproc
 434              	.LFE12:
 436              		.section	.text.PendSV_Handler,"ax",%progbits
 437              		.align	1
 438              		.global	PendSV_Handler
 439              		.syntax unified
 440              		.thumb
 441              		.thumb_func
 442              		.fpu fpv4-sp-d16
 444              	PendSV_Handler:
 445              	.LFB13:
 432:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* This is a naked function. */
 446              		.loc 1 432 0
 447              		.cfi_startproc
 448              		@ Naked Function: prologue and epilogue provided by programmer.
 449              		@ args = 0, pretend = 0, frame = 0
 450              		@ frame_needed = 0, uses_anonymous_args = 0
 435:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	(
 451              		.loc 1 435 0
 452              		.syntax unified
 453              	@ 435 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
 454 0000 EFF30980 			mrs r0, psp							
 455 0004 BFF36F8F 		isb									
 456              											
 457 0008 154B     		ldr	r3, pxCurrentTCBConst			
 458 000a 1A68     		ldr	r2, [r3]						
 459              											
 460 000c 1EF0100F 		tst r14, #0x10						
 461 0010 08BF     		it eq								
 462 0012 20ED108A 		vstmdbeq r0!, {s16-s31}				
 463              											
 464 0016 20E9F04F 		stmdb r0!, {r4-r11, r14}			
 465 001a 1060     		str r0, [r2]						
 466              											
 467 001c 2DE90900 		stmdb sp!, {r0, r3}					
 468 0020 4FF05000 		mov r0, #80 							
 469 0024 80F31188 		msr basepri, r0						
 470 0028 BFF34F8F 		dsb									
 471 002c BFF36F8F 		isb									
 472 0030 FFF7FEFF 		bl vTaskSwitchContext				
 473 0034 4FF00000 		mov r0, #0							
 474 0038 80F31188 		msr basepri, r0						
 475 003c 09BC     		ldmia sp!, {r0, r3}					
 476              											
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 26


 477 003e 1968     		ldr r1, [r3]						
 478 0040 0868     		ldr r0, [r1]						
 479              											
 480 0042 B0E8F04F 		ldmia r0!, {r4-r11, r14}			
 481              											
 482 0046 1EF0100F 		tst r14, #0x10						
 483 004a 08BF     		it eq								
 484 004c B0EC108A 		vldmiaeq r0!, {s16-s31}				
 485              											
 486 0050 80F30988 		msr psp, r0							
 487 0054 BFF36F8F 		isb									
 488              											
 489              											
 490 0058 7047     		bx r14								
 491              											
 492 005a 00BFAFF3 		.align 4							
 492      0080
 493 0060 00000000 	pxCurrentTCBConst: .word pxCurrentTCB	
 494              	
 495              	@ 0 "" 2
 485:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 496              		.loc 1 485 0
 497              		.thumb
 498              		.syntax unified
 499              		.cfi_endproc
 500              	.LFE13:
 502              		.section	.text.SysTick_Handler,"ax",%progbits
 503              		.align	1
 504              		.global	SysTick_Handler
 505              		.syntax unified
 506              		.thumb
 507              		.thumb_func
 508              		.fpu fpv4-sp-d16
 510              	SysTick_Handler:
 511              	.LFB14:
 489:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
 512              		.loc 1 489 0
 513              		.cfi_startproc
 514              		@ args = 0, pretend = 0, frame = 0
 515              		@ frame_needed = 0, uses_anonymous_args = 0
 516 0000 08B5     		push	{r3, lr}
 517              	.LCFI2:
 518              		.cfi_def_cfa_offset 8
 519              		.cfi_offset 3, -8
 520              		.cfi_offset 14, -4
 521              	.LBB45:
 522              	.LBB46:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 523              		.loc 2 195 0
 524              		.syntax unified
 525              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 526 0002 4FF05003 			mov r3, #80												
 527 0006 83F31188 		msr basepri, r3											
 528 000a BFF36F8F 		isb														
 529 000e BFF34F8F 		dsb														
 530              	
 531              	@ 0 "" 2
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 27


 532              		.thumb
 533              		.syntax unified
 534              	.LBE46:
 535              	.LBE45:
 497:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 536              		.loc 1 497 0
 537 0012 FFF7FEFF 		bl	xTaskIncrementTick
 538              	.LVL15:
 539 0016 18B1     		cbz	r0, .L33
 501:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 540              		.loc 1 501 0
 541 0018 034B     		ldr	r3, .L35
 542 001a 4FF08052 		mov	r2, #268435456
 543 001e 1A60     		str	r2, [r3]
 544              	.L33:
 545              	.LVL16:
 546              	.LBB47:
 547              	.LBB48:
 548              		.loc 2 229 0
 549 0020 0023     		movs	r3, #0
 550              		.syntax unified
 551              	@ 229 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 552 0022 83F31188 			msr basepri, r3	
 553              	@ 0 "" 2
 554              	.LVL17:
 555              		.thumb
 556              		.syntax unified
 557              	.LBE48:
 558              	.LBE47:
 505:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 559              		.loc 1 505 0
 560 0026 08BD     		pop	{r3, pc}
 561              	.L36:
 562              		.align	2
 563              	.L35:
 564 0028 04ED00E0 		.word	-536810236
 565              		.cfi_endproc
 566              	.LFE14:
 568              		.section	.text.vPortSetupTimerInterrupt,"ax",%progbits
 569              		.align	1
 570              		.weak	vPortSetupTimerInterrupt
 571              		.syntax unified
 572              		.thumb
 573              		.thumb_func
 574              		.fpu fpv4-sp-d16
 576              	vPortSetupTimerInterrupt:
 577              	.LFB15:
 680:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* Calculate the constants required to configure the tick interrupt. */
 578              		.loc 1 680 0
 579              		.cfi_startproc
 580              		@ args = 0, pretend = 0, frame = 0
 581              		@ frame_needed = 0, uses_anonymous_args = 0
 582              		@ link register save eliminated.
 691:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 583              		.loc 1 691 0
 584 0000 054B     		ldr	r3, .L38
 585 0002 0022     		movs	r2, #0
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 28


 586 0004 1A60     		str	r2, [r3]
 692:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 587              		.loc 1 692 0
 588 0006 0549     		ldr	r1, .L38+4
 589 0008 0A60     		str	r2, [r1]
 695:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTI
 590              		.loc 1 695 0
 591 000a 054A     		ldr	r2, .L38+8
 592 000c 0549     		ldr	r1, .L38+12
 593 000e 1160     		str	r1, [r2]
 696:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** }
 594              		.loc 1 696 0
 595 0010 0722     		movs	r2, #7
 596 0012 1A60     		str	r2, [r3]
 697:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 597              		.loc 1 697 0
 598 0014 7047     		bx	lr
 599              	.L39:
 600 0016 00BF     		.align	2
 601              	.L38:
 602 0018 10E000E0 		.word	-536813552
 603 001c 18E000E0 		.word	-536813544
 604 0020 14E000E0 		.word	-536813548
 605 0024 9F860100 		.word	99999
 606              		.cfi_endproc
 607              	.LFE15:
 609              		.section	.text.xPortStartScheduler,"ax",%progbits
 610              		.align	1
 611              		.global	xPortStartScheduler
 612              		.syntax unified
 613              		.thumb
 614              		.thumb_func
 615              		.fpu fpv4-sp-d16
 617              	xPortStartScheduler:
 618              	.LFB9:
 288:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 619              		.loc 1 288 0
 620              		.cfi_startproc
 621              		@ args = 0, pretend = 0, frame = 8
 622              		@ frame_needed = 0, uses_anonymous_args = 0
 296:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 623              		.loc 1 296 0
 624 0000 3A4B     		ldr	r3, .L52
 625 0002 1A68     		ldr	r2, [r3]
 626 0004 3A4B     		ldr	r3, .L52+4
 627 0006 9A42     		cmp	r2, r3
 628 0008 0DD0     		beq	.L51
 297:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 629              		.loc 1 297 0
 630 000a 384B     		ldr	r3, .L52
 631 000c 1A68     		ldr	r2, [r3]
 632 000e 394B     		ldr	r3, .L52+8
 633 0010 9A42     		cmp	r2, r3
 634 0012 11D1     		bne	.L43
 635              	.LBB49:
 636              	.LBB50:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 29


 637              		.loc 2 195 0
 638              		.syntax unified
 639              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 640 0014 4FF05003 			mov r3, #80												
 641 0018 83F31188 		msr basepri, r3											
 642 001c BFF36F8F 		isb														
 643 0020 BFF34F8F 		dsb														
 644              	
 645              	@ 0 "" 2
 646              	.LVL18:
 647              		.thumb
 648              		.syntax unified
 649              	.L44:
 650 0024 FEE7     		b	.L44
 651              	.L51:
 652              	.LBE50:
 653              	.LBE49:
 654              	.LBB51:
 655              	.LBB52:
 656              		.syntax unified
 657              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 658 0026 4FF05003 			mov r3, #80												
 659 002a 83F31188 		msr basepri, r3											
 660 002e BFF36F8F 		isb														
 661 0032 BFF34F8F 		dsb														
 662              	
 663              	@ 0 "" 2
 664              	.LVL19:
 665              		.thumb
 666              		.syntax unified
 667              	.L42:
 668 0036 FEE7     		b	.L42
 669              	.L43:
 670              	.LBE52:
 671              	.LBE51:
 288:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
 672              		.loc 1 288 0
 673 0038 10B5     		push	{r4, lr}
 674              	.LCFI3:
 675              		.cfi_def_cfa_offset 8
 676              		.cfi_offset 4, -8
 677              		.cfi_offset 14, -4
 678 003a 82B0     		sub	sp, sp, #8
 679              	.LCFI4:
 680              		.cfi_def_cfa_offset 16
 681              	.LVL20:
 682              	.LBB53:
 311:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 683              		.loc 1 311 0
 684 003c 2E4B     		ldr	r3, .L52+12
 685 003e 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 686 0040 D2B2     		uxtb	r2, r2
 687 0042 0192     		str	r2, [sp, #4]
 315:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 688              		.loc 1 315 0
 689 0044 FF22     		movs	r2, #255
 690 0046 1A70     		strb	r2, [r3]
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 30


 318:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 691              		.loc 1 318 0
 692 0048 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 693 004a DBB2     		uxtb	r3, r3
 694 004c 8DF80330 		strb	r3, [sp, #3]
 321:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 695              		.loc 1 321 0
 696 0050 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 697 0054 03F05003 		and	r3, r3, #80
 698 0058 284A     		ldr	r2, .L52+16
 699 005a 1370     		strb	r3, [r2]
 325:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 700              		.loc 1 325 0
 701 005c 284B     		ldr	r3, .L52+20
 702 005e 0722     		movs	r2, #7
 703 0060 1A60     		str	r2, [r3]
 326:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 704              		.loc 1 326 0
 705 0062 09E0     		b	.L45
 706              	.L46:
 328:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 707              		.loc 1 328 0
 708 0064 264A     		ldr	r2, .L52+20
 709 0066 1368     		ldr	r3, [r2]
 710 0068 013B     		subs	r3, r3, #1
 711 006a 1360     		str	r3, [r2]
 329:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 712              		.loc 1 329 0
 713 006c 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 714 0070 5B00     		lsls	r3, r3, #1
 715 0072 DBB2     		uxtb	r3, r3
 716 0074 8DF80330 		strb	r3, [sp, #3]
 717              	.L45:
 326:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 718              		.loc 1 326 0
 719 0078 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 720 007c 13F0800F 		tst	r3, #128
 721 0080 F0D1     		bne	.L46
 346:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 722              		.loc 1 346 0
 723 0082 1F4B     		ldr	r3, .L52+20
 724 0084 1B68     		ldr	r3, [r3]
 725 0086 032B     		cmp	r3, #3
 726 0088 08D0     		beq	.L47
 727              	.LBB54:
 728              	.LBB55:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 729              		.loc 2 195 0
 730              		.syntax unified
 731              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 732 008a 4FF05003 			mov r3, #80												
 733 008e 83F31188 		msr basepri, r3											
 734 0092 BFF36F8F 		isb														
 735 0096 BFF34F8F 		dsb														
 736              	
 737              	@ 0 "" 2
 738              	.LVL21:
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 31


 739              		.thumb
 740              		.syntax unified
 741              	.L48:
 742 009a FEE7     		b	.L48
 743              	.L47:
 744              	.LBE55:
 745              	.LBE54:
 352:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 746              		.loc 1 352 0
 747 009c 1B02     		lsls	r3, r3, #8
 353:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 748              		.loc 1 353 0
 749 009e 03F4E063 		and	r3, r3, #1792
 750 00a2 174A     		ldr	r2, .L52+20
 751 00a4 1360     		str	r3, [r2]
 357:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 752              		.loc 1 357 0
 753 00a6 019B     		ldr	r3, [sp, #4]
 754 00a8 DBB2     		uxtb	r3, r3
 755 00aa 134A     		ldr	r2, .L52+12
 756 00ac 1370     		strb	r3, [r2]
 757              	.LBE53:
 362:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 758              		.loc 1 362 0
 759 00ae 154B     		ldr	r3, .L52+24
 760 00b0 1A68     		ldr	r2, [r3]
 761 00b2 42F47002 		orr	r2, r2, #15728640
 762 00b6 1A60     		str	r2, [r3]
 363:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 763              		.loc 1 363 0
 764 00b8 1A68     		ldr	r2, [r3]
 765 00ba 42F07042 		orr	r2, r2, #-268435456
 766 00be 1A60     		str	r2, [r3]
 367:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 767              		.loc 1 367 0
 768 00c0 FFF7FEFF 		bl	vPortSetupTimerInterrupt
 769              	.LVL22:
 370:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 770              		.loc 1 370 0
 771 00c4 0024     		movs	r4, #0
 772 00c6 104B     		ldr	r3, .L52+28
 773 00c8 1C60     		str	r4, [r3]
 373:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 774              		.loc 1 373 0
 775 00ca FFF7FEFF 		bl	vPortEnableVFP
 776              	.LVL23:
 376:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 777              		.loc 1 376 0
 778 00ce 0F4A     		ldr	r2, .L52+32
 779 00d0 1368     		ldr	r3, [r2]
 780 00d2 43F04043 		orr	r3, r3, #-1073741824
 781 00d6 1360     		str	r3, [r2]
 379:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 782              		.loc 1 379 0
 783 00d8 FFF7FEFF 		bl	prvPortStartFirstTask
 784              	.LVL24:
 387:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	prvTaskExitError();
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 32


 785              		.loc 1 387 0
 786 00dc FFF7FEFF 		bl	vTaskSwitchContext
 787              	.LVL25:
 388:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 788              		.loc 1 388 0
 789 00e0 FFF7FEFF 		bl	prvTaskExitError
 790              	.LVL26:
 392:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 791              		.loc 1 392 0
 792 00e4 2046     		mov	r0, r4
 793 00e6 02B0     		add	sp, sp, #8
 794              	.LCFI5:
 795              		.cfi_def_cfa_offset 8
 796              		@ sp needed
 797 00e8 10BD     		pop	{r4, pc}
 798              	.L53:
 799 00ea 00BF     		.align	2
 800              	.L52:
 801 00ec 00ED00E0 		.word	-536810240
 802 00f0 71C20F41 		.word	1091551857
 803 00f4 70C20F41 		.word	1091551856
 804 00f8 00E400E0 		.word	-536812544
 805 00fc 00000000 		.word	.LANCHOR1
 806 0100 00000000 		.word	.LANCHOR2
 807 0104 20ED00E0 		.word	-536810208
 808 0108 00000000 		.word	.LANCHOR0
 809 010c 34EF00E0 		.word	-536809676
 810              		.cfi_endproc
 811              	.LFE9:
 813              		.section	.text.vPortValidateInterruptPriority,"ax",%progbits
 814              		.align	1
 815              		.global	vPortValidateInterruptPriority
 816              		.syntax unified
 817              		.thumb
 818              		.thumb_func
 819              		.fpu fpv4-sp-d16
 821              	vPortValidateInterruptPriority:
 822              	.LFB17:
 713:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** /*-----------------------------------------------------------*/
 714:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 715:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** #if( configASSERT_DEFINED == 1 )
 716:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 717:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	void vPortValidateInterruptPriority( void )
 718:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	{
 823              		.loc 1 718 0
 824              		.cfi_startproc
 825              		@ args = 0, pretend = 0, frame = 0
 826              		@ frame_needed = 0, uses_anonymous_args = 0
 827              		@ link register save eliminated.
 719:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uint32_t ulCurrentInterrupt;
 720:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	uint8_t ucCurrentPriority;
 721:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 722:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Obtain the number of the currently executing interrupt. */
 723:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 828              		.loc 1 723 0
 829              		.syntax unified
 830              	@ 723 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c" 1
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 33


 831 0000 EFF30583 		mrs r3, ipsr
 832              	@ 0 "" 2
 833              	.LVL27:
 724:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 725:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Is the interrupt number a user defined interrupt? */
 726:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 834              		.loc 1 726 0
 835              		.thumb
 836              		.syntax unified
 837 0004 0F2B     		cmp	r3, #15
 838 0006 0FD9     		bls	.L55
 727:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		{
 728:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* Look up the interrupt's priority. */
 729:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 839              		.loc 1 729 0
 840 0008 104A     		ldr	r2, .L59
 841 000a 9B5C     		ldrb	r3, [r3, r2]	@ zero_extendqisi2
 842              	.LVL28:
 843 000c DBB2     		uxtb	r3, r3
 844              	.LVL29:
 730:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 731:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			/* The following assertion will fail if a service routine (ISR) for
 732:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			an interrupt that has been assigned a priority above
 733:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY calls an ISR safe FreeRTOS API
 734:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			function.  ISR safe FreeRTOS API functions must *only* be called
 735:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			from interrupts that have been assigned a priority at or below
 736:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 737:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 738:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			Numerically low interrupt priority numbers represent logically high
 739:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			interrupt priorities, therefore the priority of the interrupt must
 740:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			be set to a value equal to or numerically *higher* than
 741:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configMAX_SYSCALL_INTERRUPT_PRIORITY.
 742:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 743:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			Interrupts that	use the FreeRTOS API must not be left at their
 744:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			default priority of	zero as that is the highest possible priority,
 745:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			which is guaranteed to be above configMAX_SYSCALL_INTERRUPT_PRIORITY,
 746:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			and	therefore also guaranteed to be invalid.
 747:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 748:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			FreeRTOS maintains separate thread and ISR API functions to ensure
 749:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			interrupt entry is as fast and simple as possible.
 750:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 751:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			The following links provide detailed information:
 752:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			http://www.freertos.org/RTOS-Cortex-M3-M4.html
 753:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			http://www.freertos.org/FAQHelp.html */
 754:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 845              		.loc 1 754 0
 846 000e 104A     		ldr	r2, .L59+4
 847 0010 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 848 0012 9A42     		cmp	r2, r3
 849 0014 08D9     		bls	.L55
 850              	.LBB56:
 851              	.LBB57:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 852              		.loc 2 195 0
 853              		.syntax unified
 854              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 855 0016 4FF05003 			mov r3, #80												
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 34


 856 001a 83F31188 		msr basepri, r3											
 857 001e BFF36F8F 		isb														
 858 0022 BFF34F8F 		dsb														
 859              	
 860              	@ 0 "" 2
 861              	.LVL30:
 862              		.thumb
 863              		.syntax unified
 864              	.L56:
 865 0026 FEE7     		b	.L56
 866              	.L55:
 867              	.LBE57:
 868              	.LBE56:
 755:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		}
 756:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 757:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		/* Priority grouping:  The interrupt controller (NVIC) allows the bits
 758:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		that define each interrupt's priority to be split between bits that
 759:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		define the interrupt's pre-emption priority bits and bits that define
 760:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		the interrupt's sub-priority.  For simplicity all bits must be defined
 761:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		to be pre-emption priority bits.  The following assertion will fail if
 762:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		this is not the case (if some bits represent a sub-priority).
 763:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 
 764:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		If the application only uses CMSIS libraries for interrupt
 765:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		configuration then the correct setting can be achieved on all Cortex-M
 766:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
 767:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		scheduler.  Note however that some vendor specific peripheral libraries
 768:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		assume a non-zero priority group setting, in which cases using a value
 769:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		of zero will result in unpredictable behaviour. */
 770:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 869              		.loc 1 770 0
 870 0028 0A4B     		ldr	r3, .L59+8
 871 002a 1B68     		ldr	r3, [r3]
 872 002c 03F4E063 		and	r3, r3, #1792
 873 0030 094A     		ldr	r2, .L59+12
 874 0032 1268     		ldr	r2, [r2]
 875 0034 9342     		cmp	r3, r2
 876 0036 08D9     		bls	.L54
 877              	.LBB58:
 878              	.LBB59:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 879              		.loc 2 195 0
 880              		.syntax unified
 881              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 882 0038 4FF05003 			mov r3, #80												
 883 003c 83F31188 		msr basepri, r3											
 884 0040 BFF36F8F 		isb														
 885 0044 BFF34F8F 		dsb														
 886              	
 887              	@ 0 "" 2
 888              	.LVL31:
 889              		.thumb
 890              		.syntax unified
 891              	.L58:
 892 0048 FEE7     		b	.L58
 893              	.L54:
 894              	.LBE59:
 895              	.LBE58:
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 35


 771:../FreeRTOS/Source/portable/GCC/ARM_CM4F/port.c **** 	}
 896              		.loc 1 771 0
 897 004a 7047     		bx	lr
 898              	.L60:
 899              		.align	2
 900              	.L59:
 901 004c F0E300E0 		.word	-536812560
 902 0050 00000000 		.word	.LANCHOR1
 903 0054 0CED00E0 		.word	-536810228
 904 0058 00000000 		.word	.LANCHOR2
 905              		.cfi_endproc
 906              	.LFE17:
 908              		.section	.bss.ucMaxSysCallPriority,"aw",%nobits
 909              		.set	.LANCHOR1,. + 0
 912              	ucMaxSysCallPriority:
 913 0000 00       		.space	1
 914              		.section	.bss.ulMaxPRIGROUPValue,"aw",%nobits
 915              		.align	2
 916              		.set	.LANCHOR2,. + 0
 919              	ulMaxPRIGROUPValue:
 920 0000 00000000 		.space	4
 921              		.section	.data.uxCriticalNesting,"aw",%progbits
 922              		.align	2
 923              		.set	.LANCHOR0,. + 0
 926              	uxCriticalNesting:
 927 0000 AAAAAAAA 		.word	-1431655766
 928              		.text
 929              	.Letext0:
 930              		.file 3 "c:\\tools\\gcc7_2017-q4-major\\arm-none-eabi\\include\\machine\\_default_types.h"
 931              		.file 4 "c:\\tools\\gcc7_2017-q4-major\\arm-none-eabi\\include\\sys\\_stdint.h"
 932              		.file 5 "../FreeRTOS/Source/include/projdefs.h"
 933              		.file 6 "../FreeRTOS/Source/include/task.h"
ARM GAS  E:\msys32\tmp\ccomsqay.s 			page 36


DEFINED SYMBOLS
                            *ABS*:00000000 port.c
E:\msys32\tmp\ccomsqay.s:18     .text.prvTaskExitError:00000000 $t
E:\msys32\tmp\ccomsqay.s:24     .text.prvTaskExitError:00000000 prvTaskExitError
E:\msys32\tmp\ccomsqay.s:92     .text.prvTaskExitError:0000003c $d
E:\msys32\tmp\ccomsqay.s:97     .text.prvPortStartFirstTask:00000000 $t
E:\msys32\tmp\ccomsqay.s:103    .text.prvPortStartFirstTask:00000000 prvPortStartFirstTask
E:\msys32\tmp\ccomsqay.s:134    .text.vPortEnableVFP:00000000 $t
E:\msys32\tmp\ccomsqay.s:140    .text.vPortEnableVFP:00000000 vPortEnableVFP
E:\msys32\tmp\ccomsqay.s:164    .text.pxPortInitialiseStack:00000000 $t
E:\msys32\tmp\ccomsqay.s:171    .text.pxPortInitialiseStack:00000000 pxPortInitialiseStack
E:\msys32\tmp\ccomsqay.s:206    .text.pxPortInitialiseStack:00000028 $d
E:\msys32\tmp\ccomsqay.s:211    .text.SVC_Handler:00000000 $t
E:\msys32\tmp\ccomsqay.s:218    .text.SVC_Handler:00000000 SVC_Handler
E:\msys32\tmp\ccomsqay.s:239    .text.SVC_Handler:00000020 pxCurrentTCBConst2
E:\msys32\tmp\ccomsqay.s:239    .text.SVC_Handler:00000020 $d
E:\msys32\tmp\ccomsqay.s:249    .text.vPortEndScheduler:00000000 $t
E:\msys32\tmp\ccomsqay.s:256    .text.vPortEndScheduler:00000000 vPortEndScheduler
E:\msys32\tmp\ccomsqay.s:292    .text.vPortEndScheduler:00000020 $d
E:\msys32\tmp\ccomsqay.s:297    .text.vPortEnterCritical:00000000 $t
E:\msys32\tmp\ccomsqay.s:304    .text.vPortEnterCritical:00000000 vPortEnterCritical
E:\msys32\tmp\ccomsqay.s:362    .text.vPortEnterCritical:0000003c $d
E:\msys32\tmp\ccomsqay.s:370    .text.vPortExitCritical:00000000 $t
E:\msys32\tmp\ccomsqay.s:377    .text.vPortExitCritical:00000000 vPortExitCritical
E:\msys32\tmp\ccomsqay.s:432    .text.vPortExitCritical:00000028 $d
E:\msys32\tmp\ccomsqay.s:437    .text.PendSV_Handler:00000000 $t
E:\msys32\tmp\ccomsqay.s:444    .text.PendSV_Handler:00000000 PendSV_Handler
E:\msys32\tmp\ccomsqay.s:493    .text.PendSV_Handler:00000060 pxCurrentTCBConst
E:\msys32\tmp\ccomsqay.s:493    .text.PendSV_Handler:00000060 $d
E:\msys32\tmp\ccomsqay.s:503    .text.SysTick_Handler:00000000 $t
E:\msys32\tmp\ccomsqay.s:510    .text.SysTick_Handler:00000000 SysTick_Handler
E:\msys32\tmp\ccomsqay.s:564    .text.SysTick_Handler:00000028 $d
E:\msys32\tmp\ccomsqay.s:569    .text.vPortSetupTimerInterrupt:00000000 $t
E:\msys32\tmp\ccomsqay.s:576    .text.vPortSetupTimerInterrupt:00000000 vPortSetupTimerInterrupt
E:\msys32\tmp\ccomsqay.s:602    .text.vPortSetupTimerInterrupt:00000018 $d
E:\msys32\tmp\ccomsqay.s:610    .text.xPortStartScheduler:00000000 $t
E:\msys32\tmp\ccomsqay.s:617    .text.xPortStartScheduler:00000000 xPortStartScheduler
E:\msys32\tmp\ccomsqay.s:801    .text.xPortStartScheduler:000000ec $d
E:\msys32\tmp\ccomsqay.s:814    .text.vPortValidateInterruptPriority:00000000 $t
E:\msys32\tmp\ccomsqay.s:821    .text.vPortValidateInterruptPriority:00000000 vPortValidateInterruptPriority
E:\msys32\tmp\ccomsqay.s:901    .text.vPortValidateInterruptPriority:0000004c $d
E:\msys32\tmp\ccomsqay.s:912    .bss.ucMaxSysCallPriority:00000000 ucMaxSysCallPriority
E:\msys32\tmp\ccomsqay.s:913    .bss.ucMaxSysCallPriority:00000000 $d
E:\msys32\tmp\ccomsqay.s:915    .bss.ulMaxPRIGROUPValue:00000000 $d
E:\msys32\tmp\ccomsqay.s:919    .bss.ulMaxPRIGROUPValue:00000000 ulMaxPRIGROUPValue
E:\msys32\tmp\ccomsqay.s:922    .data.uxCriticalNesting:00000000 $d
E:\msys32\tmp\ccomsqay.s:926    .data.uxCriticalNesting:00000000 uxCriticalNesting
E:\msys32\tmp\ccomsqay.s:163    .text.vPortEnableVFP:0000000e $d
E:\msys32\tmp\ccomsqay.s:2481   .text.vPortEnableVFP:00000010 $d
E:\msys32\tmp\ccomsqay.s:133    .text.prvPortStartFirstTask:00000022 $d
E:\msys32\tmp\ccomsqay.s:2481   .text.prvPortStartFirstTask:00000024 $d

UNDEFINED SYMBOLS
pxCurrentTCB
vTaskSwitchContext
xTaskIncrementTick
