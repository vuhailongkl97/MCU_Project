ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"queue.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvGetDisinheritPriorityAfterTimeout,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvGetDisinheritPriorityAfterTimeout:
  25              	.LFB28:
  26              		.file 1 "../FreeRTOS/Source/queue.c"
   1:../FreeRTOS/Source/queue.c **** /*
   2:../FreeRTOS/Source/queue.c ****  * FreeRTOS Kernel V10.0.1
   3:../FreeRTOS/Source/queue.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../FreeRTOS/Source/queue.c ****  *
   5:../FreeRTOS/Source/queue.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../FreeRTOS/Source/queue.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:../FreeRTOS/Source/queue.c ****  * the Software without restriction, including without limitation the rights to
   8:../FreeRTOS/Source/queue.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../FreeRTOS/Source/queue.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../FreeRTOS/Source/queue.c ****  * subject to the following conditions:
  11:../FreeRTOS/Source/queue.c ****  *
  12:../FreeRTOS/Source/queue.c ****  * The above copyright notice and this permission notice shall be included in all
  13:../FreeRTOS/Source/queue.c ****  * copies or substantial portions of the Software.
  14:../FreeRTOS/Source/queue.c ****  *
  15:../FreeRTOS/Source/queue.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../FreeRTOS/Source/queue.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../FreeRTOS/Source/queue.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../FreeRTOS/Source/queue.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../FreeRTOS/Source/queue.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../FreeRTOS/Source/queue.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../FreeRTOS/Source/queue.c ****  *
  22:../FreeRTOS/Source/queue.c ****  * http://www.FreeRTOS.org
  23:../FreeRTOS/Source/queue.c ****  * http://aws.amazon.com/freertos
  24:../FreeRTOS/Source/queue.c ****  *
  25:../FreeRTOS/Source/queue.c ****  * 1 tab == 4 spaces!
  26:../FreeRTOS/Source/queue.c ****  */
  27:../FreeRTOS/Source/queue.c **** 
  28:../FreeRTOS/Source/queue.c **** #include <stdlib.h>
  29:../FreeRTOS/Source/queue.c **** #include <string.h>
  30:../FreeRTOS/Source/queue.c **** 
  31:../FreeRTOS/Source/queue.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
  32:../FreeRTOS/Source/queue.c **** all the API functions to use the MPU wrappers.  That should only be done when
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 2


  33:../FreeRTOS/Source/queue.c **** task.h is included from an application file. */
  34:../FreeRTOS/Source/queue.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  35:../FreeRTOS/Source/queue.c **** 
  36:../FreeRTOS/Source/queue.c **** #include "FreeRTOS.h"
  37:../FreeRTOS/Source/queue.c **** #include "task.h"
  38:../FreeRTOS/Source/queue.c **** #include "queue.h"
  39:../FreeRTOS/Source/queue.c **** 
  40:../FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
  41:../FreeRTOS/Source/queue.c **** 	#include "croutine.h"
  42:../FreeRTOS/Source/queue.c **** #endif
  43:../FreeRTOS/Source/queue.c **** 
  44:../FreeRTOS/Source/queue.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  45:../FreeRTOS/Source/queue.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  46:../FreeRTOS/Source/queue.c **** header files above, but not in this file, in order to generate the correct
  47:../FreeRTOS/Source/queue.c **** privileged Vs unprivileged linkage and placement. */
  48:../FreeRTOS/Source/queue.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  49:../FreeRTOS/Source/queue.c **** 
  50:../FreeRTOS/Source/queue.c **** 
  51:../FreeRTOS/Source/queue.c **** /* Constants used with the cRxLock and cTxLock structure members. */
  52:../FreeRTOS/Source/queue.c **** #define queueUNLOCKED					( ( int8_t ) -1 )
  53:../FreeRTOS/Source/queue.c **** #define queueLOCKED_UNMODIFIED			( ( int8_t ) 0 )
  54:../FreeRTOS/Source/queue.c **** 
  55:../FreeRTOS/Source/queue.c **** /* When the Queue_t structure is used to represent a base queue its pcHead and
  56:../FreeRTOS/Source/queue.c **** pcTail members are used as pointers into the queue storage area.  When the
  57:../FreeRTOS/Source/queue.c **** Queue_t structure is used to represent a mutex pcHead and pcTail pointers are
  58:../FreeRTOS/Source/queue.c **** not necessary, and the pcHead pointer is set to NULL to indicate that the
  59:../FreeRTOS/Source/queue.c **** pcTail pointer actually points to the mutex holder (if any).  Map alternative
  60:../FreeRTOS/Source/queue.c **** names to the pcHead and pcTail structure members to ensure the readability of
  61:../FreeRTOS/Source/queue.c **** the code is maintained despite this dual use of two structure members.  An
  62:../FreeRTOS/Source/queue.c **** alternative implementation would be to use a union, but use of a union is
  63:../FreeRTOS/Source/queue.c **** against the coding standard (although an exception to the standard has been
  64:../FreeRTOS/Source/queue.c **** permitted where the dual use also significantly changes the type of the
  65:../FreeRTOS/Source/queue.c **** structure member). */
  66:../FreeRTOS/Source/queue.c **** #define pxMutexHolder					pcTail
  67:../FreeRTOS/Source/queue.c **** #define uxQueueType						pcHead
  68:../FreeRTOS/Source/queue.c **** #define queueQUEUE_IS_MUTEX				NULL
  69:../FreeRTOS/Source/queue.c **** 
  70:../FreeRTOS/Source/queue.c **** /* Semaphores do not actually store or copy data, so have an item size of
  71:../FreeRTOS/Source/queue.c **** zero. */
  72:../FreeRTOS/Source/queue.c **** #define queueSEMAPHORE_QUEUE_ITEM_LENGTH ( ( UBaseType_t ) 0 )
  73:../FreeRTOS/Source/queue.c **** #define queueMUTEX_GIVE_BLOCK_TIME		 ( ( TickType_t ) 0U )
  74:../FreeRTOS/Source/queue.c **** 
  75:../FreeRTOS/Source/queue.c **** #if( configUSE_PREEMPTION == 0 )
  76:../FreeRTOS/Source/queue.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  77:../FreeRTOS/Source/queue.c **** 	performed just because a higher priority task has been woken. */
  78:../FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION()
  79:../FreeRTOS/Source/queue.c **** #else
  80:../FreeRTOS/Source/queue.c **** 	#define queueYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  81:../FreeRTOS/Source/queue.c **** #endif
  82:../FreeRTOS/Source/queue.c **** 
  83:../FreeRTOS/Source/queue.c **** /*
  84:../FreeRTOS/Source/queue.c ****  * Definition of the queue used by the scheduler.
  85:../FreeRTOS/Source/queue.c ****  * Items are queued by copy, not reference.  See the following link for the
  86:../FreeRTOS/Source/queue.c ****  * rationale: http://www.freertos.org/Embedded-RTOS-Queues.html
  87:../FreeRTOS/Source/queue.c ****  */
  88:../FreeRTOS/Source/queue.c **** typedef struct QueueDefinition
  89:../FreeRTOS/Source/queue.c **** {
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 3


  90:../FreeRTOS/Source/queue.c **** 	int8_t *pcHead;					/*< Points to the beginning of the queue storage area. */
  91:../FreeRTOS/Source/queue.c **** 	int8_t *pcTail;					/*< Points to the byte at the end of the queue storage area.  Once more byte i
  92:../FreeRTOS/Source/queue.c **** 	int8_t *pcWriteTo;				/*< Points to the free next place in the storage area. */
  93:../FreeRTOS/Source/queue.c **** 
  94:../FreeRTOS/Source/queue.c **** 	union							/* Use of a union is an exception to the coding standard to ensure two mutually exclus
  95:../FreeRTOS/Source/queue.c **** 	{
  96:../FreeRTOS/Source/queue.c **** 		int8_t *pcReadFrom;			/*< Points to the last place that a queued item was read from when the stru
  97:../FreeRTOS/Source/queue.c **** 		UBaseType_t uxRecursiveCallCount;/*< Maintains a count of the number of times a recursive mutex h
  98:../FreeRTOS/Source/queue.c **** 	} u;
  99:../FreeRTOS/Source/queue.c **** 
 100:../FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToSend;		/*< List of tasks that are blocked waiting to post onto this queue.  
 101:../FreeRTOS/Source/queue.c **** 	List_t xTasksWaitingToReceive;	/*< List of tasks that are blocked waiting to read from this queue.
 102:../FreeRTOS/Source/queue.c **** 
 103:../FreeRTOS/Source/queue.c **** 	volatile UBaseType_t uxMessagesWaiting;/*< The number of items currently in the queue. */
 104:../FreeRTOS/Source/queue.c **** 	UBaseType_t uxLength;			/*< The length of the queue defined as the number of items it will hold, n
 105:../FreeRTOS/Source/queue.c **** 	UBaseType_t uxItemSize;			/*< The size of each items that the queue will hold. */
 106:../FreeRTOS/Source/queue.c **** 
 107:../FreeRTOS/Source/queue.c **** 	volatile int8_t cRxLock;		/*< Stores the number of items received from the queue (removed from the
 108:../FreeRTOS/Source/queue.c **** 	volatile int8_t cTxLock;		/*< Stores the number of items transmitted to the queue (added to the qu
 109:../FreeRTOS/Source/queue.c **** 
 110:../FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 111:../FreeRTOS/Source/queue.c **** 		uint8_t ucStaticallyAllocated;	/*< Set to pdTRUE if the memory used by the queue was statically a
 112:../FreeRTOS/Source/queue.c **** 	#endif
 113:../FreeRTOS/Source/queue.c **** 
 114:../FreeRTOS/Source/queue.c **** 	#if ( configUSE_QUEUE_SETS == 1 )
 115:../FreeRTOS/Source/queue.c **** 		struct QueueDefinition *pxQueueSetContainer;
 116:../FreeRTOS/Source/queue.c **** 	#endif
 117:../FreeRTOS/Source/queue.c **** 
 118:../FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 119:../FreeRTOS/Source/queue.c **** 		UBaseType_t uxQueueNumber;
 120:../FreeRTOS/Source/queue.c **** 		uint8_t ucQueueType;
 121:../FreeRTOS/Source/queue.c **** 	#endif
 122:../FreeRTOS/Source/queue.c **** 
 123:../FreeRTOS/Source/queue.c **** } xQUEUE;
 124:../FreeRTOS/Source/queue.c **** 
 125:../FreeRTOS/Source/queue.c **** /* The old xQUEUE name is maintained above then typedefed to the new Queue_t
 126:../FreeRTOS/Source/queue.c **** name below to enable the use of older kernel aware debuggers. */
 127:../FreeRTOS/Source/queue.c **** typedef xQUEUE Queue_t;
 128:../FreeRTOS/Source/queue.c **** 
 129:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 130:../FreeRTOS/Source/queue.c **** 
 131:../FreeRTOS/Source/queue.c **** /*
 132:../FreeRTOS/Source/queue.c ****  * The queue registry is just a means for kernel aware debuggers to locate
 133:../FreeRTOS/Source/queue.c ****  * queue structures.  It has no other purpose so is an optional component.
 134:../FreeRTOS/Source/queue.c ****  */
 135:../FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
 136:../FreeRTOS/Source/queue.c **** 
 137:../FreeRTOS/Source/queue.c **** 	/* The type stored within the queue registry array.  This allows a name
 138:../FreeRTOS/Source/queue.c **** 	to be assigned to each queue making kernel aware debugging a little
 139:../FreeRTOS/Source/queue.c **** 	more user friendly. */
 140:../FreeRTOS/Source/queue.c **** 	typedef struct QUEUE_REGISTRY_ITEM
 141:../FreeRTOS/Source/queue.c **** 	{
 142:../FreeRTOS/Source/queue.c **** 		const char *pcQueueName; /*lint !e971 Unqualified char types are allowed for strings and single c
 143:../FreeRTOS/Source/queue.c **** 		QueueHandle_t xHandle;
 144:../FreeRTOS/Source/queue.c **** 	} xQueueRegistryItem;
 145:../FreeRTOS/Source/queue.c **** 
 146:../FreeRTOS/Source/queue.c **** 	/* The old xQueueRegistryItem name is maintained above then typedefed to the
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 4


 147:../FreeRTOS/Source/queue.c **** 	new xQueueRegistryItem name below to enable the use of older kernel aware
 148:../FreeRTOS/Source/queue.c **** 	debuggers. */
 149:../FreeRTOS/Source/queue.c **** 	typedef xQueueRegistryItem QueueRegistryItem_t;
 150:../FreeRTOS/Source/queue.c **** 
 151:../FreeRTOS/Source/queue.c **** 	/* The queue registry is simply an array of QueueRegistryItem_t structures.
 152:../FreeRTOS/Source/queue.c **** 	The pcQueueName member of a structure being NULL is indicative of the
 153:../FreeRTOS/Source/queue.c **** 	array position being vacant. */
 154:../FreeRTOS/Source/queue.c **** 	PRIVILEGED_DATA QueueRegistryItem_t xQueueRegistry[ configQUEUE_REGISTRY_SIZE ];
 155:../FreeRTOS/Source/queue.c **** 
 156:../FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
 157:../FreeRTOS/Source/queue.c **** 
 158:../FreeRTOS/Source/queue.c **** /*
 159:../FreeRTOS/Source/queue.c ****  * Unlocks a queue locked by a call to prvLockQueue.  Locking a queue does not
 160:../FreeRTOS/Source/queue.c ****  * prevent an ISR from adding or removing items to the queue, but does prevent
 161:../FreeRTOS/Source/queue.c ****  * an ISR from removing tasks from the queue event lists.  If an ISR finds a
 162:../FreeRTOS/Source/queue.c ****  * queue is locked it will instead increment the appropriate queue lock count
 163:../FreeRTOS/Source/queue.c ****  * to indicate that a task may require unblocking.  When the queue in unlocked
 164:../FreeRTOS/Source/queue.c ****  * these lock counts are inspected, and the appropriate action taken.
 165:../FreeRTOS/Source/queue.c ****  */
 166:../FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue ) PRIVILEGED_FUNCTION;
 167:../FreeRTOS/Source/queue.c **** 
 168:../FreeRTOS/Source/queue.c **** /*
 169:../FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any data in a queue.
 170:../FreeRTOS/Source/queue.c ****  *
 171:../FreeRTOS/Source/queue.c ****  * @return pdTRUE if the queue contains no items, otherwise pdFALSE.
 172:../FreeRTOS/Source/queue.c ****  */
 173:../FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 174:../FreeRTOS/Source/queue.c **** 
 175:../FreeRTOS/Source/queue.c **** /*
 176:../FreeRTOS/Source/queue.c ****  * Uses a critical section to determine if there is any space in a queue.
 177:../FreeRTOS/Source/queue.c ****  *
 178:../FreeRTOS/Source/queue.c ****  * @return pdTRUE if there is no space, otherwise pdFALSE;
 179:../FreeRTOS/Source/queue.c ****  */
 180:../FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue ) PRIVILEGED_FUNCTION;
 181:../FreeRTOS/Source/queue.c **** 
 182:../FreeRTOS/Source/queue.c **** /*
 183:../FreeRTOS/Source/queue.c ****  * Copies an item into the queue, either at the front of the queue or the
 184:../FreeRTOS/Source/queue.c ****  * back of the queue.
 185:../FreeRTOS/Source/queue.c ****  */
 186:../FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
 187:../FreeRTOS/Source/queue.c **** 
 188:../FreeRTOS/Source/queue.c **** /*
 189:../FreeRTOS/Source/queue.c ****  * Copies an item out of a queue.
 190:../FreeRTOS/Source/queue.c ****  */
 191:../FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer ) PRIVILEGED_FUNCT
 192:../FreeRTOS/Source/queue.c **** 
 193:../FreeRTOS/Source/queue.c **** #if ( configUSE_QUEUE_SETS == 1 )
 194:../FreeRTOS/Source/queue.c **** 	/*
 195:../FreeRTOS/Source/queue.c **** 	 * Checks to see if a queue is a member of a queue set, and if so, notifies
 196:../FreeRTOS/Source/queue.c **** 	 * the queue set that the queue contains data.
 197:../FreeRTOS/Source/queue.c **** 	 */
 198:../FreeRTOS/Source/queue.c **** 	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCop
 199:../FreeRTOS/Source/queue.c **** #endif
 200:../FreeRTOS/Source/queue.c **** 
 201:../FreeRTOS/Source/queue.c **** /*
 202:../FreeRTOS/Source/queue.c ****  * Called after a Queue_t structure has been allocated either statically or
 203:../FreeRTOS/Source/queue.c ****  * dynamically to fill in the structure's members.
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 5


 204:../FreeRTOS/Source/queue.c ****  */
 205:../FreeRTOS/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 206:../FreeRTOS/Source/queue.c **** 
 207:../FreeRTOS/Source/queue.c **** /*
 208:../FreeRTOS/Source/queue.c ****  * Mutexes are a special type of queue.  When a mutex is created, first the
 209:../FreeRTOS/Source/queue.c ****  * queue is created, then prvInitialiseMutex() is called to configure the queue
 210:../FreeRTOS/Source/queue.c ****  * as a mutex.
 211:../FreeRTOS/Source/queue.c ****  */
 212:../FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 213:../FreeRTOS/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue ) PRIVILEGED_FUNCTION;
 214:../FreeRTOS/Source/queue.c **** #endif
 215:../FreeRTOS/Source/queue.c **** 
 216:../FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 217:../FreeRTOS/Source/queue.c **** 	/*
 218:../FreeRTOS/Source/queue.c **** 	 * If a task waiting for a mutex causes the mutex holder to inherit a
 219:../FreeRTOS/Source/queue.c **** 	 * priority, but the waiting task times out, then the holder should
 220:../FreeRTOS/Source/queue.c **** 	 * disinherit the priority - but only down to the highest priority of any
 221:../FreeRTOS/Source/queue.c **** 	 * other tasks that are waiting for the same mutex.  This function returns
 222:../FreeRTOS/Source/queue.c **** 	 * that priority.
 223:../FreeRTOS/Source/queue.c **** 	 */
 224:../FreeRTOS/Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue ) PRIVILEGE
 225:../FreeRTOS/Source/queue.c **** #endif
 226:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 227:../FreeRTOS/Source/queue.c **** 
 228:../FreeRTOS/Source/queue.c **** /*
 229:../FreeRTOS/Source/queue.c ****  * Macro to mark a queue as locked.  Locking a queue prevents an ISR from
 230:../FreeRTOS/Source/queue.c ****  * accessing the queue event lists.
 231:../FreeRTOS/Source/queue.c ****  */
 232:../FreeRTOS/Source/queue.c **** #define prvLockQueue( pxQueue )								\
 233:../FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();									\
 234:../FreeRTOS/Source/queue.c **** 	{														\
 235:../FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cRxLock == queueUNLOCKED )			\
 236:../FreeRTOS/Source/queue.c **** 		{													\
 237:../FreeRTOS/Source/queue.c **** 			( pxQueue )->cRxLock = queueLOCKED_UNMODIFIED;	\
 238:../FreeRTOS/Source/queue.c **** 		}													\
 239:../FreeRTOS/Source/queue.c **** 		if( ( pxQueue )->cTxLock == queueUNLOCKED )			\
 240:../FreeRTOS/Source/queue.c **** 		{													\
 241:../FreeRTOS/Source/queue.c **** 			( pxQueue )->cTxLock = queueLOCKED_UNMODIFIED;	\
 242:../FreeRTOS/Source/queue.c **** 		}													\
 243:../FreeRTOS/Source/queue.c **** 	}														\
 244:../FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL()
 245:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 246:../FreeRTOS/Source/queue.c **** 
 247:../FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
 248:../FreeRTOS/Source/queue.c **** {
 249:../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 250:../FreeRTOS/Source/queue.c **** 
 251:../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 252:../FreeRTOS/Source/queue.c **** 
 253:../FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
 254:../FreeRTOS/Source/queue.c **** 	{
 255:../FreeRTOS/Source/queue.c **** 		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 256:../FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 257:../FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 258:../FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 259:../FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 260:../FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 6


 261:../FreeRTOS/Source/queue.c **** 
 262:../FreeRTOS/Source/queue.c **** 		if( xNewQueue == pdFALSE )
 263:../FreeRTOS/Source/queue.c **** 		{
 264:../FreeRTOS/Source/queue.c **** 			/* If there are tasks blocked waiting to read from the queue, then
 265:../FreeRTOS/Source/queue.c **** 			the tasks will remain blocked as after this function exits the queue
 266:../FreeRTOS/Source/queue.c **** 			will still be empty.  If there are tasks blocked waiting to write to
 267:../FreeRTOS/Source/queue.c **** 			the queue, then one should be unblocked as after this function exits
 268:../FreeRTOS/Source/queue.c **** 			it will be possible to write to it. */
 269:../FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 270:../FreeRTOS/Source/queue.c **** 			{
 271:../FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 272:../FreeRTOS/Source/queue.c **** 				{
 273:../FreeRTOS/Source/queue.c **** 					queueYIELD_IF_USING_PREEMPTION();
 274:../FreeRTOS/Source/queue.c **** 				}
 275:../FreeRTOS/Source/queue.c **** 				else
 276:../FreeRTOS/Source/queue.c **** 				{
 277:../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 278:../FreeRTOS/Source/queue.c **** 				}
 279:../FreeRTOS/Source/queue.c **** 			}
 280:../FreeRTOS/Source/queue.c **** 			else
 281:../FreeRTOS/Source/queue.c **** 			{
 282:../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 283:../FreeRTOS/Source/queue.c **** 			}
 284:../FreeRTOS/Source/queue.c **** 		}
 285:../FreeRTOS/Source/queue.c **** 		else
 286:../FreeRTOS/Source/queue.c **** 		{
 287:../FreeRTOS/Source/queue.c **** 			/* Ensure the event queues start in the correct state. */
 288:../FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 289:../FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 290:../FreeRTOS/Source/queue.c **** 		}
 291:../FreeRTOS/Source/queue.c **** 	}
 292:../FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
 293:../FreeRTOS/Source/queue.c **** 
 294:../FreeRTOS/Source/queue.c **** 	/* A value is returned for calling semantic consistency with previous
 295:../FreeRTOS/Source/queue.c **** 	versions. */
 296:../FreeRTOS/Source/queue.c **** 	return pdPASS;
 297:../FreeRTOS/Source/queue.c **** }
 298:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 299:../FreeRTOS/Source/queue.c **** 
 300:../FreeRTOS/Source/queue.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 301:../FreeRTOS/Source/queue.c **** 
 302:../FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItem
 303:../FreeRTOS/Source/queue.c **** 	{
 304:../FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 305:../FreeRTOS/Source/queue.c **** 
 306:../FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 307:../FreeRTOS/Source/queue.c **** 
 308:../FreeRTOS/Source/queue.c **** 		/* The StaticQueue_t structure and the queue storage area must be
 309:../FreeRTOS/Source/queue.c **** 		supplied. */
 310:../FreeRTOS/Source/queue.c **** 		configASSERT( pxStaticQueue != NULL );
 311:../FreeRTOS/Source/queue.c **** 
 312:../FreeRTOS/Source/queue.c **** 		/* A queue storage area should be provided if the item size is not 0, and
 313:../FreeRTOS/Source/queue.c **** 		should not be provided if the item size is 0. */
 314:../FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 315:../FreeRTOS/Source/queue.c **** 		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 316:../FreeRTOS/Source/queue.c **** 
 317:../FreeRTOS/Source/queue.c **** 		#if( configASSERT_DEFINED == 1 )
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 7


 318:../FreeRTOS/Source/queue.c **** 		{
 319:../FreeRTOS/Source/queue.c **** 			/* Sanity check that the size of the structure used to declare a
 320:../FreeRTOS/Source/queue.c **** 			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
 321:../FreeRTOS/Source/queue.c **** 			the real queue and semaphore structures. */
 322:../FreeRTOS/Source/queue.c **** 			volatile size_t xSize = sizeof( StaticQueue_t );
 323:../FreeRTOS/Source/queue.c **** 			configASSERT( xSize == sizeof( Queue_t ) );
 324:../FreeRTOS/Source/queue.c **** 		}
 325:../FreeRTOS/Source/queue.c **** 		#endif /* configASSERT_DEFINED */
 326:../FreeRTOS/Source/queue.c **** 
 327:../FreeRTOS/Source/queue.c **** 		/* The address of a statically allocated queue was passed in, use it.
 328:../FreeRTOS/Source/queue.c **** 		The address of a statically allocated storage area was also passed in
 329:../FreeRTOS/Source/queue.c **** 		but is already set. */
 330:../FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are d
 331:../FreeRTOS/Source/queue.c **** 
 332:../FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 333:../FreeRTOS/Source/queue.c **** 		{
 334:../FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 335:../FreeRTOS/Source/queue.c **** 			{
 336:../FreeRTOS/Source/queue.c **** 				/* Queues can be allocated wither statically or dynamically, so
 337:../FreeRTOS/Source/queue.c **** 				note this queue was allocated statically in case the queue is
 338:../FreeRTOS/Source/queue.c **** 				later deleted. */
 339:../FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 340:../FreeRTOS/Source/queue.c **** 			}
 341:../FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 342:../FreeRTOS/Source/queue.c **** 
 343:../FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 344:../FreeRTOS/Source/queue.c **** 		}
 345:../FreeRTOS/Source/queue.c **** 		else
 346:../FreeRTOS/Source/queue.c **** 		{
 347:../FreeRTOS/Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 348:../FreeRTOS/Source/queue.c **** 		}
 349:../FreeRTOS/Source/queue.c **** 
 350:../FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 351:../FreeRTOS/Source/queue.c **** 	}
 352:../FreeRTOS/Source/queue.c **** 
 353:../FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 354:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 355:../FreeRTOS/Source/queue.c **** 
 356:../FreeRTOS/Source/queue.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 357:../FreeRTOS/Source/queue.c **** 
 358:../FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, 
 359:../FreeRTOS/Source/queue.c **** 	{
 360:../FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 361:../FreeRTOS/Source/queue.c **** 	size_t xQueueSizeInBytes;
 362:../FreeRTOS/Source/queue.c **** 	uint8_t *pucQueueStorage;
 363:../FreeRTOS/Source/queue.c **** 
 364:../FreeRTOS/Source/queue.c **** 		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 365:../FreeRTOS/Source/queue.c **** 
 366:../FreeRTOS/Source/queue.c **** 		if( uxItemSize == ( UBaseType_t ) 0 )
 367:../FreeRTOS/Source/queue.c **** 		{
 368:../FreeRTOS/Source/queue.c **** 			/* There is not going to be a queue storage area. */
 369:../FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) 0;
 370:../FreeRTOS/Source/queue.c **** 		}
 371:../FreeRTOS/Source/queue.c **** 		else
 372:../FreeRTOS/Source/queue.c **** 		{
 373:../FreeRTOS/Source/queue.c **** 			/* Allocate enough space to hold the maximum number of items that
 374:../FreeRTOS/Source/queue.c **** 			can be in the queue at any time. */
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 8


 375:../FreeRTOS/Source/queue.c **** 			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as t
 376:../FreeRTOS/Source/queue.c **** 		}
 377:../FreeRTOS/Source/queue.c **** 
 378:../FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 379:../FreeRTOS/Source/queue.c **** 
 380:../FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 381:../FreeRTOS/Source/queue.c **** 		{
 382:../FreeRTOS/Source/queue.c **** 			/* Jump past the queue structure to find the location of the queue
 383:../FreeRTOS/Source/queue.c **** 			storage area. */
 384:../FreeRTOS/Source/queue.c **** 			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 385:../FreeRTOS/Source/queue.c **** 
 386:../FreeRTOS/Source/queue.c **** 			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 387:../FreeRTOS/Source/queue.c **** 			{
 388:../FreeRTOS/Source/queue.c **** 				/* Queues can be created either statically or dynamically, so
 389:../FreeRTOS/Source/queue.c **** 				note this task was created dynamically in case it is later
 390:../FreeRTOS/Source/queue.c **** 				deleted. */
 391:../FreeRTOS/Source/queue.c **** 				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 392:../FreeRTOS/Source/queue.c **** 			}
 393:../FreeRTOS/Source/queue.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 394:../FreeRTOS/Source/queue.c **** 
 395:../FreeRTOS/Source/queue.c **** 			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 396:../FreeRTOS/Source/queue.c **** 		}
 397:../FreeRTOS/Source/queue.c **** 		else
 398:../FreeRTOS/Source/queue.c **** 		{
 399:../FreeRTOS/Source/queue.c **** 			traceQUEUE_CREATE_FAILED( ucQueueType );
 400:../FreeRTOS/Source/queue.c **** 		}
 401:../FreeRTOS/Source/queue.c **** 
 402:../FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 403:../FreeRTOS/Source/queue.c **** 	}
 404:../FreeRTOS/Source/queue.c **** 
 405:../FreeRTOS/Source/queue.c **** #endif /* configSUPPORT_STATIC_ALLOCATION */
 406:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 407:../FreeRTOS/Source/queue.c **** 
 408:../FreeRTOS/Source/queue.c **** static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, u
 409:../FreeRTOS/Source/queue.c **** {
 410:../FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 411:../FreeRTOS/Source/queue.c **** 	configUSE_TRACE_FACILITY not be set to 1. */
 412:../FreeRTOS/Source/queue.c **** 	( void ) ucQueueType;
 413:../FreeRTOS/Source/queue.c **** 
 414:../FreeRTOS/Source/queue.c **** 	if( uxItemSize == ( UBaseType_t ) 0 )
 415:../FreeRTOS/Source/queue.c **** 	{
 416:../FreeRTOS/Source/queue.c **** 		/* No RAM was allocated for the queue storage area, but PC head cannot
 417:../FreeRTOS/Source/queue.c **** 		be set to NULL because NULL is used as a key to say the queue is used as
 418:../FreeRTOS/Source/queue.c **** 		a mutex.  Therefore just set pcHead to point to the queue as a benign
 419:../FreeRTOS/Source/queue.c **** 		value that is known to be within the memory map. */
 420:../FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 421:../FreeRTOS/Source/queue.c **** 	}
 422:../FreeRTOS/Source/queue.c **** 	else
 423:../FreeRTOS/Source/queue.c **** 	{
 424:../FreeRTOS/Source/queue.c **** 		/* Set the head to the start of the queue storage area. */
 425:../FreeRTOS/Source/queue.c **** 		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 426:../FreeRTOS/Source/queue.c **** 	}
 427:../FreeRTOS/Source/queue.c **** 
 428:../FreeRTOS/Source/queue.c **** 	/* Initialise the queue members as described where the queue type is
 429:../FreeRTOS/Source/queue.c **** 	defined. */
 430:../FreeRTOS/Source/queue.c **** 	pxNewQueue->uxLength = uxQueueLength;
 431:../FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 9


 432:../FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 433:../FreeRTOS/Source/queue.c **** 
 434:../FreeRTOS/Source/queue.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 435:../FreeRTOS/Source/queue.c **** 	{
 436:../FreeRTOS/Source/queue.c **** 		pxNewQueue->ucQueueType = ucQueueType;
 437:../FreeRTOS/Source/queue.c **** 	}
 438:../FreeRTOS/Source/queue.c **** 	#endif /* configUSE_TRACE_FACILITY */
 439:../FreeRTOS/Source/queue.c **** 
 440:../FreeRTOS/Source/queue.c **** 	#if( configUSE_QUEUE_SETS == 1 )
 441:../FreeRTOS/Source/queue.c **** 	{
 442:../FreeRTOS/Source/queue.c **** 		pxNewQueue->pxQueueSetContainer = NULL;
 443:../FreeRTOS/Source/queue.c **** 	}
 444:../FreeRTOS/Source/queue.c **** 	#endif /* configUSE_QUEUE_SETS */
 445:../FreeRTOS/Source/queue.c **** 
 446:../FreeRTOS/Source/queue.c **** 	traceQUEUE_CREATE( pxNewQueue );
 447:../FreeRTOS/Source/queue.c **** }
 448:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 449:../FreeRTOS/Source/queue.c **** 
 450:../FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
 451:../FreeRTOS/Source/queue.c **** 
 452:../FreeRTOS/Source/queue.c **** 	static void prvInitialiseMutex( Queue_t *pxNewQueue )
 453:../FreeRTOS/Source/queue.c **** 	{
 454:../FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 455:../FreeRTOS/Source/queue.c **** 		{
 456:../FreeRTOS/Source/queue.c **** 			/* The queue create function will set all the queue structure members
 457:../FreeRTOS/Source/queue.c **** 			correctly for a generic queue, but this function is creating a
 458:../FreeRTOS/Source/queue.c **** 			mutex.  Overwrite those members that need to be set differently -
 459:../FreeRTOS/Source/queue.c **** 			in particular the information required for priority inheritance. */
 460:../FreeRTOS/Source/queue.c **** 			pxNewQueue->pxMutexHolder = NULL;
 461:../FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 462:../FreeRTOS/Source/queue.c **** 
 463:../FreeRTOS/Source/queue.c **** 			/* In case this is a recursive mutex. */
 464:../FreeRTOS/Source/queue.c **** 			pxNewQueue->u.uxRecursiveCallCount = 0;
 465:../FreeRTOS/Source/queue.c **** 
 466:../FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX( pxNewQueue );
 467:../FreeRTOS/Source/queue.c **** 
 468:../FreeRTOS/Source/queue.c **** 			/* Start with the semaphore in the expected state. */
 469:../FreeRTOS/Source/queue.c **** 			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 470:../FreeRTOS/Source/queue.c **** 		}
 471:../FreeRTOS/Source/queue.c **** 		else
 472:../FreeRTOS/Source/queue.c **** 		{
 473:../FreeRTOS/Source/queue.c **** 			traceCREATE_MUTEX_FAILED();
 474:../FreeRTOS/Source/queue.c **** 		}
 475:../FreeRTOS/Source/queue.c **** 	}
 476:../FreeRTOS/Source/queue.c **** 
 477:../FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 478:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 479:../FreeRTOS/Source/queue.c **** 
 480:../FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 481:../FreeRTOS/Source/queue.c **** 
 482:../FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
 483:../FreeRTOS/Source/queue.c **** 	{
 484:../FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 485:../FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 486:../FreeRTOS/Source/queue.c **** 
 487:../FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 488:../FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 10


 489:../FreeRTOS/Source/queue.c **** 
 490:../FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 491:../FreeRTOS/Source/queue.c **** 	}
 492:../FreeRTOS/Source/queue.c **** 
 493:../FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 494:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 495:../FreeRTOS/Source/queue.c **** 
 496:../FreeRTOS/Source/queue.c **** #if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 497:../FreeRTOS/Source/queue.c **** 
 498:../FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
 499:../FreeRTOS/Source/queue.c **** 	{
 500:../FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 501:../FreeRTOS/Source/queue.c **** 	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 502:../FreeRTOS/Source/queue.c **** 
 503:../FreeRTOS/Source/queue.c **** 		/* Prevent compiler warnings about unused parameters if
 504:../FreeRTOS/Source/queue.c **** 		configUSE_TRACE_FACILITY does not equal 1. */
 505:../FreeRTOS/Source/queue.c **** 		( void ) ucQueueType;
 506:../FreeRTOS/Source/queue.c **** 
 507:../FreeRTOS/Source/queue.c **** 		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQ
 508:../FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 509:../FreeRTOS/Source/queue.c **** 
 510:../FreeRTOS/Source/queue.c **** 		return pxNewQueue;
 511:../FreeRTOS/Source/queue.c **** 	}
 512:../FreeRTOS/Source/queue.c **** 
 513:../FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
 514:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 515:../FreeRTOS/Source/queue.c **** 
 516:../FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 517:../FreeRTOS/Source/queue.c **** 
 518:../FreeRTOS/Source/queue.c **** 	void* xQueueGetMutexHolder( QueueHandle_t xSemaphore )
 519:../FreeRTOS/Source/queue.c **** 	{
 520:../FreeRTOS/Source/queue.c **** 	void *pxReturn;
 521:../FreeRTOS/Source/queue.c **** 
 522:../FreeRTOS/Source/queue.c **** 		/* This function is called by xSemaphoreGetMutexHolder(), and should not
 523:../FreeRTOS/Source/queue.c **** 		be called directly.  Note:  This is a good way of determining if the
 524:../FreeRTOS/Source/queue.c **** 		calling task is the mutex holder, but not a good way of determining the
 525:../FreeRTOS/Source/queue.c **** 		identity of the mutex holder, as the holder may change between the
 526:../FreeRTOS/Source/queue.c **** 		following critical section exiting and the function returning. */
 527:../FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 528:../FreeRTOS/Source/queue.c **** 		{
 529:../FreeRTOS/Source/queue.c **** 			if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 530:../FreeRTOS/Source/queue.c **** 			{
 531:../FreeRTOS/Source/queue.c **** 				pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 532:../FreeRTOS/Source/queue.c **** 			}
 533:../FreeRTOS/Source/queue.c **** 			else
 534:../FreeRTOS/Source/queue.c **** 			{
 535:../FreeRTOS/Source/queue.c **** 				pxReturn = NULL;
 536:../FreeRTOS/Source/queue.c **** 			}
 537:../FreeRTOS/Source/queue.c **** 		}
 538:../FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 539:../FreeRTOS/Source/queue.c **** 
 540:../FreeRTOS/Source/queue.c **** 		return pxReturn;
 541:../FreeRTOS/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 542:../FreeRTOS/Source/queue.c **** 
 543:../FreeRTOS/Source/queue.c **** #endif
 544:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 545:../FreeRTOS/Source/queue.c **** 
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 11


 546:../FreeRTOS/Source/queue.c **** #if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )
 547:../FreeRTOS/Source/queue.c **** 
 548:../FreeRTOS/Source/queue.c **** 	void* xQueueGetMutexHolderFromISR( QueueHandle_t xSemaphore )
 549:../FreeRTOS/Source/queue.c **** 	{
 550:../FreeRTOS/Source/queue.c **** 	void *pxReturn;
 551:../FreeRTOS/Source/queue.c **** 
 552:../FreeRTOS/Source/queue.c **** 		configASSERT( xSemaphore );
 553:../FreeRTOS/Source/queue.c **** 
 554:../FreeRTOS/Source/queue.c **** 		/* Mutexes cannot be used in interrupt service routines, so the mutex
 555:../FreeRTOS/Source/queue.c **** 		holder should not change in an ISR, and therefore a critical section is
 556:../FreeRTOS/Source/queue.c **** 		not required here. */
 557:../FreeRTOS/Source/queue.c **** 		if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 558:../FreeRTOS/Source/queue.c **** 		{
 559:../FreeRTOS/Source/queue.c **** 			pxReturn = ( void * ) ( ( Queue_t * ) xSemaphore )->pxMutexHolder;
 560:../FreeRTOS/Source/queue.c **** 		}
 561:../FreeRTOS/Source/queue.c **** 		else
 562:../FreeRTOS/Source/queue.c **** 		{
 563:../FreeRTOS/Source/queue.c **** 			pxReturn = NULL;
 564:../FreeRTOS/Source/queue.c **** 		}
 565:../FreeRTOS/Source/queue.c **** 
 566:../FreeRTOS/Source/queue.c **** 		return pxReturn;
 567:../FreeRTOS/Source/queue.c **** 	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 568:../FreeRTOS/Source/queue.c **** 
 569:../FreeRTOS/Source/queue.c **** #endif
 570:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 571:../FreeRTOS/Source/queue.c **** 
 572:../FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 573:../FreeRTOS/Source/queue.c **** 
 574:../FreeRTOS/Source/queue.c **** 	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
 575:../FreeRTOS/Source/queue.c **** 	{
 576:../FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 577:../FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 578:../FreeRTOS/Source/queue.c **** 
 579:../FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 580:../FreeRTOS/Source/queue.c **** 
 581:../FreeRTOS/Source/queue.c **** 		/* If this is the task that holds the mutex then pxMutexHolder will not
 582:../FreeRTOS/Source/queue.c **** 		change outside of this task.  If this task does not hold the mutex then
 583:../FreeRTOS/Source/queue.c **** 		pxMutexHolder can never coincidentally equal the tasks handle, and as
 584:../FreeRTOS/Source/queue.c **** 		this is the only condition we are interested in it does not matter if
 585:../FreeRTOS/Source/queue.c **** 		pxMutexHolder is accessed simultaneously by another task.  Therefore no
 586:../FreeRTOS/Source/queue.c **** 		mutual exclusion is required to test the pxMutexHolder variable. */
 587:../FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redunda
 588:../FreeRTOS/Source/queue.c **** 		{
 589:../FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE( pxMutex );
 590:../FreeRTOS/Source/queue.c **** 
 591:../FreeRTOS/Source/queue.c **** 			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
 592:../FreeRTOS/Source/queue.c **** 			the task handle, therefore no underflow check is required.  Also,
 593:../FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount is only modified by the mutex holder, and as
 594:../FreeRTOS/Source/queue.c **** 			there can only be one, no mutual exclusion is required to modify the
 595:../FreeRTOS/Source/queue.c **** 			uxRecursiveCallCount member. */
 596:../FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )--;
 597:../FreeRTOS/Source/queue.c **** 
 598:../FreeRTOS/Source/queue.c **** 			/* Has the recursive call count unwound to 0? */
 599:../FreeRTOS/Source/queue.c **** 			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 600:../FreeRTOS/Source/queue.c **** 			{
 601:../FreeRTOS/Source/queue.c **** 				/* Return the mutex.  This will automatically unblock any other
 602:../FreeRTOS/Source/queue.c **** 				task that might be waiting to access the mutex. */
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 12


 603:../FreeRTOS/Source/queue.c **** 				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 604:../FreeRTOS/Source/queue.c **** 			}
 605:../FreeRTOS/Source/queue.c **** 			else
 606:../FreeRTOS/Source/queue.c **** 			{
 607:../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
 608:../FreeRTOS/Source/queue.c **** 			}
 609:../FreeRTOS/Source/queue.c **** 
 610:../FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 611:../FreeRTOS/Source/queue.c **** 		}
 612:../FreeRTOS/Source/queue.c **** 		else
 613:../FreeRTOS/Source/queue.c **** 		{
 614:../FreeRTOS/Source/queue.c **** 			/* The mutex cannot be given because the calling task is not the
 615:../FreeRTOS/Source/queue.c **** 			holder. */
 616:../FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
 617:../FreeRTOS/Source/queue.c **** 
 618:../FreeRTOS/Source/queue.c **** 			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
 619:../FreeRTOS/Source/queue.c **** 		}
 620:../FreeRTOS/Source/queue.c **** 
 621:../FreeRTOS/Source/queue.c **** 		return xReturn;
 622:../FreeRTOS/Source/queue.c **** 	}
 623:../FreeRTOS/Source/queue.c **** 
 624:../FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 625:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 626:../FreeRTOS/Source/queue.c **** 
 627:../FreeRTOS/Source/queue.c **** #if ( configUSE_RECURSIVE_MUTEXES == 1 )
 628:../FreeRTOS/Source/queue.c **** 
 629:../FreeRTOS/Source/queue.c **** 	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
 630:../FreeRTOS/Source/queue.c **** 	{
 631:../FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 632:../FreeRTOS/Source/queue.c **** 	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 633:../FreeRTOS/Source/queue.c **** 
 634:../FreeRTOS/Source/queue.c **** 		configASSERT( pxMutex );
 635:../FreeRTOS/Source/queue.c **** 
 636:../FreeRTOS/Source/queue.c **** 		/* Comments regarding mutual exclusion as per those within
 637:../FreeRTOS/Source/queue.c **** 		xQueueGiveMutexRecursive(). */
 638:../FreeRTOS/Source/queue.c **** 
 639:../FreeRTOS/Source/queue.c **** 		traceTAKE_MUTEX_RECURSIVE( pxMutex );
 640:../FreeRTOS/Source/queue.c **** 
 641:../FreeRTOS/Source/queue.c **** 		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not r
 642:../FreeRTOS/Source/queue.c **** 		{
 643:../FreeRTOS/Source/queue.c **** 			( pxMutex->u.uxRecursiveCallCount )++;
 644:../FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 645:../FreeRTOS/Source/queue.c **** 		}
 646:../FreeRTOS/Source/queue.c **** 		else
 647:../FreeRTOS/Source/queue.c **** 		{
 648:../FreeRTOS/Source/queue.c **** 			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 649:../FreeRTOS/Source/queue.c **** 
 650:../FreeRTOS/Source/queue.c **** 			/* pdPASS will only be returned if the mutex was successfully
 651:../FreeRTOS/Source/queue.c **** 			obtained.  The calling task may have entered the Blocked state
 652:../FreeRTOS/Source/queue.c **** 			before reaching here. */
 653:../FreeRTOS/Source/queue.c **** 			if( xReturn != pdFAIL )
 654:../FreeRTOS/Source/queue.c **** 			{
 655:../FreeRTOS/Source/queue.c **** 				( pxMutex->u.uxRecursiveCallCount )++;
 656:../FreeRTOS/Source/queue.c **** 			}
 657:../FreeRTOS/Source/queue.c **** 			else
 658:../FreeRTOS/Source/queue.c **** 			{
 659:../FreeRTOS/Source/queue.c **** 				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 13


 660:../FreeRTOS/Source/queue.c **** 			}
 661:../FreeRTOS/Source/queue.c **** 		}
 662:../FreeRTOS/Source/queue.c **** 
 663:../FreeRTOS/Source/queue.c **** 		return xReturn;
 664:../FreeRTOS/Source/queue.c **** 	}
 665:../FreeRTOS/Source/queue.c **** 
 666:../FreeRTOS/Source/queue.c **** #endif /* configUSE_RECURSIVE_MUTEXES */
 667:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 668:../FreeRTOS/Source/queue.c **** 
 669:../FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 670:../FreeRTOS/Source/queue.c **** 
 671:../FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t
 672:../FreeRTOS/Source/queue.c **** 	{
 673:../FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 674:../FreeRTOS/Source/queue.c **** 
 675:../FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 676:../FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 677:../FreeRTOS/Source/queue.c **** 
 678:../FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStatic
 679:../FreeRTOS/Source/queue.c **** 
 680:../FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 681:../FreeRTOS/Source/queue.c **** 		{
 682:../FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 683:../FreeRTOS/Source/queue.c **** 
 684:../FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 685:../FreeRTOS/Source/queue.c **** 		}
 686:../FreeRTOS/Source/queue.c **** 		else
 687:../FreeRTOS/Source/queue.c **** 		{
 688:../FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
 689:../FreeRTOS/Source/queue.c **** 		}
 690:../FreeRTOS/Source/queue.c **** 
 691:../FreeRTOS/Source/queue.c **** 		return xHandle;
 692:../FreeRTOS/Source/queue.c **** 	}
 693:../FreeRTOS/Source/queue.c **** 
 694:../FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 695:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 696:../FreeRTOS/Source/queue.c **** 
 697:../FreeRTOS/Source/queue.c **** #if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 698:../FreeRTOS/Source/queue.c **** 
 699:../FreeRTOS/Source/queue.c **** 	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxIni
 700:../FreeRTOS/Source/queue.c **** 	{
 701:../FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 702:../FreeRTOS/Source/queue.c **** 
 703:../FreeRTOS/Source/queue.c **** 		configASSERT( uxMaxCount != 0 );
 704:../FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 705:../FreeRTOS/Source/queue.c **** 
 706:../FreeRTOS/Source/queue.c **** 		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUN
 707:../FreeRTOS/Source/queue.c **** 
 708:../FreeRTOS/Source/queue.c **** 		if( xHandle != NULL )
 709:../FreeRTOS/Source/queue.c **** 		{
 710:../FreeRTOS/Source/queue.c **** 			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 711:../FreeRTOS/Source/queue.c **** 
 712:../FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE();
 713:../FreeRTOS/Source/queue.c **** 		}
 714:../FreeRTOS/Source/queue.c **** 		else
 715:../FreeRTOS/Source/queue.c **** 		{
 716:../FreeRTOS/Source/queue.c **** 			traceCREATE_COUNTING_SEMAPHORE_FAILED();
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 14


 717:../FreeRTOS/Source/queue.c **** 		}
 718:../FreeRTOS/Source/queue.c **** 
 719:../FreeRTOS/Source/queue.c **** 		return xHandle;
 720:../FreeRTOS/Source/queue.c **** 	}
 721:../FreeRTOS/Source/queue.c **** 
 722:../FreeRTOS/Source/queue.c **** #endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) *
 723:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 724:../FreeRTOS/Source/queue.c **** 
 725:../FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xT
 726:../FreeRTOS/Source/queue.c **** {
 727:../FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 728:../FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
 729:../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 730:../FreeRTOS/Source/queue.c **** 
 731:../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 732:../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 733:../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 734:../FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 735:../FreeRTOS/Source/queue.c **** 	{
 736:../FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
 737:../FreeRTOS/Source/queue.c **** 	}
 738:../FreeRTOS/Source/queue.c **** 	#endif
 739:../FreeRTOS/Source/queue.c **** 
 740:../FreeRTOS/Source/queue.c **** 
 741:../FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
 742:../FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
 743:../FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
 744:../FreeRTOS/Source/queue.c **** 	for( ;; )
 745:../FreeRTOS/Source/queue.c **** 	{
 746:../FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
 747:../FreeRTOS/Source/queue.c **** 		{
 748:../FreeRTOS/Source/queue.c **** 			/* Is there room on the queue now?  The running task must be the
 749:../FreeRTOS/Source/queue.c **** 			highest priority task wanting to access the queue.  If the head item
 750:../FreeRTOS/Source/queue.c **** 			in the queue is to be overwritten then it does not matter if the
 751:../FreeRTOS/Source/queue.c **** 			queue is full. */
 752:../FreeRTOS/Source/queue.c **** 			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 753:../FreeRTOS/Source/queue.c **** 			{
 754:../FreeRTOS/Source/queue.c **** 				traceQUEUE_SEND( pxQueue );
 755:../FreeRTOS/Source/queue.c **** 				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 756:../FreeRTOS/Source/queue.c **** 
 757:../FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 758:../FreeRTOS/Source/queue.c **** 				{
 759:../FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 760:../FreeRTOS/Source/queue.c **** 					{
 761:../FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 762:../FreeRTOS/Source/queue.c **** 						{
 763:../FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 764:../FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 765:../FreeRTOS/Source/queue.c **** 							unblock. A context switch is required. */
 766:../FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 767:../FreeRTOS/Source/queue.c **** 						}
 768:../FreeRTOS/Source/queue.c **** 						else
 769:../FreeRTOS/Source/queue.c **** 						{
 770:../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 771:../FreeRTOS/Source/queue.c **** 						}
 772:../FreeRTOS/Source/queue.c **** 					}
 773:../FreeRTOS/Source/queue.c **** 					else
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 15


 774:../FreeRTOS/Source/queue.c **** 					{
 775:../FreeRTOS/Source/queue.c **** 						/* If there was a task waiting for data to arrive on the
 776:../FreeRTOS/Source/queue.c **** 						queue then unblock it now. */
 777:../FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 778:../FreeRTOS/Source/queue.c **** 						{
 779:../FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 780:../FreeRTOS/Source/queue.c **** 							{
 781:../FreeRTOS/Source/queue.c **** 								/* The unblocked task has a priority higher than
 782:../FreeRTOS/Source/queue.c **** 								our own so yield immediately.  Yes it is ok to
 783:../FreeRTOS/Source/queue.c **** 								do this from within the critical section - the
 784:../FreeRTOS/Source/queue.c **** 								kernel takes care of that. */
 785:../FreeRTOS/Source/queue.c **** 								queueYIELD_IF_USING_PREEMPTION();
 786:../FreeRTOS/Source/queue.c **** 							}
 787:../FreeRTOS/Source/queue.c **** 							else
 788:../FreeRTOS/Source/queue.c **** 							{
 789:../FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 790:../FreeRTOS/Source/queue.c **** 							}
 791:../FreeRTOS/Source/queue.c **** 						}
 792:../FreeRTOS/Source/queue.c **** 						else if( xYieldRequired != pdFALSE )
 793:../FreeRTOS/Source/queue.c **** 						{
 794:../FreeRTOS/Source/queue.c **** 							/* This path is a special case that will only get
 795:../FreeRTOS/Source/queue.c **** 							executed if the task was holding multiple mutexes
 796:../FreeRTOS/Source/queue.c **** 							and the mutexes were given back in an order that is
 797:../FreeRTOS/Source/queue.c **** 							different to that in which they were taken. */
 798:../FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 799:../FreeRTOS/Source/queue.c **** 						}
 800:../FreeRTOS/Source/queue.c **** 						else
 801:../FreeRTOS/Source/queue.c **** 						{
 802:../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 803:../FreeRTOS/Source/queue.c **** 						}
 804:../FreeRTOS/Source/queue.c **** 					}
 805:../FreeRTOS/Source/queue.c **** 				}
 806:../FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
 807:../FreeRTOS/Source/queue.c **** 				{
 808:../FreeRTOS/Source/queue.c **** 					/* If there was a task waiting for data to arrive on the
 809:../FreeRTOS/Source/queue.c **** 					queue then unblock it now. */
 810:../FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 811:../FreeRTOS/Source/queue.c **** 					{
 812:../FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 813:../FreeRTOS/Source/queue.c **** 						{
 814:../FreeRTOS/Source/queue.c **** 							/* The unblocked task has a priority higher than
 815:../FreeRTOS/Source/queue.c **** 							our own so yield immediately.  Yes it is ok to do
 816:../FreeRTOS/Source/queue.c **** 							this from within the critical section - the kernel
 817:../FreeRTOS/Source/queue.c **** 							takes care of that. */
 818:../FreeRTOS/Source/queue.c **** 							queueYIELD_IF_USING_PREEMPTION();
 819:../FreeRTOS/Source/queue.c **** 						}
 820:../FreeRTOS/Source/queue.c **** 						else
 821:../FreeRTOS/Source/queue.c **** 						{
 822:../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 823:../FreeRTOS/Source/queue.c **** 						}
 824:../FreeRTOS/Source/queue.c **** 					}
 825:../FreeRTOS/Source/queue.c **** 					else if( xYieldRequired != pdFALSE )
 826:../FreeRTOS/Source/queue.c **** 					{
 827:../FreeRTOS/Source/queue.c **** 						/* This path is a special case that will only get
 828:../FreeRTOS/Source/queue.c **** 						executed if the task was holding multiple mutexes and
 829:../FreeRTOS/Source/queue.c **** 						the mutexes were given back in an order that is
 830:../FreeRTOS/Source/queue.c **** 						different to that in which they were taken. */
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 16


 831:../FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
 832:../FreeRTOS/Source/queue.c **** 					}
 833:../FreeRTOS/Source/queue.c **** 					else
 834:../FreeRTOS/Source/queue.c **** 					{
 835:../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
 836:../FreeRTOS/Source/queue.c **** 					}
 837:../FreeRTOS/Source/queue.c **** 				}
 838:../FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
 839:../FreeRTOS/Source/queue.c **** 
 840:../FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
 841:../FreeRTOS/Source/queue.c **** 				return pdPASS;
 842:../FreeRTOS/Source/queue.c **** 			}
 843:../FreeRTOS/Source/queue.c **** 			else
 844:../FreeRTOS/Source/queue.c **** 			{
 845:../FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
 846:../FreeRTOS/Source/queue.c **** 				{
 847:../FreeRTOS/Source/queue.c **** 					/* The queue was full and no block time is specified (or
 848:../FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
 849:../FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
 850:../FreeRTOS/Source/queue.c **** 
 851:../FreeRTOS/Source/queue.c **** 					/* Return to the original privilege level before exiting
 852:../FreeRTOS/Source/queue.c **** 					the function. */
 853:../FreeRTOS/Source/queue.c **** 					traceQUEUE_SEND_FAILED( pxQueue );
 854:../FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
 855:../FreeRTOS/Source/queue.c **** 				}
 856:../FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
 857:../FreeRTOS/Source/queue.c **** 				{
 858:../FreeRTOS/Source/queue.c **** 					/* The queue was full and a block time was specified so
 859:../FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
 860:../FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
 861:../FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 862:../FreeRTOS/Source/queue.c **** 				}
 863:../FreeRTOS/Source/queue.c **** 				else
 864:../FreeRTOS/Source/queue.c **** 				{
 865:../FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
 866:../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
 867:../FreeRTOS/Source/queue.c **** 				}
 868:../FreeRTOS/Source/queue.c **** 			}
 869:../FreeRTOS/Source/queue.c **** 		}
 870:../FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
 871:../FreeRTOS/Source/queue.c **** 
 872:../FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
 873:../FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
 874:../FreeRTOS/Source/queue.c **** 
 875:../FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
 876:../FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 877:../FreeRTOS/Source/queue.c **** 
 878:../FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
 879:../FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 880:../FreeRTOS/Source/queue.c **** 		{
 881:../FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 882:../FreeRTOS/Source/queue.c **** 			{
 883:../FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 884:../FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 885:../FreeRTOS/Source/queue.c **** 
 886:../FreeRTOS/Source/queue.c **** 				/* Unlocking the queue means queue events can effect the
 887:../FreeRTOS/Source/queue.c **** 				event list.  It is possible that interrupts occurring now
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 17


 888:../FreeRTOS/Source/queue.c **** 				remove this task from the event list again - but as the
 889:../FreeRTOS/Source/queue.c **** 				scheduler is suspended the task will go onto the pending
 890:../FreeRTOS/Source/queue.c **** 				ready last instead of the actual ready list. */
 891:../FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 892:../FreeRTOS/Source/queue.c **** 
 893:../FreeRTOS/Source/queue.c **** 				/* Resuming the scheduler will move tasks from the pending
 894:../FreeRTOS/Source/queue.c **** 				ready list into the ready list - so it is feasible that this
 895:../FreeRTOS/Source/queue.c **** 				task is already in a ready list before it yields - in which
 896:../FreeRTOS/Source/queue.c **** 				case the yield will not cause a context switch unless there
 897:../FreeRTOS/Source/queue.c **** 				is also a higher priority task in the pending ready list. */
 898:../FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 899:../FreeRTOS/Source/queue.c **** 				{
 900:../FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
 901:../FreeRTOS/Source/queue.c **** 				}
 902:../FreeRTOS/Source/queue.c **** 			}
 903:../FreeRTOS/Source/queue.c **** 			else
 904:../FreeRTOS/Source/queue.c **** 			{
 905:../FreeRTOS/Source/queue.c **** 				/* Try again. */
 906:../FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 907:../FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 908:../FreeRTOS/Source/queue.c **** 			}
 909:../FreeRTOS/Source/queue.c **** 		}
 910:../FreeRTOS/Source/queue.c **** 		else
 911:../FreeRTOS/Source/queue.c **** 		{
 912:../FreeRTOS/Source/queue.c **** 			/* The timeout has expired. */
 913:../FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
 914:../FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 915:../FreeRTOS/Source/queue.c **** 
 916:../FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FAILED( pxQueue );
 917:../FreeRTOS/Source/queue.c **** 			return errQUEUE_FULL;
 918:../FreeRTOS/Source/queue.c **** 		}
 919:../FreeRTOS/Source/queue.c **** 	}
 920:../FreeRTOS/Source/queue.c **** }
 921:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 922:../FreeRTOS/Source/queue.c **** 
 923:../FreeRTOS/Source/queue.c **** BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseTy
 924:../FreeRTOS/Source/queue.c **** {
 925:../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 926:../FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
 927:../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 928:../FreeRTOS/Source/queue.c **** 
 929:../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
 930:../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 931:../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 932:../FreeRTOS/Source/queue.c **** 
 933:../FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
 934:../FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
 935:../FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
 936:../FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
 937:../FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
 938:../FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
 939:../FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
 940:../FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
 941:../FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
 942:../FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
 943:../FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
 944:../FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 18


 945:../FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
 946:../FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
 947:../FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 948:../FreeRTOS/Source/queue.c **** 
 949:../FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSend, except without blocking if there is no room
 950:../FreeRTOS/Source/queue.c **** 	in the queue.  Also don't directly wake a task that was blocked on a queue
 951:../FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
 952:../FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
 953:../FreeRTOS/Source/queue.c **** 	post). */
 954:../FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 955:../FreeRTOS/Source/queue.c **** 	{
 956:../FreeRTOS/Source/queue.c **** 		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 957:../FreeRTOS/Source/queue.c **** 		{
 958:../FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
 959:../FreeRTOS/Source/queue.c **** 
 960:../FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
 961:../FreeRTOS/Source/queue.c **** 
 962:../FreeRTOS/Source/queue.c **** 			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
 963:../FreeRTOS/Source/queue.c **** 			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
 964:../FreeRTOS/Source/queue.c **** 			in a task disinheriting a priority and prvCopyDataToQueue() can be
 965:../FreeRTOS/Source/queue.c **** 			called here even though the disinherit function does not check if
 966:../FreeRTOS/Source/queue.c **** 			the scheduler is suspended before accessing the ready lists. */
 967:../FreeRTOS/Source/queue.c **** 			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 968:../FreeRTOS/Source/queue.c **** 
 969:../FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
 970:../FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
 971:../FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
 972:../FreeRTOS/Source/queue.c **** 			{
 973:../FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
 974:../FreeRTOS/Source/queue.c **** 				{
 975:../FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
 976:../FreeRTOS/Source/queue.c **** 					{
 977:../FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) != pdFALSE )
 978:../FreeRTOS/Source/queue.c **** 						{
 979:../FreeRTOS/Source/queue.c **** 							/* The queue is a member of a queue set, and posting
 980:../FreeRTOS/Source/queue.c **** 							to the queue set caused a higher priority task to
 981:../FreeRTOS/Source/queue.c **** 							unblock.  A context switch is required. */
 982:../FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
 983:../FreeRTOS/Source/queue.c **** 							{
 984:../FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
 985:../FreeRTOS/Source/queue.c **** 							}
 986:../FreeRTOS/Source/queue.c **** 							else
 987:../FreeRTOS/Source/queue.c **** 							{
 988:../FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
 989:../FreeRTOS/Source/queue.c **** 							}
 990:../FreeRTOS/Source/queue.c **** 						}
 991:../FreeRTOS/Source/queue.c **** 						else
 992:../FreeRTOS/Source/queue.c **** 						{
 993:../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
 994:../FreeRTOS/Source/queue.c **** 						}
 995:../FreeRTOS/Source/queue.c **** 					}
 996:../FreeRTOS/Source/queue.c **** 					else
 997:../FreeRTOS/Source/queue.c **** 					{
 998:../FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 999:../FreeRTOS/Source/queue.c **** 						{
1000:../FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1001:../FreeRTOS/Source/queue.c **** 							{
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 19


1002:../FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1003:../FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1004:../FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1005:../FreeRTOS/Source/queue.c **** 								{
1006:../FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1007:../FreeRTOS/Source/queue.c **** 								}
1008:../FreeRTOS/Source/queue.c **** 								else
1009:../FreeRTOS/Source/queue.c **** 								{
1010:../FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1011:../FreeRTOS/Source/queue.c **** 								}
1012:../FreeRTOS/Source/queue.c **** 							}
1013:../FreeRTOS/Source/queue.c **** 							else
1014:../FreeRTOS/Source/queue.c **** 							{
1015:../FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1016:../FreeRTOS/Source/queue.c **** 							}
1017:../FreeRTOS/Source/queue.c **** 						}
1018:../FreeRTOS/Source/queue.c **** 						else
1019:../FreeRTOS/Source/queue.c **** 						{
1020:../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1021:../FreeRTOS/Source/queue.c **** 						}
1022:../FreeRTOS/Source/queue.c **** 					}
1023:../FreeRTOS/Source/queue.c **** 				}
1024:../FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1025:../FreeRTOS/Source/queue.c **** 				{
1026:../FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1027:../FreeRTOS/Source/queue.c **** 					{
1028:../FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1029:../FreeRTOS/Source/queue.c **** 						{
1030:../FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1031:../FreeRTOS/Source/queue.c **** 							context	switch is required. */
1032:../FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1033:../FreeRTOS/Source/queue.c **** 							{
1034:../FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1035:../FreeRTOS/Source/queue.c **** 							}
1036:../FreeRTOS/Source/queue.c **** 							else
1037:../FreeRTOS/Source/queue.c **** 							{
1038:../FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1039:../FreeRTOS/Source/queue.c **** 							}
1040:../FreeRTOS/Source/queue.c **** 						}
1041:../FreeRTOS/Source/queue.c **** 						else
1042:../FreeRTOS/Source/queue.c **** 						{
1043:../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1044:../FreeRTOS/Source/queue.c **** 						}
1045:../FreeRTOS/Source/queue.c **** 					}
1046:../FreeRTOS/Source/queue.c **** 					else
1047:../FreeRTOS/Source/queue.c **** 					{
1048:../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1049:../FreeRTOS/Source/queue.c **** 					}
1050:../FreeRTOS/Source/queue.c **** 				}
1051:../FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1052:../FreeRTOS/Source/queue.c **** 			}
1053:../FreeRTOS/Source/queue.c **** 			else
1054:../FreeRTOS/Source/queue.c **** 			{
1055:../FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1056:../FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1057:../FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1058:../FreeRTOS/Source/queue.c **** 			}
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 20


1059:../FreeRTOS/Source/queue.c **** 
1060:../FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1061:../FreeRTOS/Source/queue.c **** 		}
1062:../FreeRTOS/Source/queue.c **** 		else
1063:../FreeRTOS/Source/queue.c **** 		{
1064:../FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
1065:../FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1066:../FreeRTOS/Source/queue.c **** 		}
1067:../FreeRTOS/Source/queue.c **** 	}
1068:../FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1069:../FreeRTOS/Source/queue.c **** 
1070:../FreeRTOS/Source/queue.c **** 	return xReturn;
1071:../FreeRTOS/Source/queue.c **** }
1072:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1073:../FreeRTOS/Source/queue.c **** 
1074:../FreeRTOS/Source/queue.c **** BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
1075:../FreeRTOS/Source/queue.c **** {
1076:../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1077:../FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1078:../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1079:../FreeRTOS/Source/queue.c **** 
1080:../FreeRTOS/Source/queue.c **** 	/* Similar to xQueueGenericSendFromISR() but used with semaphores where the
1081:../FreeRTOS/Source/queue.c **** 	item size is 0.  Don't directly wake a task that was blocked on a queue
1082:../FreeRTOS/Source/queue.c **** 	read, instead return a flag to say whether a context switch is required or
1083:../FreeRTOS/Source/queue.c **** 	not (i.e. has a task with a higher priority than us been woken by this
1084:../FreeRTOS/Source/queue.c **** 	post). */
1085:../FreeRTOS/Source/queue.c **** 
1086:../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1087:../FreeRTOS/Source/queue.c **** 
1088:../FreeRTOS/Source/queue.c **** 	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
1089:../FreeRTOS/Source/queue.c **** 	if the item size is not 0. */
1090:../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1091:../FreeRTOS/Source/queue.c **** 
1092:../FreeRTOS/Source/queue.c **** 	/* Normally a mutex would not be given from an interrupt, especially if
1093:../FreeRTOS/Source/queue.c **** 	there is a mutex holder, as priority inheritance makes no sense for an
1094:../FreeRTOS/Source/queue.c **** 	interrupts, only tasks. */
1095:../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NU
1096:../FreeRTOS/Source/queue.c **** 
1097:../FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1098:../FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1099:../FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1100:../FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1101:../FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1102:../FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1103:../FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1104:../FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1105:../FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1106:../FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1107:../FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1108:../FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1109:../FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1110:../FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1111:../FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1112:../FreeRTOS/Source/queue.c **** 
1113:../FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1114:../FreeRTOS/Source/queue.c **** 	{
1115:../FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 21


1116:../FreeRTOS/Source/queue.c **** 
1117:../FreeRTOS/Source/queue.c **** 		/* When the queue is used to implement a semaphore no data is ever
1118:../FreeRTOS/Source/queue.c **** 		moved through the queue but it is still valid to see if the queue 'has
1119:../FreeRTOS/Source/queue.c **** 		space'. */
1120:../FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting < pxQueue->uxLength )
1121:../FreeRTOS/Source/queue.c **** 		{
1122:../FreeRTOS/Source/queue.c **** 			const int8_t cTxLock = pxQueue->cTxLock;
1123:../FreeRTOS/Source/queue.c **** 
1124:../FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR( pxQueue );
1125:../FreeRTOS/Source/queue.c **** 
1126:../FreeRTOS/Source/queue.c **** 			/* A task can only have an inherited priority if it is a mutex
1127:../FreeRTOS/Source/queue.c **** 			holder - and if there is a mutex holder then the mutex cannot be
1128:../FreeRTOS/Source/queue.c **** 			given from an ISR.  As this is the ISR version of the function it
1129:../FreeRTOS/Source/queue.c **** 			can be assumed there is no mutex holder and no need to determine if
1130:../FreeRTOS/Source/queue.c **** 			priority disinheritance is needed.  Simply increase the count of
1131:../FreeRTOS/Source/queue.c **** 			messages (semaphores) available. */
1132:../FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1133:../FreeRTOS/Source/queue.c **** 
1134:../FreeRTOS/Source/queue.c **** 			/* The event list is not altered if the queue is locked.  This will
1135:../FreeRTOS/Source/queue.c **** 			be done when the queue is unlocked later. */
1136:../FreeRTOS/Source/queue.c **** 			if( cTxLock == queueUNLOCKED )
1137:../FreeRTOS/Source/queue.c **** 			{
1138:../FreeRTOS/Source/queue.c **** 				#if ( configUSE_QUEUE_SETS == 1 )
1139:../FreeRTOS/Source/queue.c **** 				{
1140:../FreeRTOS/Source/queue.c **** 					if( pxQueue->pxQueueSetContainer != NULL )
1141:../FreeRTOS/Source/queue.c **** 					{
1142:../FreeRTOS/Source/queue.c **** 						if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
1143:../FreeRTOS/Source/queue.c **** 						{
1144:../FreeRTOS/Source/queue.c **** 							/* The semaphore is a member of a queue set, and
1145:../FreeRTOS/Source/queue.c **** 							posting	to the queue set caused a higher priority
1146:../FreeRTOS/Source/queue.c **** 							task to	unblock.  A context switch is required. */
1147:../FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1148:../FreeRTOS/Source/queue.c **** 							{
1149:../FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1150:../FreeRTOS/Source/queue.c **** 							}
1151:../FreeRTOS/Source/queue.c **** 							else
1152:../FreeRTOS/Source/queue.c **** 							{
1153:../FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1154:../FreeRTOS/Source/queue.c **** 							}
1155:../FreeRTOS/Source/queue.c **** 						}
1156:../FreeRTOS/Source/queue.c **** 						else
1157:../FreeRTOS/Source/queue.c **** 						{
1158:../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1159:../FreeRTOS/Source/queue.c **** 						}
1160:../FreeRTOS/Source/queue.c **** 					}
1161:../FreeRTOS/Source/queue.c **** 					else
1162:../FreeRTOS/Source/queue.c **** 					{
1163:../FreeRTOS/Source/queue.c **** 						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1164:../FreeRTOS/Source/queue.c **** 						{
1165:../FreeRTOS/Source/queue.c **** 							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1166:../FreeRTOS/Source/queue.c **** 							{
1167:../FreeRTOS/Source/queue.c **** 								/* The task waiting has a higher priority so
1168:../FreeRTOS/Source/queue.c **** 								record that a context switch is required. */
1169:../FreeRTOS/Source/queue.c **** 								if( pxHigherPriorityTaskWoken != NULL )
1170:../FreeRTOS/Source/queue.c **** 								{
1171:../FreeRTOS/Source/queue.c **** 									*pxHigherPriorityTaskWoken = pdTRUE;
1172:../FreeRTOS/Source/queue.c **** 								}
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 22


1173:../FreeRTOS/Source/queue.c **** 								else
1174:../FreeRTOS/Source/queue.c **** 								{
1175:../FreeRTOS/Source/queue.c **** 									mtCOVERAGE_TEST_MARKER();
1176:../FreeRTOS/Source/queue.c **** 								}
1177:../FreeRTOS/Source/queue.c **** 							}
1178:../FreeRTOS/Source/queue.c **** 							else
1179:../FreeRTOS/Source/queue.c **** 							{
1180:../FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1181:../FreeRTOS/Source/queue.c **** 							}
1182:../FreeRTOS/Source/queue.c **** 						}
1183:../FreeRTOS/Source/queue.c **** 						else
1184:../FreeRTOS/Source/queue.c **** 						{
1185:../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1186:../FreeRTOS/Source/queue.c **** 						}
1187:../FreeRTOS/Source/queue.c **** 					}
1188:../FreeRTOS/Source/queue.c **** 				}
1189:../FreeRTOS/Source/queue.c **** 				#else /* configUSE_QUEUE_SETS */
1190:../FreeRTOS/Source/queue.c **** 				{
1191:../FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1192:../FreeRTOS/Source/queue.c **** 					{
1193:../FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1194:../FreeRTOS/Source/queue.c **** 						{
1195:../FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
1196:../FreeRTOS/Source/queue.c **** 							context	switch is required. */
1197:../FreeRTOS/Source/queue.c **** 							if( pxHigherPriorityTaskWoken != NULL )
1198:../FreeRTOS/Source/queue.c **** 							{
1199:../FreeRTOS/Source/queue.c **** 								*pxHigherPriorityTaskWoken = pdTRUE;
1200:../FreeRTOS/Source/queue.c **** 							}
1201:../FreeRTOS/Source/queue.c **** 							else
1202:../FreeRTOS/Source/queue.c **** 							{
1203:../FreeRTOS/Source/queue.c **** 								mtCOVERAGE_TEST_MARKER();
1204:../FreeRTOS/Source/queue.c **** 							}
1205:../FreeRTOS/Source/queue.c **** 						}
1206:../FreeRTOS/Source/queue.c **** 						else
1207:../FreeRTOS/Source/queue.c **** 						{
1208:../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1209:../FreeRTOS/Source/queue.c **** 						}
1210:../FreeRTOS/Source/queue.c **** 					}
1211:../FreeRTOS/Source/queue.c **** 					else
1212:../FreeRTOS/Source/queue.c **** 					{
1213:../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1214:../FreeRTOS/Source/queue.c **** 					}
1215:../FreeRTOS/Source/queue.c **** 				}
1216:../FreeRTOS/Source/queue.c **** 				#endif /* configUSE_QUEUE_SETS */
1217:../FreeRTOS/Source/queue.c **** 			}
1218:../FreeRTOS/Source/queue.c **** 			else
1219:../FreeRTOS/Source/queue.c **** 			{
1220:../FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1221:../FreeRTOS/Source/queue.c **** 				knows that data was posted while it was locked. */
1222:../FreeRTOS/Source/queue.c **** 				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1223:../FreeRTOS/Source/queue.c **** 			}
1224:../FreeRTOS/Source/queue.c **** 
1225:../FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1226:../FreeRTOS/Source/queue.c **** 		}
1227:../FreeRTOS/Source/queue.c **** 		else
1228:../FreeRTOS/Source/queue.c **** 		{
1229:../FreeRTOS/Source/queue.c **** 			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 23


1230:../FreeRTOS/Source/queue.c **** 			xReturn = errQUEUE_FULL;
1231:../FreeRTOS/Source/queue.c **** 		}
1232:../FreeRTOS/Source/queue.c **** 	}
1233:../FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1234:../FreeRTOS/Source/queue.c **** 
1235:../FreeRTOS/Source/queue.c **** 	return xReturn;
1236:../FreeRTOS/Source/queue.c **** }
1237:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1238:../FreeRTOS/Source/queue.c **** 
1239:../FreeRTOS/Source/queue.c **** BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1240:../FreeRTOS/Source/queue.c **** {
1241:../FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1242:../FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1243:../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1244:../FreeRTOS/Source/queue.c **** 
1245:../FreeRTOS/Source/queue.c **** 	/* Check the pointer is not NULL. */
1246:../FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
1247:../FreeRTOS/Source/queue.c **** 
1248:../FreeRTOS/Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1249:../FreeRTOS/Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1250:../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1251:../FreeRTOS/Source/queue.c **** 
1252:../FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1253:../FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1254:../FreeRTOS/Source/queue.c **** 	{
1255:../FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1256:../FreeRTOS/Source/queue.c **** 	}
1257:../FreeRTOS/Source/queue.c **** 	#endif
1258:../FreeRTOS/Source/queue.c **** 
1259:../FreeRTOS/Source/queue.c **** 
1260:../FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1261:../FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1262:../FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1263:../FreeRTOS/Source/queue.c **** 
1264:../FreeRTOS/Source/queue.c **** 	for( ;; )
1265:../FreeRTOS/Source/queue.c **** 	{
1266:../FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1267:../FreeRTOS/Source/queue.c **** 		{
1268:../FreeRTOS/Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1269:../FreeRTOS/Source/queue.c **** 
1270:../FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1271:../FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1272:../FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1273:../FreeRTOS/Source/queue.c **** 			{
1274:../FreeRTOS/Source/queue.c **** 				/* Data available, remove one item. */
1275:../FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1276:../FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1277:../FreeRTOS/Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1278:../FreeRTOS/Source/queue.c **** 
1279:../FreeRTOS/Source/queue.c **** 				/* There is now space in the queue, were any tasks waiting to
1280:../FreeRTOS/Source/queue.c **** 				post to the queue?  If so, unblock the highest priority waiting
1281:../FreeRTOS/Source/queue.c **** 				task. */
1282:../FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1283:../FreeRTOS/Source/queue.c **** 				{
1284:../FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1285:../FreeRTOS/Source/queue.c **** 					{
1286:../FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 24


1287:../FreeRTOS/Source/queue.c **** 					}
1288:../FreeRTOS/Source/queue.c **** 					else
1289:../FreeRTOS/Source/queue.c **** 					{
1290:../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1291:../FreeRTOS/Source/queue.c **** 					}
1292:../FreeRTOS/Source/queue.c **** 				}
1293:../FreeRTOS/Source/queue.c **** 				else
1294:../FreeRTOS/Source/queue.c **** 				{
1295:../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1296:../FreeRTOS/Source/queue.c **** 				}
1297:../FreeRTOS/Source/queue.c **** 
1298:../FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1299:../FreeRTOS/Source/queue.c **** 				return pdPASS;
1300:../FreeRTOS/Source/queue.c **** 			}
1301:../FreeRTOS/Source/queue.c **** 			else
1302:../FreeRTOS/Source/queue.c **** 			{
1303:../FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1304:../FreeRTOS/Source/queue.c **** 				{
1305:../FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1306:../FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1307:../FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1308:../FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1309:../FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1310:../FreeRTOS/Source/queue.c **** 				}
1311:../FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1312:../FreeRTOS/Source/queue.c **** 				{
1313:../FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1314:../FreeRTOS/Source/queue.c **** 					configure the timeout structure. */
1315:../FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1316:../FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1317:../FreeRTOS/Source/queue.c **** 				}
1318:../FreeRTOS/Source/queue.c **** 				else
1319:../FreeRTOS/Source/queue.c **** 				{
1320:../FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1321:../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1322:../FreeRTOS/Source/queue.c **** 				}
1323:../FreeRTOS/Source/queue.c **** 			}
1324:../FreeRTOS/Source/queue.c **** 		}
1325:../FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1326:../FreeRTOS/Source/queue.c **** 
1327:../FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1328:../FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1329:../FreeRTOS/Source/queue.c **** 
1330:../FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1331:../FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1332:../FreeRTOS/Source/queue.c **** 
1333:../FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1334:../FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1335:../FreeRTOS/Source/queue.c **** 		{
1336:../FreeRTOS/Source/queue.c **** 			/* The timeout has not expired.  If the queue is still empty place
1337:../FreeRTOS/Source/queue.c **** 			the task on the list of tasks waiting to receive from the queue. */
1338:../FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1339:../FreeRTOS/Source/queue.c **** 			{
1340:../FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
1341:../FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1342:../FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1343:../FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 25


1344:../FreeRTOS/Source/queue.c **** 				{
1345:../FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1346:../FreeRTOS/Source/queue.c **** 				}
1347:../FreeRTOS/Source/queue.c **** 				else
1348:../FreeRTOS/Source/queue.c **** 				{
1349:../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1350:../FreeRTOS/Source/queue.c **** 				}
1351:../FreeRTOS/Source/queue.c **** 			}
1352:../FreeRTOS/Source/queue.c **** 			else
1353:../FreeRTOS/Source/queue.c **** 			{
1354:../FreeRTOS/Source/queue.c **** 				/* The queue contains data again.  Loop back to try and read the
1355:../FreeRTOS/Source/queue.c **** 				data. */
1356:../FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1357:../FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1358:../FreeRTOS/Source/queue.c **** 			}
1359:../FreeRTOS/Source/queue.c **** 		}
1360:../FreeRTOS/Source/queue.c **** 		else
1361:../FreeRTOS/Source/queue.c **** 		{
1362:../FreeRTOS/Source/queue.c **** 			/* Timed out.  If there is no data in the queue exit, otherwise loop
1363:../FreeRTOS/Source/queue.c **** 			back and attempt to read the data. */
1364:../FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1365:../FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1366:../FreeRTOS/Source/queue.c **** 
1367:../FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1368:../FreeRTOS/Source/queue.c **** 			{
1369:../FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1370:../FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1371:../FreeRTOS/Source/queue.c **** 			}
1372:../FreeRTOS/Source/queue.c **** 			else
1373:../FreeRTOS/Source/queue.c **** 			{
1374:../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1375:../FreeRTOS/Source/queue.c **** 			}
1376:../FreeRTOS/Source/queue.c **** 		}
1377:../FreeRTOS/Source/queue.c **** 	}
1378:../FreeRTOS/Source/queue.c **** }
1379:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1380:../FreeRTOS/Source/queue.c **** 
1381:../FreeRTOS/Source/queue.c **** BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
1382:../FreeRTOS/Source/queue.c **** {
1383:../FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1384:../FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1385:../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1386:../FreeRTOS/Source/queue.c **** 
1387:../FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
1388:../FreeRTOS/Source/queue.c **** 	BaseType_t xInheritanceOccurred = pdFALSE;
1389:../FreeRTOS/Source/queue.c **** #endif
1390:../FreeRTOS/Source/queue.c **** 
1391:../FreeRTOS/Source/queue.c **** 	/* Check the queue pointer is not NULL. */
1392:../FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
1393:../FreeRTOS/Source/queue.c **** 
1394:../FreeRTOS/Source/queue.c **** 	/* Check this really is a semaphore, in which case the item size will be
1395:../FreeRTOS/Source/queue.c **** 	0. */
1396:../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize == 0 );
1397:../FreeRTOS/Source/queue.c **** 
1398:../FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1399:../FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1400:../FreeRTOS/Source/queue.c **** 	{
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 26


1401:../FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1402:../FreeRTOS/Source/queue.c **** 	}
1403:../FreeRTOS/Source/queue.c **** 	#endif
1404:../FreeRTOS/Source/queue.c **** 
1405:../FreeRTOS/Source/queue.c **** 
1406:../FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1407:../FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1408:../FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1409:../FreeRTOS/Source/queue.c **** 
1410:../FreeRTOS/Source/queue.c **** 	for( ;; )
1411:../FreeRTOS/Source/queue.c **** 	{
1412:../FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
1413:../FreeRTOS/Source/queue.c **** 		{
1414:../FreeRTOS/Source/queue.c **** 			/* Semaphores are queues with an item size of 0, and where the
1415:../FreeRTOS/Source/queue.c **** 			number of messages in the queue is the semaphore's count value. */
1416:../FreeRTOS/Source/queue.c **** 			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
1417:../FreeRTOS/Source/queue.c **** 
1418:../FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1419:../FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1420:../FreeRTOS/Source/queue.c **** 			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
1421:../FreeRTOS/Source/queue.c **** 			{
1422:../FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
1423:../FreeRTOS/Source/queue.c **** 
1424:../FreeRTOS/Source/queue.c **** 				/* Semaphores are queues with a data size of zero and where the
1425:../FreeRTOS/Source/queue.c **** 				messages waiting is the semaphore's count.  Reduce the count. */
1426:../FreeRTOS/Source/queue.c **** 				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
1427:../FreeRTOS/Source/queue.c **** 
1428:../FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1429:../FreeRTOS/Source/queue.c **** 				{
1430:../FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1431:../FreeRTOS/Source/queue.c **** 					{
1432:../FreeRTOS/Source/queue.c **** 						/* Record the information required to implement
1433:../FreeRTOS/Source/queue.c **** 						priority inheritance should it become necessary. */
1434:../FreeRTOS/Source/queue.c **** 						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is n
1435:../FreeRTOS/Source/queue.c **** 					}
1436:../FreeRTOS/Source/queue.c **** 					else
1437:../FreeRTOS/Source/queue.c **** 					{
1438:../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1439:../FreeRTOS/Source/queue.c **** 					}
1440:../FreeRTOS/Source/queue.c **** 				}
1441:../FreeRTOS/Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1442:../FreeRTOS/Source/queue.c **** 
1443:../FreeRTOS/Source/queue.c **** 				/* Check to see if other tasks are blocked waiting to give the
1444:../FreeRTOS/Source/queue.c **** 				semaphore, and if so, unblock the highest priority such task. */
1445:../FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1446:../FreeRTOS/Source/queue.c **** 				{
1447:../FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1448:../FreeRTOS/Source/queue.c **** 					{
1449:../FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1450:../FreeRTOS/Source/queue.c **** 					}
1451:../FreeRTOS/Source/queue.c **** 					else
1452:../FreeRTOS/Source/queue.c **** 					{
1453:../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1454:../FreeRTOS/Source/queue.c **** 					}
1455:../FreeRTOS/Source/queue.c **** 				}
1456:../FreeRTOS/Source/queue.c **** 				else
1457:../FreeRTOS/Source/queue.c **** 				{
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 27


1458:../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1459:../FreeRTOS/Source/queue.c **** 				}
1460:../FreeRTOS/Source/queue.c **** 
1461:../FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1462:../FreeRTOS/Source/queue.c **** 				return pdPASS;
1463:../FreeRTOS/Source/queue.c **** 			}
1464:../FreeRTOS/Source/queue.c **** 			else
1465:../FreeRTOS/Source/queue.c **** 			{
1466:../FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1467:../FreeRTOS/Source/queue.c **** 				{
1468:../FreeRTOS/Source/queue.c **** 					/* For inheritance to have occurred there must have been an
1469:../FreeRTOS/Source/queue.c **** 					initial timeout, and an adjusted timeout cannot become 0, as
1470:../FreeRTOS/Source/queue.c **** 					if it were 0 the function would have exited. */
1471:../FreeRTOS/Source/queue.c **** 					#if( configUSE_MUTEXES == 1 )
1472:../FreeRTOS/Source/queue.c **** 					{
1473:../FreeRTOS/Source/queue.c **** 						configASSERT( xInheritanceOccurred == pdFALSE );
1474:../FreeRTOS/Source/queue.c **** 					}
1475:../FreeRTOS/Source/queue.c **** 					#endif /* configUSE_MUTEXES */
1476:../FreeRTOS/Source/queue.c **** 
1477:../FreeRTOS/Source/queue.c **** 					/* The semaphore count was 0 and no block time is specified
1478:../FreeRTOS/Source/queue.c **** 					(or the block time has expired) so exit now. */
1479:../FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1480:../FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
1481:../FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1482:../FreeRTOS/Source/queue.c **** 				}
1483:../FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1484:../FreeRTOS/Source/queue.c **** 				{
1485:../FreeRTOS/Source/queue.c **** 					/* The semaphore count was 0 and a block time was specified
1486:../FreeRTOS/Source/queue.c **** 					so configure the timeout structure ready to block. */
1487:../FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1488:../FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
1489:../FreeRTOS/Source/queue.c **** 				}
1490:../FreeRTOS/Source/queue.c **** 				else
1491:../FreeRTOS/Source/queue.c **** 				{
1492:../FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1493:../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1494:../FreeRTOS/Source/queue.c **** 				}
1495:../FreeRTOS/Source/queue.c **** 			}
1496:../FreeRTOS/Source/queue.c **** 		}
1497:../FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1498:../FreeRTOS/Source/queue.c **** 
1499:../FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can give to and take from the semaphore
1500:../FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1501:../FreeRTOS/Source/queue.c **** 
1502:../FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1503:../FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1504:../FreeRTOS/Source/queue.c **** 
1505:../FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1506:../FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1507:../FreeRTOS/Source/queue.c **** 		{
1508:../FreeRTOS/Source/queue.c **** 			/* A block time is specified and not expired.  If the semaphore
1509:../FreeRTOS/Source/queue.c **** 			count is 0 then enter the Blocked state to wait for a semaphore to
1510:../FreeRTOS/Source/queue.c **** 			become available.  As semaphores are implemented with queues the
1511:../FreeRTOS/Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1512:../FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1513:../FreeRTOS/Source/queue.c **** 			{
1514:../FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 28


1515:../FreeRTOS/Source/queue.c **** 
1516:../FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1517:../FreeRTOS/Source/queue.c **** 				{
1518:../FreeRTOS/Source/queue.c **** 					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1519:../FreeRTOS/Source/queue.c **** 					{
1520:../FreeRTOS/Source/queue.c **** 						taskENTER_CRITICAL();
1521:../FreeRTOS/Source/queue.c **** 						{
1522:../FreeRTOS/Source/queue.c **** 							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
1523:../FreeRTOS/Source/queue.c **** 						}
1524:../FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
1525:../FreeRTOS/Source/queue.c **** 					}
1526:../FreeRTOS/Source/queue.c **** 					else
1527:../FreeRTOS/Source/queue.c **** 					{
1528:../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1529:../FreeRTOS/Source/queue.c **** 					}
1530:../FreeRTOS/Source/queue.c **** 				}
1531:../FreeRTOS/Source/queue.c **** 				#endif
1532:../FreeRTOS/Source/queue.c **** 
1533:../FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1534:../FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1535:../FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1536:../FreeRTOS/Source/queue.c **** 				{
1537:../FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1538:../FreeRTOS/Source/queue.c **** 				}
1539:../FreeRTOS/Source/queue.c **** 				else
1540:../FreeRTOS/Source/queue.c **** 				{
1541:../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1542:../FreeRTOS/Source/queue.c **** 				}
1543:../FreeRTOS/Source/queue.c **** 			}
1544:../FreeRTOS/Source/queue.c **** 			else
1545:../FreeRTOS/Source/queue.c **** 			{
1546:../FreeRTOS/Source/queue.c **** 				/* There was no timeout and the semaphore count was not 0, so
1547:../FreeRTOS/Source/queue.c **** 				attempt to take the semaphore again. */
1548:../FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1549:../FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1550:../FreeRTOS/Source/queue.c **** 			}
1551:../FreeRTOS/Source/queue.c **** 		}
1552:../FreeRTOS/Source/queue.c **** 		else
1553:../FreeRTOS/Source/queue.c **** 		{
1554:../FreeRTOS/Source/queue.c **** 			/* Timed out. */
1555:../FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1556:../FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1557:../FreeRTOS/Source/queue.c **** 
1558:../FreeRTOS/Source/queue.c **** 			/* If the semaphore count is 0 exit now as the timeout has
1559:../FreeRTOS/Source/queue.c **** 			expired.  Otherwise return to attempt to take the semaphore that is
1560:../FreeRTOS/Source/queue.c **** 			known to be available.  As semaphores are implemented by queues the
1561:../FreeRTOS/Source/queue.c **** 			queue being empty is equivalent to the semaphore count being 0. */
1562:../FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1563:../FreeRTOS/Source/queue.c **** 			{
1564:../FreeRTOS/Source/queue.c **** 				#if ( configUSE_MUTEXES == 1 )
1565:../FreeRTOS/Source/queue.c **** 				{
1566:../FreeRTOS/Source/queue.c **** 					/* xInheritanceOccurred could only have be set if
1567:../FreeRTOS/Source/queue.c **** 					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
1568:../FreeRTOS/Source/queue.c **** 					test the mutex type again to check it is actually a mutex. */
1569:../FreeRTOS/Source/queue.c **** 					if( xInheritanceOccurred != pdFALSE )
1570:../FreeRTOS/Source/queue.c **** 					{
1571:../FreeRTOS/Source/queue.c **** 						taskENTER_CRITICAL();
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 29


1572:../FreeRTOS/Source/queue.c **** 						{
1573:../FreeRTOS/Source/queue.c **** 							UBaseType_t uxHighestWaitingPriority;
1574:../FreeRTOS/Source/queue.c **** 
1575:../FreeRTOS/Source/queue.c **** 							/* This task blocking on the mutex caused another
1576:../FreeRTOS/Source/queue.c **** 							task to inherit this task's priority.  Now this task
1577:../FreeRTOS/Source/queue.c **** 							has timed out the priority should be disinherited
1578:../FreeRTOS/Source/queue.c **** 							again, but only as low as the next highest priority
1579:../FreeRTOS/Source/queue.c **** 							task that is waiting for the same mutex. */
1580:../FreeRTOS/Source/queue.c **** 							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
1581:../FreeRTOS/Source/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPrio
1582:../FreeRTOS/Source/queue.c **** 						}
1583:../FreeRTOS/Source/queue.c **** 						taskEXIT_CRITICAL();
1584:../FreeRTOS/Source/queue.c **** 					}
1585:../FreeRTOS/Source/queue.c **** 				}
1586:../FreeRTOS/Source/queue.c **** 				#endif /* configUSE_MUTEXES */
1587:../FreeRTOS/Source/queue.c **** 
1588:../FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE_FAILED( pxQueue );
1589:../FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1590:../FreeRTOS/Source/queue.c **** 			}
1591:../FreeRTOS/Source/queue.c **** 			else
1592:../FreeRTOS/Source/queue.c **** 			{
1593:../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1594:../FreeRTOS/Source/queue.c **** 			}
1595:../FreeRTOS/Source/queue.c **** 		}
1596:../FreeRTOS/Source/queue.c **** 	}
1597:../FreeRTOS/Source/queue.c **** }
1598:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1599:../FreeRTOS/Source/queue.c **** 
1600:../FreeRTOS/Source/queue.c **** BaseType_t xQueuePeek( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
1601:../FreeRTOS/Source/queue.c **** {
1602:../FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
1603:../FreeRTOS/Source/queue.c **** TimeOut_t xTimeOut;
1604:../FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1605:../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1606:../FreeRTOS/Source/queue.c **** 
1607:../FreeRTOS/Source/queue.c **** 	/* Check the pointer is not NULL. */
1608:../FreeRTOS/Source/queue.c **** 	configASSERT( ( pxQueue ) );
1609:../FreeRTOS/Source/queue.c **** 
1610:../FreeRTOS/Source/queue.c **** 	/* The buffer into which data is received can only be NULL if the data size
1611:../FreeRTOS/Source/queue.c **** 	is zero (so no data is copied into the buffer. */
1612:../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) )
1613:../FreeRTOS/Source/queue.c **** 
1614:../FreeRTOS/Source/queue.c **** 	/* Cannot block if the scheduler is suspended. */
1615:../FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
1616:../FreeRTOS/Source/queue.c **** 	{
1617:../FreeRTOS/Source/queue.c **** 		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 )
1618:../FreeRTOS/Source/queue.c **** 	}
1619:../FreeRTOS/Source/queue.c **** 	#endif
1620:../FreeRTOS/Source/queue.c **** 
1621:../FreeRTOS/Source/queue.c **** 
1622:../FreeRTOS/Source/queue.c **** 	/* This function relaxes the coding standard somewhat to allow return
1623:../FreeRTOS/Source/queue.c **** 	statements within the function itself.  This is done in the interest
1624:../FreeRTOS/Source/queue.c **** 	of execution time efficiency. */
1625:../FreeRTOS/Source/queue.c **** 
1626:../FreeRTOS/Source/queue.c **** 	for( ;; )
1627:../FreeRTOS/Source/queue.c **** 	{
1628:../FreeRTOS/Source/queue.c **** 		taskENTER_CRITICAL();
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 30


1629:../FreeRTOS/Source/queue.c **** 		{
1630:../FreeRTOS/Source/queue.c **** 			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1631:../FreeRTOS/Source/queue.c **** 
1632:../FreeRTOS/Source/queue.c **** 			/* Is there data in the queue now?  To be running the calling task
1633:../FreeRTOS/Source/queue.c **** 			must be the highest priority task wanting to access the queue. */
1634:../FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1635:../FreeRTOS/Source/queue.c **** 			{
1636:../FreeRTOS/Source/queue.c **** 				/* Remember the read position so it can be reset after the data
1637:../FreeRTOS/Source/queue.c **** 				is read from the queue as this function is only peeking the
1638:../FreeRTOS/Source/queue.c **** 				data, not removing it. */
1639:../FreeRTOS/Source/queue.c **** 				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1640:../FreeRTOS/Source/queue.c **** 
1641:../FreeRTOS/Source/queue.c **** 				prvCopyDataFromQueue( pxQueue, pvBuffer );
1642:../FreeRTOS/Source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
1643:../FreeRTOS/Source/queue.c **** 
1644:../FreeRTOS/Source/queue.c **** 				/* The data is not being removed, so reset the read pointer. */
1645:../FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1646:../FreeRTOS/Source/queue.c **** 
1647:../FreeRTOS/Source/queue.c **** 				/* The data is being left in the queue, so see if there are
1648:../FreeRTOS/Source/queue.c **** 				any other tasks waiting for the data. */
1649:../FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1650:../FreeRTOS/Source/queue.c **** 				{
1651:../FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1652:../FreeRTOS/Source/queue.c **** 					{
1653:../FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than this task. */
1654:../FreeRTOS/Source/queue.c **** 						queueYIELD_IF_USING_PREEMPTION();
1655:../FreeRTOS/Source/queue.c **** 					}
1656:../FreeRTOS/Source/queue.c **** 					else
1657:../FreeRTOS/Source/queue.c **** 					{
1658:../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1659:../FreeRTOS/Source/queue.c **** 					}
1660:../FreeRTOS/Source/queue.c **** 				}
1661:../FreeRTOS/Source/queue.c **** 				else
1662:../FreeRTOS/Source/queue.c **** 				{
1663:../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1664:../FreeRTOS/Source/queue.c **** 				}
1665:../FreeRTOS/Source/queue.c **** 
1666:../FreeRTOS/Source/queue.c **** 				taskEXIT_CRITICAL();
1667:../FreeRTOS/Source/queue.c **** 				return pdPASS;
1668:../FreeRTOS/Source/queue.c **** 			}
1669:../FreeRTOS/Source/queue.c **** 			else
1670:../FreeRTOS/Source/queue.c **** 			{
1671:../FreeRTOS/Source/queue.c **** 				if( xTicksToWait == ( TickType_t ) 0 )
1672:../FreeRTOS/Source/queue.c **** 				{
1673:../FreeRTOS/Source/queue.c **** 					/* The queue was empty and no block time is specified (or
1674:../FreeRTOS/Source/queue.c **** 					the block time has expired) so leave now. */
1675:../FreeRTOS/Source/queue.c **** 					taskEXIT_CRITICAL();
1676:../FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
1677:../FreeRTOS/Source/queue.c **** 					return errQUEUE_EMPTY;
1678:../FreeRTOS/Source/queue.c **** 				}
1679:../FreeRTOS/Source/queue.c **** 				else if( xEntryTimeSet == pdFALSE )
1680:../FreeRTOS/Source/queue.c **** 				{
1681:../FreeRTOS/Source/queue.c **** 					/* The queue was empty and a block time was specified so
1682:../FreeRTOS/Source/queue.c **** 					configure the timeout structure ready to enter the blocked
1683:../FreeRTOS/Source/queue.c **** 					state. */
1684:../FreeRTOS/Source/queue.c **** 					vTaskInternalSetTimeOutState( &xTimeOut );
1685:../FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 31


1686:../FreeRTOS/Source/queue.c **** 				}
1687:../FreeRTOS/Source/queue.c **** 				else
1688:../FreeRTOS/Source/queue.c **** 				{
1689:../FreeRTOS/Source/queue.c **** 					/* Entry time was already set. */
1690:../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1691:../FreeRTOS/Source/queue.c **** 				}
1692:../FreeRTOS/Source/queue.c **** 			}
1693:../FreeRTOS/Source/queue.c **** 		}
1694:../FreeRTOS/Source/queue.c **** 		taskEXIT_CRITICAL();
1695:../FreeRTOS/Source/queue.c **** 
1696:../FreeRTOS/Source/queue.c **** 		/* Interrupts and other tasks can send to and receive from the queue
1697:../FreeRTOS/Source/queue.c **** 		now the critical section has been exited. */
1698:../FreeRTOS/Source/queue.c **** 
1699:../FreeRTOS/Source/queue.c **** 		vTaskSuspendAll();
1700:../FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
1701:../FreeRTOS/Source/queue.c **** 
1702:../FreeRTOS/Source/queue.c **** 		/* Update the timeout state to see if it has expired yet. */
1703:../FreeRTOS/Source/queue.c **** 		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1704:../FreeRTOS/Source/queue.c **** 		{
1705:../FreeRTOS/Source/queue.c **** 			/* Timeout has not expired yet, check to see if there is data in the
1706:../FreeRTOS/Source/queue.c **** 			queue now, and if not enter the Blocked state to wait for data. */
1707:../FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1708:../FreeRTOS/Source/queue.c **** 			{
1709:../FreeRTOS/Source/queue.c **** 				traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
1710:../FreeRTOS/Source/queue.c **** 				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1711:../FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1712:../FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
1713:../FreeRTOS/Source/queue.c **** 				{
1714:../FreeRTOS/Source/queue.c **** 					portYIELD_WITHIN_API();
1715:../FreeRTOS/Source/queue.c **** 				}
1716:../FreeRTOS/Source/queue.c **** 				else
1717:../FreeRTOS/Source/queue.c **** 				{
1718:../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1719:../FreeRTOS/Source/queue.c **** 				}
1720:../FreeRTOS/Source/queue.c **** 			}
1721:../FreeRTOS/Source/queue.c **** 			else
1722:../FreeRTOS/Source/queue.c **** 			{
1723:../FreeRTOS/Source/queue.c **** 				/* There is data in the queue now, so don't enter the blocked
1724:../FreeRTOS/Source/queue.c **** 				state, instead return to try and obtain the data. */
1725:../FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
1726:../FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
1727:../FreeRTOS/Source/queue.c **** 			}
1728:../FreeRTOS/Source/queue.c **** 		}
1729:../FreeRTOS/Source/queue.c **** 		else
1730:../FreeRTOS/Source/queue.c **** 		{
1731:../FreeRTOS/Source/queue.c **** 			/* The timeout has expired.  If there is still no data in the queue
1732:../FreeRTOS/Source/queue.c **** 			exit, otherwise go back and try to read the data again. */
1733:../FreeRTOS/Source/queue.c **** 			prvUnlockQueue( pxQueue );
1734:../FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
1735:../FreeRTOS/Source/queue.c **** 
1736:../FreeRTOS/Source/queue.c **** 			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1737:../FreeRTOS/Source/queue.c **** 			{
1738:../FreeRTOS/Source/queue.c **** 				traceQUEUE_PEEK_FAILED( pxQueue );
1739:../FreeRTOS/Source/queue.c **** 				return errQUEUE_EMPTY;
1740:../FreeRTOS/Source/queue.c **** 			}
1741:../FreeRTOS/Source/queue.c **** 			else
1742:../FreeRTOS/Source/queue.c **** 			{
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 32


1743:../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
1744:../FreeRTOS/Source/queue.c **** 			}
1745:../FreeRTOS/Source/queue.c **** 		}
1746:../FreeRTOS/Source/queue.c **** 	}
1747:../FreeRTOS/Source/queue.c **** }
1748:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1749:../FreeRTOS/Source/queue.c **** 
1750:../FreeRTOS/Source/queue.c **** BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const px
1751:../FreeRTOS/Source/queue.c **** {
1752:../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1753:../FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1754:../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1755:../FreeRTOS/Source/queue.c **** 
1756:../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1757:../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1758:../FreeRTOS/Source/queue.c **** 
1759:../FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1760:../FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1761:../FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1762:../FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1763:../FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
1764:../FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1765:../FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1766:../FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1767:../FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1768:../FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1769:../FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1770:../FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1771:../FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1772:../FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1773:../FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1774:../FreeRTOS/Source/queue.c **** 
1775:../FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1776:../FreeRTOS/Source/queue.c **** 	{
1777:../FreeRTOS/Source/queue.c **** 		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1778:../FreeRTOS/Source/queue.c **** 
1779:../FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1780:../FreeRTOS/Source/queue.c **** 		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1781:../FreeRTOS/Source/queue.c **** 		{
1782:../FreeRTOS/Source/queue.c **** 			const int8_t cRxLock = pxQueue->cRxLock;
1783:../FreeRTOS/Source/queue.c **** 
1784:../FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
1785:../FreeRTOS/Source/queue.c **** 
1786:../FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1787:../FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1788:../FreeRTOS/Source/queue.c **** 
1789:../FreeRTOS/Source/queue.c **** 			/* If the queue is locked the event list will not be modified.
1790:../FreeRTOS/Source/queue.c **** 			Instead update the lock count so the task that unlocks the queue
1791:../FreeRTOS/Source/queue.c **** 			will know that an ISR has removed data while the queue was
1792:../FreeRTOS/Source/queue.c **** 			locked. */
1793:../FreeRTOS/Source/queue.c **** 			if( cRxLock == queueUNLOCKED )
1794:../FreeRTOS/Source/queue.c **** 			{
1795:../FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1796:../FreeRTOS/Source/queue.c **** 				{
1797:../FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1798:../FreeRTOS/Source/queue.c **** 					{
1799:../FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority than us so
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 33


1800:../FreeRTOS/Source/queue.c **** 						force a context switch. */
1801:../FreeRTOS/Source/queue.c **** 						if( pxHigherPriorityTaskWoken != NULL )
1802:../FreeRTOS/Source/queue.c **** 						{
1803:../FreeRTOS/Source/queue.c **** 							*pxHigherPriorityTaskWoken = pdTRUE;
1804:../FreeRTOS/Source/queue.c **** 						}
1805:../FreeRTOS/Source/queue.c **** 						else
1806:../FreeRTOS/Source/queue.c **** 						{
1807:../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
1808:../FreeRTOS/Source/queue.c **** 						}
1809:../FreeRTOS/Source/queue.c **** 					}
1810:../FreeRTOS/Source/queue.c **** 					else
1811:../FreeRTOS/Source/queue.c **** 					{
1812:../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
1813:../FreeRTOS/Source/queue.c **** 					}
1814:../FreeRTOS/Source/queue.c **** 				}
1815:../FreeRTOS/Source/queue.c **** 				else
1816:../FreeRTOS/Source/queue.c **** 				{
1817:../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
1818:../FreeRTOS/Source/queue.c **** 				}
1819:../FreeRTOS/Source/queue.c **** 			}
1820:../FreeRTOS/Source/queue.c **** 			else
1821:../FreeRTOS/Source/queue.c **** 			{
1822:../FreeRTOS/Source/queue.c **** 				/* Increment the lock count so the task that unlocks the queue
1823:../FreeRTOS/Source/queue.c **** 				knows that data was removed while it was locked. */
1824:../FreeRTOS/Source/queue.c **** 				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
1825:../FreeRTOS/Source/queue.c **** 			}
1826:../FreeRTOS/Source/queue.c **** 
1827:../FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1828:../FreeRTOS/Source/queue.c **** 		}
1829:../FreeRTOS/Source/queue.c **** 		else
1830:../FreeRTOS/Source/queue.c **** 		{
1831:../FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1832:../FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
1833:../FreeRTOS/Source/queue.c **** 		}
1834:../FreeRTOS/Source/queue.c **** 	}
1835:../FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1836:../FreeRTOS/Source/queue.c **** 
1837:../FreeRTOS/Source/queue.c **** 	return xReturn;
1838:../FreeRTOS/Source/queue.c **** }
1839:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1840:../FreeRTOS/Source/queue.c **** 
1841:../FreeRTOS/Source/queue.c **** BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,  void * const pvBuffer )
1842:../FreeRTOS/Source/queue.c **** {
1843:../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
1844:../FreeRTOS/Source/queue.c **** UBaseType_t uxSavedInterruptStatus;
1845:../FreeRTOS/Source/queue.c **** int8_t *pcOriginalReadPosition;
1846:../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1847:../FreeRTOS/Source/queue.c **** 
1848:../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1849:../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1850:../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
1851:../FreeRTOS/Source/queue.c **** 
1852:../FreeRTOS/Source/queue.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
1853:../FreeRTOS/Source/queue.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
1854:../FreeRTOS/Source/queue.c **** 	above the maximum system call priority are kept permanently enabled, even
1855:../FreeRTOS/Source/queue.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
1856:../FreeRTOS/Source/queue.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 34


1857:../FreeRTOS/Source/queue.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1858:../FreeRTOS/Source/queue.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
1859:../FreeRTOS/Source/queue.c **** 	assigned a priority above the configured maximum system call priority.
1860:../FreeRTOS/Source/queue.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
1861:../FreeRTOS/Source/queue.c **** 	that have been assigned a priority at or (logically) below the maximum
1862:../FreeRTOS/Source/queue.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
1863:../FreeRTOS/Source/queue.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
1864:../FreeRTOS/Source/queue.c **** 	More information (albeit Cortex-M specific) is provided on the following
1865:../FreeRTOS/Source/queue.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1866:../FreeRTOS/Source/queue.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1867:../FreeRTOS/Source/queue.c **** 
1868:../FreeRTOS/Source/queue.c **** 	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1869:../FreeRTOS/Source/queue.c **** 	{
1870:../FreeRTOS/Source/queue.c **** 		/* Cannot block in an ISR, so check there is data available. */
1871:../FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
1872:../FreeRTOS/Source/queue.c **** 		{
1873:../FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR( pxQueue );
1874:../FreeRTOS/Source/queue.c **** 
1875:../FreeRTOS/Source/queue.c **** 			/* Remember the read position so it can be reset as nothing is
1876:../FreeRTOS/Source/queue.c **** 			actually being removed from the queue. */
1877:../FreeRTOS/Source/queue.c **** 			pcOriginalReadPosition = pxQueue->u.pcReadFrom;
1878:../FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
1879:../FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
1880:../FreeRTOS/Source/queue.c **** 
1881:../FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
1882:../FreeRTOS/Source/queue.c **** 		}
1883:../FreeRTOS/Source/queue.c **** 		else
1884:../FreeRTOS/Source/queue.c **** 		{
1885:../FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
1886:../FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
1887:../FreeRTOS/Source/queue.c **** 		}
1888:../FreeRTOS/Source/queue.c **** 	}
1889:../FreeRTOS/Source/queue.c **** 	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1890:../FreeRTOS/Source/queue.c **** 
1891:../FreeRTOS/Source/queue.c **** 	return xReturn;
1892:../FreeRTOS/Source/queue.c **** }
1893:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1894:../FreeRTOS/Source/queue.c **** 
1895:../FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
1896:../FreeRTOS/Source/queue.c **** {
1897:../FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1898:../FreeRTOS/Source/queue.c **** 
1899:../FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1900:../FreeRTOS/Source/queue.c **** 
1901:../FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1902:../FreeRTOS/Source/queue.c **** 	{
1903:../FreeRTOS/Source/queue.c **** 		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1904:../FreeRTOS/Source/queue.c **** 	}
1905:../FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1906:../FreeRTOS/Source/queue.c **** 
1907:../FreeRTOS/Source/queue.c **** 	return uxReturn;
1908:../FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1909:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1910:../FreeRTOS/Source/queue.c **** 
1911:../FreeRTOS/Source/queue.c **** UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
1912:../FreeRTOS/Source/queue.c **** {
1913:../FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 35


1914:../FreeRTOS/Source/queue.c **** Queue_t *pxQueue;
1915:../FreeRTOS/Source/queue.c **** 
1916:../FreeRTOS/Source/queue.c **** 	pxQueue = ( Queue_t * ) xQueue;
1917:../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1918:../FreeRTOS/Source/queue.c **** 
1919:../FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
1920:../FreeRTOS/Source/queue.c **** 	{
1921:../FreeRTOS/Source/queue.c **** 		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
1922:../FreeRTOS/Source/queue.c **** 	}
1923:../FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
1924:../FreeRTOS/Source/queue.c **** 
1925:../FreeRTOS/Source/queue.c **** 	return uxReturn;
1926:../FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1927:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1928:../FreeRTOS/Source/queue.c **** 
1929:../FreeRTOS/Source/queue.c **** UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
1930:../FreeRTOS/Source/queue.c **** {
1931:../FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
1932:../FreeRTOS/Source/queue.c **** 
1933:../FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
1934:../FreeRTOS/Source/queue.c **** 
1935:../FreeRTOS/Source/queue.c **** 	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1936:../FreeRTOS/Source/queue.c **** 
1937:../FreeRTOS/Source/queue.c **** 	return uxReturn;
1938:../FreeRTOS/Source/queue.c **** } /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1939:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1940:../FreeRTOS/Source/queue.c **** 
1941:../FreeRTOS/Source/queue.c **** void vQueueDelete( QueueHandle_t xQueue )
1942:../FreeRTOS/Source/queue.c **** {
1943:../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
1944:../FreeRTOS/Source/queue.c **** 
1945:../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue );
1946:../FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
1947:../FreeRTOS/Source/queue.c **** 
1948:../FreeRTOS/Source/queue.c **** 	#if ( configQUEUE_REGISTRY_SIZE > 0 )
1949:../FreeRTOS/Source/queue.c **** 	{
1950:../FreeRTOS/Source/queue.c **** 		vQueueUnregisterQueue( pxQueue );
1951:../FreeRTOS/Source/queue.c **** 	}
1952:../FreeRTOS/Source/queue.c **** 	#endif
1953:../FreeRTOS/Source/queue.c **** 
1954:../FreeRTOS/Source/queue.c **** 	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
1955:../FreeRTOS/Source/queue.c **** 	{
1956:../FreeRTOS/Source/queue.c **** 		/* The queue can only have been allocated dynamically - free it
1957:../FreeRTOS/Source/queue.c **** 		again. */
1958:../FreeRTOS/Source/queue.c **** 		vPortFree( pxQueue );
1959:../FreeRTOS/Source/queue.c **** 	}
1960:../FreeRTOS/Source/queue.c **** 	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
1961:../FreeRTOS/Source/queue.c **** 	{
1962:../FreeRTOS/Source/queue.c **** 		/* The queue could have been allocated statically or dynamically, so
1963:../FreeRTOS/Source/queue.c **** 		check before attempting to free the memory. */
1964:../FreeRTOS/Source/queue.c **** 		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1965:../FreeRTOS/Source/queue.c **** 		{
1966:../FreeRTOS/Source/queue.c **** 			vPortFree( pxQueue );
1967:../FreeRTOS/Source/queue.c **** 		}
1968:../FreeRTOS/Source/queue.c **** 		else
1969:../FreeRTOS/Source/queue.c **** 		{
1970:../FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 36


1971:../FreeRTOS/Source/queue.c **** 		}
1972:../FreeRTOS/Source/queue.c **** 	}
1973:../FreeRTOS/Source/queue.c **** 	#else
1974:../FreeRTOS/Source/queue.c **** 	{
1975:../FreeRTOS/Source/queue.c **** 		/* The queue must have been statically allocated, so is not going to be
1976:../FreeRTOS/Source/queue.c **** 		deleted.  Avoid compiler warnings about the unused parameter. */
1977:../FreeRTOS/Source/queue.c **** 		( void ) pxQueue;
1978:../FreeRTOS/Source/queue.c **** 	}
1979:../FreeRTOS/Source/queue.c **** 	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
1980:../FreeRTOS/Source/queue.c **** }
1981:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1982:../FreeRTOS/Source/queue.c **** 
1983:../FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1984:../FreeRTOS/Source/queue.c **** 
1985:../FreeRTOS/Source/queue.c **** 	UBaseType_t uxQueueGetQueueNumber( QueueHandle_t xQueue )
1986:../FreeRTOS/Source/queue.c **** 	{
1987:../FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
1988:../FreeRTOS/Source/queue.c **** 	}
1989:../FreeRTOS/Source/queue.c **** 
1990:../FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
1991:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
1992:../FreeRTOS/Source/queue.c **** 
1993:../FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
1994:../FreeRTOS/Source/queue.c **** 
1995:../FreeRTOS/Source/queue.c **** 	void vQueueSetQueueNumber( QueueHandle_t xQueue, UBaseType_t uxQueueNumber )
1996:../FreeRTOS/Source/queue.c **** 	{
1997:../FreeRTOS/Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
1998:../FreeRTOS/Source/queue.c **** 	}
1999:../FreeRTOS/Source/queue.c **** 
2000:../FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2001:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2002:../FreeRTOS/Source/queue.c **** 
2003:../FreeRTOS/Source/queue.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2004:../FreeRTOS/Source/queue.c **** 
2005:../FreeRTOS/Source/queue.c **** 	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
2006:../FreeRTOS/Source/queue.c **** 	{
2007:../FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
2008:../FreeRTOS/Source/queue.c **** 	}
2009:../FreeRTOS/Source/queue.c **** 
2010:../FreeRTOS/Source/queue.c **** #endif /* configUSE_TRACE_FACILITY */
2011:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2012:../FreeRTOS/Source/queue.c **** 
2013:../FreeRTOS/Source/queue.c **** #if( configUSE_MUTEXES == 1 )
2014:../FreeRTOS/Source/queue.c **** 
2015:../FreeRTOS/Source/queue.c **** 	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
2016:../FreeRTOS/Source/queue.c **** 	{
  27              		.loc 1 2016 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
2017:../FreeRTOS/Source/queue.c **** 	UBaseType_t uxHighestPriorityOfWaitingTasks;
2018:../FreeRTOS/Source/queue.c **** 
2019:../FreeRTOS/Source/queue.c **** 		/* If a task waiting for a mutex causes the mutex holder to inherit a
2020:../FreeRTOS/Source/queue.c **** 		priority, but the waiting task times out, then the holder should
2021:../FreeRTOS/Source/queue.c **** 		disinherit the priority - but only down to the highest priority of any
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 37


2022:../FreeRTOS/Source/queue.c **** 		other tasks that are waiting for the same mutex.  For this purpose,
2023:../FreeRTOS/Source/queue.c **** 		return the priority of the highest priority task that is waiting for the
2024:../FreeRTOS/Source/queue.c **** 		mutex. */
2025:../FreeRTOS/Source/queue.c **** 		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
  33              		.loc 1 2025 0
  34 0000 436A     		ldr	r3, [r0, #36]
  35 0002 23B1     		cbz	r3, .L3
2026:../FreeRTOS/Source/queue.c **** 		{
2027:../FreeRTOS/Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( px
  36              		.loc 1 2027 0
  37 0004 036B     		ldr	r3, [r0, #48]
  38 0006 1868     		ldr	r0, [r3]
  39              	.LVL1:
  40 0008 C0F10600 		rsb	r0, r0, #6
  41              	.LVL2:
  42 000c 7047     		bx	lr
  43              	.LVL3:
  44              	.L3:
2028:../FreeRTOS/Source/queue.c **** 		}
2029:../FreeRTOS/Source/queue.c **** 		else
2030:../FreeRTOS/Source/queue.c **** 		{
2031:../FreeRTOS/Source/queue.c **** 			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
  45              		.loc 1 2031 0
  46 000e 0020     		movs	r0, #0
  47              	.LVL4:
2032:../FreeRTOS/Source/queue.c **** 		}
2033:../FreeRTOS/Source/queue.c **** 
2034:../FreeRTOS/Source/queue.c **** 		return uxHighestPriorityOfWaitingTasks;
2035:../FreeRTOS/Source/queue.c **** 	}
  48              		.loc 1 2035 0
  49 0010 7047     		bx	lr
  50              		.cfi_endproc
  51              	.LFE28:
  53              		.section	.text.prvIsQueueFull,"ax",%progbits
  54              		.align	1
  55              		.syntax unified
  56              		.thumb
  57              		.thumb_func
  58              		.fpu fpv4-sp-d16
  60              	prvIsQueueFull:
  61              	.LFB34:
2036:../FreeRTOS/Source/queue.c **** 
2037:../FreeRTOS/Source/queue.c **** #endif /* configUSE_MUTEXES */
2038:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2039:../FreeRTOS/Source/queue.c **** 
2040:../FreeRTOS/Source/queue.c **** static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const Bas
2041:../FreeRTOS/Source/queue.c **** {
2042:../FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
2043:../FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
2044:../FreeRTOS/Source/queue.c **** 
2045:../FreeRTOS/Source/queue.c **** 	/* This function is called from a critical section. */
2046:../FreeRTOS/Source/queue.c **** 
2047:../FreeRTOS/Source/queue.c **** 	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
2048:../FreeRTOS/Source/queue.c **** 
2049:../FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
2050:../FreeRTOS/Source/queue.c **** 	{
2051:../FreeRTOS/Source/queue.c **** 		#if ( configUSE_MUTEXES == 1 )
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 38


2052:../FreeRTOS/Source/queue.c **** 		{
2053:../FreeRTOS/Source/queue.c **** 			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
2054:../FreeRTOS/Source/queue.c **** 			{
2055:../FreeRTOS/Source/queue.c **** 				/* The mutex is no longer being held. */
2056:../FreeRTOS/Source/queue.c **** 				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
2057:../FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
2058:../FreeRTOS/Source/queue.c **** 			}
2059:../FreeRTOS/Source/queue.c **** 			else
2060:../FreeRTOS/Source/queue.c **** 			{
2061:../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2062:../FreeRTOS/Source/queue.c **** 			}
2063:../FreeRTOS/Source/queue.c **** 		}
2064:../FreeRTOS/Source/queue.c **** 		#endif /* configUSE_MUTEXES */
2065:../FreeRTOS/Source/queue.c **** 	}
2066:../FreeRTOS/Source/queue.c **** 	else if( xPosition == queueSEND_TO_BACK )
2067:../FreeRTOS/Source/queue.c **** 	{
2068:../FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); 
2069:../FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
2070:../FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
2071:../FreeRTOS/Source/queue.c **** 		{
2072:../FreeRTOS/Source/queue.c **** 			pxQueue->pcWriteTo = pxQueue->pcHead;
2073:../FreeRTOS/Source/queue.c **** 		}
2074:../FreeRTOS/Source/queue.c **** 		else
2075:../FreeRTOS/Source/queue.c **** 		{
2076:../FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2077:../FreeRTOS/Source/queue.c **** 		}
2078:../FreeRTOS/Source/queue.c **** 	}
2079:../FreeRTOS/Source/queue.c **** 	else
2080:../FreeRTOS/Source/queue.c **** 	{
2081:../FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize 
2082:../FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
2083:../FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
2084:../FreeRTOS/Source/queue.c **** 		{
2085:../FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
2086:../FreeRTOS/Source/queue.c **** 		}
2087:../FreeRTOS/Source/queue.c **** 		else
2088:../FreeRTOS/Source/queue.c **** 		{
2089:../FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2090:../FreeRTOS/Source/queue.c **** 		}
2091:../FreeRTOS/Source/queue.c **** 
2092:../FreeRTOS/Source/queue.c **** 		if( xPosition == queueOVERWRITE )
2093:../FreeRTOS/Source/queue.c **** 		{
2094:../FreeRTOS/Source/queue.c **** 			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
2095:../FreeRTOS/Source/queue.c **** 			{
2096:../FreeRTOS/Source/queue.c **** 				/* An item is not being added but overwritten, so subtract
2097:../FreeRTOS/Source/queue.c **** 				one from the recorded number of items in the queue so when
2098:../FreeRTOS/Source/queue.c **** 				one is added again below the number of recorded items remains
2099:../FreeRTOS/Source/queue.c **** 				correct. */
2100:../FreeRTOS/Source/queue.c **** 				--uxMessagesWaiting;
2101:../FreeRTOS/Source/queue.c **** 			}
2102:../FreeRTOS/Source/queue.c **** 			else
2103:../FreeRTOS/Source/queue.c **** 			{
2104:../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2105:../FreeRTOS/Source/queue.c **** 			}
2106:../FreeRTOS/Source/queue.c **** 		}
2107:../FreeRTOS/Source/queue.c **** 		else
2108:../FreeRTOS/Source/queue.c **** 		{
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 39


2109:../FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2110:../FreeRTOS/Source/queue.c **** 		}
2111:../FreeRTOS/Source/queue.c **** 	}
2112:../FreeRTOS/Source/queue.c **** 
2113:../FreeRTOS/Source/queue.c **** 	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
2114:../FreeRTOS/Source/queue.c **** 
2115:../FreeRTOS/Source/queue.c **** 	return xReturn;
2116:../FreeRTOS/Source/queue.c **** }
2117:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2118:../FreeRTOS/Source/queue.c **** 
2119:../FreeRTOS/Source/queue.c **** static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
2120:../FreeRTOS/Source/queue.c **** {
2121:../FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
2122:../FreeRTOS/Source/queue.c **** 	{
2123:../FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2124:../FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
2125:../FreeRTOS/Source/queue.c **** 		{
2126:../FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pxQueue->pcHead;
2127:../FreeRTOS/Source/queue.c **** 		}
2128:../FreeRTOS/Source/queue.c **** 		else
2129:../FreeRTOS/Source/queue.c **** 		{
2130:../FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2131:../FreeRTOS/Source/queue.c **** 		}
2132:../FreeRTOS/Source/queue.c **** 		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxIte
2133:../FreeRTOS/Source/queue.c **** 	}
2134:../FreeRTOS/Source/queue.c **** }
2135:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2136:../FreeRTOS/Source/queue.c **** 
2137:../FreeRTOS/Source/queue.c **** static void prvUnlockQueue( Queue_t * const pxQueue )
2138:../FreeRTOS/Source/queue.c **** {
2139:../FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
2140:../FreeRTOS/Source/queue.c **** 
2141:../FreeRTOS/Source/queue.c **** 	/* The lock counts contains the number of extra data items placed or
2142:../FreeRTOS/Source/queue.c **** 	removed from the queue while the queue was locked.  When a queue is
2143:../FreeRTOS/Source/queue.c **** 	locked items can be added or removed, but the event lists cannot be
2144:../FreeRTOS/Source/queue.c **** 	updated. */
2145:../FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
2146:../FreeRTOS/Source/queue.c **** 	{
2147:../FreeRTOS/Source/queue.c **** 		int8_t cTxLock = pxQueue->cTxLock;
2148:../FreeRTOS/Source/queue.c **** 
2149:../FreeRTOS/Source/queue.c **** 		/* See if data was added to the queue while it was locked. */
2150:../FreeRTOS/Source/queue.c **** 		while( cTxLock > queueLOCKED_UNMODIFIED )
2151:../FreeRTOS/Source/queue.c **** 		{
2152:../FreeRTOS/Source/queue.c **** 			/* Data was posted while the queue was locked.  Are any tasks
2153:../FreeRTOS/Source/queue.c **** 			blocked waiting for data to become available? */
2154:../FreeRTOS/Source/queue.c **** 			#if ( configUSE_QUEUE_SETS == 1 )
2155:../FreeRTOS/Source/queue.c **** 			{
2156:../FreeRTOS/Source/queue.c **** 				if( pxQueue->pxQueueSetContainer != NULL )
2157:../FreeRTOS/Source/queue.c **** 				{
2158:../FreeRTOS/Source/queue.c **** 					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) != pdFALSE )
2159:../FreeRTOS/Source/queue.c **** 					{
2160:../FreeRTOS/Source/queue.c **** 						/* The queue is a member of a queue set, and posting to
2161:../FreeRTOS/Source/queue.c **** 						the queue set caused a higher priority task to unblock.
2162:../FreeRTOS/Source/queue.c **** 						A context switch is required. */
2163:../FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
2164:../FreeRTOS/Source/queue.c **** 					}
2165:../FreeRTOS/Source/queue.c **** 					else
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 40


2166:../FreeRTOS/Source/queue.c **** 					{
2167:../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2168:../FreeRTOS/Source/queue.c **** 					}
2169:../FreeRTOS/Source/queue.c **** 				}
2170:../FreeRTOS/Source/queue.c **** 				else
2171:../FreeRTOS/Source/queue.c **** 				{
2172:../FreeRTOS/Source/queue.c **** 					/* Tasks that are removed from the event list will get
2173:../FreeRTOS/Source/queue.c **** 					added to the pending ready list as the scheduler is still
2174:../FreeRTOS/Source/queue.c **** 					suspended. */
2175:../FreeRTOS/Source/queue.c **** 					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2176:../FreeRTOS/Source/queue.c **** 					{
2177:../FreeRTOS/Source/queue.c **** 						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2178:../FreeRTOS/Source/queue.c **** 						{
2179:../FreeRTOS/Source/queue.c **** 							/* The task waiting has a higher priority so record that a
2180:../FreeRTOS/Source/queue.c **** 							context	switch is required. */
2181:../FreeRTOS/Source/queue.c **** 							vTaskMissedYield();
2182:../FreeRTOS/Source/queue.c **** 						}
2183:../FreeRTOS/Source/queue.c **** 						else
2184:../FreeRTOS/Source/queue.c **** 						{
2185:../FreeRTOS/Source/queue.c **** 							mtCOVERAGE_TEST_MARKER();
2186:../FreeRTOS/Source/queue.c **** 						}
2187:../FreeRTOS/Source/queue.c **** 					}
2188:../FreeRTOS/Source/queue.c **** 					else
2189:../FreeRTOS/Source/queue.c **** 					{
2190:../FreeRTOS/Source/queue.c **** 						break;
2191:../FreeRTOS/Source/queue.c **** 					}
2192:../FreeRTOS/Source/queue.c **** 				}
2193:../FreeRTOS/Source/queue.c **** 			}
2194:../FreeRTOS/Source/queue.c **** 			#else /* configUSE_QUEUE_SETS */
2195:../FreeRTOS/Source/queue.c **** 			{
2196:../FreeRTOS/Source/queue.c **** 				/* Tasks that are removed from the event list will get added to
2197:../FreeRTOS/Source/queue.c **** 				the pending ready list as the scheduler is still suspended. */
2198:../FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2199:../FreeRTOS/Source/queue.c **** 				{
2200:../FreeRTOS/Source/queue.c **** 					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2201:../FreeRTOS/Source/queue.c **** 					{
2202:../FreeRTOS/Source/queue.c **** 						/* The task waiting has a higher priority so record that
2203:../FreeRTOS/Source/queue.c **** 						a context switch is required. */
2204:../FreeRTOS/Source/queue.c **** 						vTaskMissedYield();
2205:../FreeRTOS/Source/queue.c **** 					}
2206:../FreeRTOS/Source/queue.c **** 					else
2207:../FreeRTOS/Source/queue.c **** 					{
2208:../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2209:../FreeRTOS/Source/queue.c **** 					}
2210:../FreeRTOS/Source/queue.c **** 				}
2211:../FreeRTOS/Source/queue.c **** 				else
2212:../FreeRTOS/Source/queue.c **** 				{
2213:../FreeRTOS/Source/queue.c **** 					break;
2214:../FreeRTOS/Source/queue.c **** 				}
2215:../FreeRTOS/Source/queue.c **** 			}
2216:../FreeRTOS/Source/queue.c **** 			#endif /* configUSE_QUEUE_SETS */
2217:../FreeRTOS/Source/queue.c **** 
2218:../FreeRTOS/Source/queue.c **** 			--cTxLock;
2219:../FreeRTOS/Source/queue.c **** 		}
2220:../FreeRTOS/Source/queue.c **** 
2221:../FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
2222:../FreeRTOS/Source/queue.c **** 	}
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 41


2223:../FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
2224:../FreeRTOS/Source/queue.c **** 
2225:../FreeRTOS/Source/queue.c **** 	/* Do the same for the Rx lock. */
2226:../FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
2227:../FreeRTOS/Source/queue.c **** 	{
2228:../FreeRTOS/Source/queue.c **** 		int8_t cRxLock = pxQueue->cRxLock;
2229:../FreeRTOS/Source/queue.c **** 
2230:../FreeRTOS/Source/queue.c **** 		while( cRxLock > queueLOCKED_UNMODIFIED )
2231:../FreeRTOS/Source/queue.c **** 		{
2232:../FreeRTOS/Source/queue.c **** 			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2233:../FreeRTOS/Source/queue.c **** 			{
2234:../FreeRTOS/Source/queue.c **** 				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2235:../FreeRTOS/Source/queue.c **** 				{
2236:../FreeRTOS/Source/queue.c **** 					vTaskMissedYield();
2237:../FreeRTOS/Source/queue.c **** 				}
2238:../FreeRTOS/Source/queue.c **** 				else
2239:../FreeRTOS/Source/queue.c **** 				{
2240:../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2241:../FreeRTOS/Source/queue.c **** 				}
2242:../FreeRTOS/Source/queue.c **** 
2243:../FreeRTOS/Source/queue.c **** 				--cRxLock;
2244:../FreeRTOS/Source/queue.c **** 			}
2245:../FreeRTOS/Source/queue.c **** 			else
2246:../FreeRTOS/Source/queue.c **** 			{
2247:../FreeRTOS/Source/queue.c **** 				break;
2248:../FreeRTOS/Source/queue.c **** 			}
2249:../FreeRTOS/Source/queue.c **** 		}
2250:../FreeRTOS/Source/queue.c **** 
2251:../FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
2252:../FreeRTOS/Source/queue.c **** 	}
2253:../FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
2254:../FreeRTOS/Source/queue.c **** }
2255:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2256:../FreeRTOS/Source/queue.c **** 
2257:../FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
2258:../FreeRTOS/Source/queue.c **** {
2259:../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2260:../FreeRTOS/Source/queue.c **** 
2261:../FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
2262:../FreeRTOS/Source/queue.c **** 	{
2263:../FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
2264:../FreeRTOS/Source/queue.c **** 		{
2265:../FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
2266:../FreeRTOS/Source/queue.c **** 		}
2267:../FreeRTOS/Source/queue.c **** 		else
2268:../FreeRTOS/Source/queue.c **** 		{
2269:../FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
2270:../FreeRTOS/Source/queue.c **** 		}
2271:../FreeRTOS/Source/queue.c **** 	}
2272:../FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
2273:../FreeRTOS/Source/queue.c **** 
2274:../FreeRTOS/Source/queue.c **** 	return xReturn;
2275:../FreeRTOS/Source/queue.c **** }
2276:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2277:../FreeRTOS/Source/queue.c **** 
2278:../FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
2279:../FreeRTOS/Source/queue.c **** {
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 42


2280:../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2281:../FreeRTOS/Source/queue.c **** 
2282:../FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
2283:../FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
2284:../FreeRTOS/Source/queue.c **** 	{
2285:../FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
2286:../FreeRTOS/Source/queue.c **** 	}
2287:../FreeRTOS/Source/queue.c **** 	else
2288:../FreeRTOS/Source/queue.c **** 	{
2289:../FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
2290:../FreeRTOS/Source/queue.c **** 	}
2291:../FreeRTOS/Source/queue.c **** 
2292:../FreeRTOS/Source/queue.c **** 	return xReturn;
2293:../FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
2294:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2295:../FreeRTOS/Source/queue.c **** 
2296:../FreeRTOS/Source/queue.c **** static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
2297:../FreeRTOS/Source/queue.c **** {
  62              		.loc 1 2297 0
  63              		.cfi_startproc
  64              		@ args = 0, pretend = 0, frame = 0
  65              		@ frame_needed = 0, uses_anonymous_args = 0
  66              	.LVL5:
  67 0000 10B5     		push	{r4, lr}
  68              	.LCFI0:
  69              		.cfi_def_cfa_offset 8
  70              		.cfi_offset 4, -8
  71              		.cfi_offset 14, -4
  72 0002 0446     		mov	r4, r0
2298:../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2299:../FreeRTOS/Source/queue.c **** 
2300:../FreeRTOS/Source/queue.c **** 	taskENTER_CRITICAL();
  73              		.loc 1 2300 0
  74 0004 FFF7FEFF 		bl	vPortEnterCritical
  75              	.LVL6:
2301:../FreeRTOS/Source/queue.c **** 	{
2302:../FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  76              		.loc 1 2302 0
  77 0008 A26B     		ldr	r2, [r4, #56]
  78 000a E36B     		ldr	r3, [r4, #60]
  79 000c 9A42     		cmp	r2, r3
  80 000e 04D0     		beq	.L8
2303:../FreeRTOS/Source/queue.c **** 		{
2304:../FreeRTOS/Source/queue.c **** 			xReturn = pdTRUE;
2305:../FreeRTOS/Source/queue.c **** 		}
2306:../FreeRTOS/Source/queue.c **** 		else
2307:../FreeRTOS/Source/queue.c **** 		{
2308:../FreeRTOS/Source/queue.c **** 			xReturn = pdFALSE;
  81              		.loc 1 2308 0
  82 0010 0024     		movs	r4, #0
  83              	.LVL7:
  84              	.L5:
2309:../FreeRTOS/Source/queue.c **** 		}
2310:../FreeRTOS/Source/queue.c **** 	}
2311:../FreeRTOS/Source/queue.c **** 	taskEXIT_CRITICAL();
  85              		.loc 1 2311 0
  86 0012 FFF7FEFF 		bl	vPortExitCritical
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 43


  87              	.LVL8:
2312:../FreeRTOS/Source/queue.c **** 
2313:../FreeRTOS/Source/queue.c **** 	return xReturn;
2314:../FreeRTOS/Source/queue.c **** }
  88              		.loc 1 2314 0
  89 0016 2046     		mov	r0, r4
  90 0018 10BD     		pop	{r4, pc}
  91              	.LVL9:
  92              	.L8:
2304:../FreeRTOS/Source/queue.c **** 		}
  93              		.loc 1 2304 0
  94 001a 0124     		movs	r4, #1
  95              	.LVL10:
  96 001c F9E7     		b	.L5
  97              		.cfi_endproc
  98              	.LFE34:
 100              		.section	.text.prvIsQueueEmpty,"ax",%progbits
 101              		.align	1
 102              		.syntax unified
 103              		.thumb
 104              		.thumb_func
 105              		.fpu fpv4-sp-d16
 107              	prvIsQueueEmpty:
 108              	.LFB32:
2258:../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 109              		.loc 1 2258 0
 110              		.cfi_startproc
 111              		@ args = 0, pretend = 0, frame = 0
 112              		@ frame_needed = 0, uses_anonymous_args = 0
 113              	.LVL11:
 114 0000 10B5     		push	{r4, lr}
 115              	.LCFI1:
 116              		.cfi_def_cfa_offset 8
 117              		.cfi_offset 4, -8
 118              		.cfi_offset 14, -4
 119 0002 0446     		mov	r4, r0
2261:../FreeRTOS/Source/queue.c **** 	{
 120              		.loc 1 2261 0
 121 0004 FFF7FEFF 		bl	vPortEnterCritical
 122              	.LVL12:
2263:../FreeRTOS/Source/queue.c **** 		{
 123              		.loc 1 2263 0
 124 0008 A36B     		ldr	r3, [r4, #56]
 125 000a 23B1     		cbz	r3, .L13
2269:../FreeRTOS/Source/queue.c **** 		}
 126              		.loc 1 2269 0
 127 000c 0024     		movs	r4, #0
 128              	.LVL13:
 129              	.L10:
2272:../FreeRTOS/Source/queue.c **** 
 130              		.loc 1 2272 0
 131 000e FFF7FEFF 		bl	vPortExitCritical
 132              	.LVL14:
2275:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 133              		.loc 1 2275 0
 134 0012 2046     		mov	r0, r4
 135 0014 10BD     		pop	{r4, pc}
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 44


 136              	.LVL15:
 137              	.L13:
2265:../FreeRTOS/Source/queue.c **** 		}
 138              		.loc 1 2265 0
 139 0016 0124     		movs	r4, #1
 140              	.LVL16:
 141 0018 F9E7     		b	.L10
 142              		.cfi_endproc
 143              	.LFE32:
 145              		.section	.text.prvCopyDataToQueue,"ax",%progbits
 146              		.align	1
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu fpv4-sp-d16
 152              	prvCopyDataToQueue:
 153              	.LFB29:
2041:../FreeRTOS/Source/queue.c **** BaseType_t xReturn = pdFALSE;
 154              		.loc 1 2041 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              	.LVL17:
 159 0000 70B5     		push	{r4, r5, r6, lr}
 160              	.LCFI2:
 161              		.cfi_def_cfa_offset 16
 162              		.cfi_offset 4, -16
 163              		.cfi_offset 5, -12
 164              		.cfi_offset 6, -8
 165              		.cfi_offset 14, -4
 166 0002 0446     		mov	r4, r0
 167 0004 1646     		mov	r6, r2
 168              	.LVL18:
2047:../FreeRTOS/Source/queue.c **** 
 169              		.loc 1 2047 0
 170 0006 856B     		ldr	r5, [r0, #56]
 171              	.LVL19:
2049:../FreeRTOS/Source/queue.c **** 	{
 172              		.loc 1 2049 0
 173 0008 026C     		ldr	r2, [r0, #64]
 174              	.LVL20:
 175 000a 5AB9     		cbnz	r2, .L15
2053:../FreeRTOS/Source/queue.c **** 			{
 176              		.loc 1 2053 0
 177 000c 0368     		ldr	r3, [r0]
 178 000e 1BB1     		cbz	r3, .L24
2042:../FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 179              		.loc 1 2042 0
 180 0010 0020     		movs	r0, #0
 181              	.LVL21:
 182              	.L16:
2113:../FreeRTOS/Source/queue.c **** 
 183              		.loc 1 2113 0
 184 0012 0135     		adds	r5, r5, #1
 185              	.LVL22:
 186 0014 A563     		str	r5, [r4, #56]
2116:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 45


 187              		.loc 1 2116 0
 188 0016 70BD     		pop	{r4, r5, r6, pc}
 189              	.LVL23:
 190              	.L24:
2056:../FreeRTOS/Source/queue.c **** 				pxQueue->pxMutexHolder = NULL;
 191              		.loc 1 2056 0
 192 0018 4068     		ldr	r0, [r0, #4]
 193              	.LVL24:
 194 001a FFF7FEFF 		bl	xTaskPriorityDisinherit
 195              	.LVL25:
2057:../FreeRTOS/Source/queue.c **** 			}
 196              		.loc 1 2057 0
 197 001e 0023     		movs	r3, #0
 198 0020 6360     		str	r3, [r4, #4]
 199 0022 F6E7     		b	.L16
 200              	.LVL26:
 201              	.L15:
2066:../FreeRTOS/Source/queue.c **** 	{
 202              		.loc 1 2066 0
 203 0024 6EB9     		cbnz	r6, .L17
2068:../FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 204              		.loc 1 2068 0
 205 0026 8068     		ldr	r0, [r0, #8]
 206              	.LVL27:
 207 0028 FFF7FEFF 		bl	memcpy
 208              	.LVL28:
2069:../FreeRTOS/Source/queue.c **** 		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison 
 209              		.loc 1 2069 0
 210 002c 226C     		ldr	r2, [r4, #64]
 211 002e A368     		ldr	r3, [r4, #8]
 212 0030 1344     		add	r3, r3, r2
 213 0032 A360     		str	r3, [r4, #8]
2070:../FreeRTOS/Source/queue.c **** 		{
 214              		.loc 1 2070 0
 215 0034 6268     		ldr	r2, [r4, #4]
 216 0036 9342     		cmp	r3, r2
 217 0038 19D3     		bcc	.L20
2072:../FreeRTOS/Source/queue.c **** 		}
 218              		.loc 1 2072 0
 219 003a 2368     		ldr	r3, [r4]
 220 003c A360     		str	r3, [r4, #8]
2042:../FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 221              		.loc 1 2042 0
 222 003e 0020     		movs	r0, #0
 223 0040 E7E7     		b	.L16
 224              	.LVL29:
 225              	.L17:
2081:../FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 226              		.loc 1 2081 0
 227 0042 C068     		ldr	r0, [r0, #12]
 228              	.LVL30:
 229 0044 FFF7FEFF 		bl	memcpy
 230              	.LVL31:
2082:../FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as compariso
 231              		.loc 1 2082 0
 232 0048 226C     		ldr	r2, [r4, #64]
 233 004a 5242     		negs	r2, r2
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 46


 234 004c E368     		ldr	r3, [r4, #12]
 235 004e 1344     		add	r3, r3, r2
 236 0050 E360     		str	r3, [r4, #12]
2083:../FreeRTOS/Source/queue.c **** 		{
 237              		.loc 1 2083 0
 238 0052 2168     		ldr	r1, [r4]
 239 0054 8B42     		cmp	r3, r1
 240 0056 02D2     		bcs	.L18
2085:../FreeRTOS/Source/queue.c **** 		}
 241              		.loc 1 2085 0
 242 0058 6368     		ldr	r3, [r4, #4]
 243 005a 1A44     		add	r2, r2, r3
 244 005c E260     		str	r2, [r4, #12]
 245              	.L18:
2092:../FreeRTOS/Source/queue.c **** 		{
 246              		.loc 1 2092 0
 247 005e 022E     		cmp	r6, #2
 248 0060 01D0     		beq	.L25
2042:../FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 249              		.loc 1 2042 0
 250 0062 0020     		movs	r0, #0
 251 0064 D5E7     		b	.L16
 252              	.L25:
2094:../FreeRTOS/Source/queue.c **** 			{
 253              		.loc 1 2094 0
 254 0066 25B1     		cbz	r5, .L22
2100:../FreeRTOS/Source/queue.c **** 			}
 255              		.loc 1 2100 0
 256 0068 013D     		subs	r5, r5, #1
 257              	.LVL32:
2042:../FreeRTOS/Source/queue.c **** UBaseType_t uxMessagesWaiting;
 258              		.loc 1 2042 0
 259 006a 0020     		movs	r0, #0
 260 006c D1E7     		b	.L16
 261              	.L20:
 262 006e 0020     		movs	r0, #0
 263 0070 CFE7     		b	.L16
 264              	.L22:
 265 0072 0020     		movs	r0, #0
 266 0074 CDE7     		b	.L16
 267              		.cfi_endproc
 268              	.LFE29:
 270              		.section	.text.prvCopyDataFromQueue,"ax",%progbits
 271              		.align	1
 272              		.syntax unified
 273              		.thumb
 274              		.thumb_func
 275              		.fpu fpv4-sp-d16
 277              	prvCopyDataFromQueue:
 278              	.LFB30:
2120:../FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 279              		.loc 1 2120 0
 280              		.cfi_startproc
 281              		@ args = 0, pretend = 0, frame = 0
 282              		@ frame_needed = 0, uses_anonymous_args = 0
 283              	.LVL33:
2121:../FreeRTOS/Source/queue.c **** 	{
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 47


 284              		.loc 1 2121 0
 285 0000 026C     		ldr	r2, [r0, #64]
 286 0002 72B1     		cbz	r2, .L30
2120:../FreeRTOS/Source/queue.c **** 	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 287              		.loc 1 2120 0
 288 0004 10B5     		push	{r4, lr}
 289              	.LCFI3:
 290              		.cfi_def_cfa_offset 8
 291              		.cfi_offset 4, -8
 292              		.cfi_offset 14, -4
2123:../FreeRTOS/Source/queue.c **** 		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of t
 293              		.loc 1 2123 0
 294 0006 C368     		ldr	r3, [r0, #12]
 295 0008 1344     		add	r3, r3, r2
 296 000a C360     		str	r3, [r0, #12]
2124:../FreeRTOS/Source/queue.c **** 		{
 297              		.loc 1 2124 0
 298 000c 4468     		ldr	r4, [r0, #4]
 299 000e A342     		cmp	r3, r4
 300 0010 01D3     		bcc	.L28
2126:../FreeRTOS/Source/queue.c **** 		}
 301              		.loc 1 2126 0
 302 0012 0368     		ldr	r3, [r0]
 303 0014 C360     		str	r3, [r0, #12]
 304              	.L28:
 305 0016 0C46     		mov	r4, r1
2132:../FreeRTOS/Source/queue.c **** 	}
 306              		.loc 1 2132 0
 307 0018 C168     		ldr	r1, [r0, #12]
 308              	.LVL34:
 309 001a 2046     		mov	r0, r4
 310              	.LVL35:
 311 001c FFF7FEFF 		bl	memcpy
 312              	.LVL36:
2134:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 313              		.loc 1 2134 0
 314 0020 10BD     		pop	{r4, pc}
 315              	.LVL37:
 316              	.L30:
 317              	.LCFI4:
 318              		.cfi_def_cfa_offset 0
 319              		.cfi_restore 4
 320              		.cfi_restore 14
 321 0022 7047     		bx	lr
 322              		.cfi_endproc
 323              	.LFE30:
 325              		.section	.text.prvUnlockQueue,"ax",%progbits
 326              		.align	1
 327              		.syntax unified
 328              		.thumb
 329              		.thumb_func
 330              		.fpu fpv4-sp-d16
 332              	prvUnlockQueue:
 333              	.LFB31:
2138:../FreeRTOS/Source/queue.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED. */
 334              		.loc 1 2138 0
 335              		.cfi_startproc
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 48


 336              		@ args = 0, pretend = 0, frame = 0
 337              		@ frame_needed = 0, uses_anonymous_args = 0
 338              	.LVL38:
 339 0000 38B5     		push	{r3, r4, r5, lr}
 340              	.LCFI5:
 341              		.cfi_def_cfa_offset 16
 342              		.cfi_offset 3, -16
 343              		.cfi_offset 4, -12
 344              		.cfi_offset 5, -8
 345              		.cfi_offset 14, -4
 346 0002 0546     		mov	r5, r0
2145:../FreeRTOS/Source/queue.c **** 	{
 347              		.loc 1 2145 0
 348 0004 FFF7FEFF 		bl	vPortEnterCritical
 349              	.LVL39:
 350              	.LBB101:
2147:../FreeRTOS/Source/queue.c **** 
 351              		.loc 1 2147 0
 352 0008 95F84540 		ldrb	r4, [r5, #69]	@ zero_extendqisi2
 353 000c 64B2     		sxtb	r4, r4
 354              	.LVL40:
2150:../FreeRTOS/Source/queue.c **** 		{
 355              		.loc 1 2150 0
 356 000e 03E0     		b	.L34
 357              	.L43:
2204:../FreeRTOS/Source/queue.c **** 					}
 358              		.loc 1 2204 0
 359 0010 FFF7FEFF 		bl	vTaskMissedYield
 360              	.LVL41:
 361              	.L36:
2218:../FreeRTOS/Source/queue.c **** 		}
 362              		.loc 1 2218 0
 363 0014 013C     		subs	r4, r4, #1
 364              	.LVL42:
 365 0016 64B2     		sxtb	r4, r4
 366              	.LVL43:
 367              	.L34:
2150:../FreeRTOS/Source/queue.c **** 		{
 368              		.loc 1 2150 0
 369 0018 002C     		cmp	r4, #0
 370 001a 08DD     		ble	.L35
2198:../FreeRTOS/Source/queue.c **** 				{
 371              		.loc 1 2198 0
 372 001c 6B6A     		ldr	r3, [r5, #36]
 373 001e 33B1     		cbz	r3, .L35
2200:../FreeRTOS/Source/queue.c **** 					{
 374              		.loc 1 2200 0
 375 0020 05F12400 		add	r0, r5, #36
 376 0024 FFF7FEFF 		bl	xTaskRemoveFromEventList
 377              	.LVL44:
 378 0028 0028     		cmp	r0, #0
 379 002a F3D0     		beq	.L36
 380 002c F0E7     		b	.L43
 381              	.L35:
2221:../FreeRTOS/Source/queue.c **** 	}
 382              		.loc 1 2221 0
 383 002e FF23     		movs	r3, #255
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 49


 384 0030 85F84530 		strb	r3, [r5, #69]
 385              	.LBE101:
2223:../FreeRTOS/Source/queue.c **** 
 386              		.loc 1 2223 0
 387 0034 FFF7FEFF 		bl	vPortExitCritical
 388              	.LVL45:
2226:../FreeRTOS/Source/queue.c **** 	{
 389              		.loc 1 2226 0
 390 0038 FFF7FEFF 		bl	vPortEnterCritical
 391              	.LVL46:
 392              	.LBB102:
2228:../FreeRTOS/Source/queue.c **** 
 393              		.loc 1 2228 0
 394 003c 95F84440 		ldrb	r4, [r5, #68]	@ zero_extendqisi2
 395              	.LVL47:
 396 0040 64B2     		sxtb	r4, r4
 397              	.LVL48:
2230:../FreeRTOS/Source/queue.c **** 		{
 398              		.loc 1 2230 0
 399 0042 03E0     		b	.L38
 400              	.L44:
2236:../FreeRTOS/Source/queue.c **** 				}
 401              		.loc 1 2236 0
 402 0044 FFF7FEFF 		bl	vTaskMissedYield
 403              	.LVL49:
 404              	.L40:
2243:../FreeRTOS/Source/queue.c **** 			}
 405              		.loc 1 2243 0
 406 0048 013C     		subs	r4, r4, #1
 407              	.LVL50:
 408 004a 64B2     		sxtb	r4, r4
 409              	.LVL51:
 410              	.L38:
2230:../FreeRTOS/Source/queue.c **** 		{
 411              		.loc 1 2230 0
 412 004c 002C     		cmp	r4, #0
 413 004e 08DD     		ble	.L39
2232:../FreeRTOS/Source/queue.c **** 			{
 414              		.loc 1 2232 0
 415 0050 2B69     		ldr	r3, [r5, #16]
 416 0052 33B1     		cbz	r3, .L39
2234:../FreeRTOS/Source/queue.c **** 				{
 417              		.loc 1 2234 0
 418 0054 05F11000 		add	r0, r5, #16
 419 0058 FFF7FEFF 		bl	xTaskRemoveFromEventList
 420              	.LVL52:
 421 005c 0028     		cmp	r0, #0
 422 005e F3D0     		beq	.L40
 423 0060 F0E7     		b	.L44
 424              	.L39:
2251:../FreeRTOS/Source/queue.c **** 	}
 425              		.loc 1 2251 0
 426 0062 FF23     		movs	r3, #255
 427 0064 85F84430 		strb	r3, [r5, #68]
 428              	.LBE102:
2253:../FreeRTOS/Source/queue.c **** }
 429              		.loc 1 2253 0
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 50


 430 0068 FFF7FEFF 		bl	vPortExitCritical
 431              	.LVL53:
2254:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 432              		.loc 1 2254 0
 433 006c 38BD     		pop	{r3, r4, r5, pc}
 434              		.cfi_endproc
 435              	.LFE31:
 437              		.section	.text.xQueueGenericReset,"ax",%progbits
 438              		.align	1
 439              		.global	xQueueGenericReset
 440              		.syntax unified
 441              		.thumb
 442              		.thumb_func
 443              		.fpu fpv4-sp-d16
 445              	xQueueGenericReset:
 446              	.LFB5:
 248:../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 447              		.loc 1 248 0
 448              		.cfi_startproc
 449              		@ args = 0, pretend = 0, frame = 0
 450              		@ frame_needed = 0, uses_anonymous_args = 0
 451              	.LVL54:
 452 0000 38B5     		push	{r3, r4, r5, lr}
 453              	.LCFI6:
 454              		.cfi_def_cfa_offset 16
 455              		.cfi_offset 3, -16
 456              		.cfi_offset 4, -12
 457              		.cfi_offset 5, -8
 458              		.cfi_offset 14, -4
 459              	.LVL55:
 251:../FreeRTOS/Source/queue.c **** 
 460              		.loc 1 251 0
 461 0002 40B9     		cbnz	r0, .L46
 462              	.LBB103:
 463              	.LBB104:
 464              		.file 2 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 51


  22:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
  54:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 52


  79:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
 111:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 53


 136:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 168:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 54


 193:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 465              		.loc 2 195 0
 466              		.syntax unified
 467              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 468 0004 4FF05003 			mov r3, #80												
 469 0008 83F31188 		msr basepri, r3											
 470 000c BFF36F8F 		isb														
 471 0010 BFF34F8F 		dsb														
 472              	
 473              	@ 0 "" 2
 474              	.LVL56:
 475              		.thumb
 476              		.syntax unified
 477              	.L47:
 478 0014 FEE7     		b	.L47
 479              	.L46:
 480 0016 0446     		mov	r4, r0
 481 0018 0D46     		mov	r5, r1
 482              	.LBE104:
 483              	.LBE103:
 253:../FreeRTOS/Source/queue.c **** 	{
 484              		.loc 1 253 0
 485 001a FFF7FEFF 		bl	vPortEnterCritical
 486              	.LVL57:
 255:../FreeRTOS/Source/queue.c **** 		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 487              		.loc 1 255 0
 488 001e 2168     		ldr	r1, [r4]
 489 0020 E26B     		ldr	r2, [r4, #60]
 490 0022 236C     		ldr	r3, [r4, #64]
 491 0024 03FB0210 		mla	r0, r3, r2, r1
 492 0028 6060     		str	r0, [r4, #4]
 256:../FreeRTOS/Source/queue.c **** 		pxQueue->pcWriteTo = pxQueue->pcHead;
 493              		.loc 1 256 0
 494 002a 0020     		movs	r0, #0
 495 002c A063     		str	r0, [r4, #56]
 257:../FreeRTOS/Source/queue.c **** 		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue-
 496              		.loc 1 257 0
 497 002e A160     		str	r1, [r4, #8]
 258:../FreeRTOS/Source/queue.c **** 		pxQueue->cRxLock = queueUNLOCKED;
 498              		.loc 1 258 0
 499 0030 013A     		subs	r2, r2, #1
 500 0032 02FB0313 		mla	r3, r2, r3, r1
 501 0036 E360     		str	r3, [r4, #12]
 259:../FreeRTOS/Source/queue.c **** 		pxQueue->cTxLock = queueUNLOCKED;
 502              		.loc 1 259 0
 503 0038 FF23     		movs	r3, #255
 504 003a 84F84430 		strb	r3, [r4, #68]
 260:../FreeRTOS/Source/queue.c **** 
 505              		.loc 1 260 0
 506 003e 84F84530 		strb	r3, [r4, #69]
 262:../FreeRTOS/Source/queue.c **** 		{
 507              		.loc 1 262 0
 508 0042 A5B9     		cbnz	r5, .L48
 269:../FreeRTOS/Source/queue.c **** 			{
 509              		.loc 1 269 0
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 55


 510 0044 2369     		ldr	r3, [r4, #16]
 511 0046 1BB9     		cbnz	r3, .L51
 512              	.L49:
 292:../FreeRTOS/Source/queue.c **** 
 513              		.loc 1 292 0
 514 0048 FFF7FEFF 		bl	vPortExitCritical
 515              	.LVL58:
 297:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 516              		.loc 1 297 0
 517 004c 0120     		movs	r0, #1
 518 004e 38BD     		pop	{r3, r4, r5, pc}
 519              	.LVL59:
 520              	.L51:
 271:../FreeRTOS/Source/queue.c **** 				{
 521              		.loc 1 271 0
 522 0050 04F11000 		add	r0, r4, #16
 523 0054 FFF7FEFF 		bl	xTaskRemoveFromEventList
 524              	.LVL60:
 525 0058 0028     		cmp	r0, #0
 526 005a F5D0     		beq	.L49
 273:../FreeRTOS/Source/queue.c **** 				}
 527              		.loc 1 273 0
 528 005c 084B     		ldr	r3, .L52
 529 005e 4FF08052 		mov	r2, #268435456
 530 0062 1A60     		str	r2, [r3]
 531              		.syntax unified
 532              	@ 273 "../FreeRTOS/Source/queue.c" 1
 533 0064 BFF34F8F 		dsb
 534              	@ 0 "" 2
 535              	@ 273 "../FreeRTOS/Source/queue.c" 1
 536 0068 BFF36F8F 		isb
 537              	@ 0 "" 2
 538              		.thumb
 539              		.syntax unified
 540 006c ECE7     		b	.L49
 541              	.L48:
 288:../FreeRTOS/Source/queue.c **** 			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 542              		.loc 1 288 0
 543 006e 04F11000 		add	r0, r4, #16
 544 0072 FFF7FEFF 		bl	vListInitialise
 545              	.LVL61:
 289:../FreeRTOS/Source/queue.c **** 		}
 546              		.loc 1 289 0
 547 0076 04F12400 		add	r0, r4, #36
 548 007a FFF7FEFF 		bl	vListInitialise
 549              	.LVL62:
 550 007e E3E7     		b	.L49
 551              	.L53:
 552              		.align	2
 553              	.L52:
 554 0080 04ED00E0 		.word	-536810236
 555              		.cfi_endproc
 556              	.LFE5:
 558              		.section	.text.prvInitialiseNewQueue,"ax",%progbits
 559              		.align	1
 560              		.syntax unified
 561              		.thumb
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 56


 562              		.thumb_func
 563              		.fpu fpv4-sp-d16
 565              	prvInitialiseNewQueue:
 566              	.LFB7:
 409:../FreeRTOS/Source/queue.c **** 	/* Remove compiler warnings about unused parameters should
 567              		.loc 1 409 0
 568              		.cfi_startproc
 569              		@ args = 4, pretend = 0, frame = 0
 570              		@ frame_needed = 0, uses_anonymous_args = 0
 571              	.LVL63:
 572 0000 38B5     		push	{r3, r4, r5, lr}
 573              	.LCFI7:
 574              		.cfi_def_cfa_offset 16
 575              		.cfi_offset 3, -16
 576              		.cfi_offset 4, -12
 577              		.cfi_offset 5, -8
 578              		.cfi_offset 14, -4
 579 0002 1D46     		mov	r5, r3
 580 0004 049C     		ldr	r4, [sp, #16]
 414:../FreeRTOS/Source/queue.c **** 	{
 581              		.loc 1 414 0
 582 0006 0B46     		mov	r3, r1
 583              	.LVL64:
 584 0008 49B1     		cbz	r1, .L58
 425:../FreeRTOS/Source/queue.c **** 	}
 585              		.loc 1 425 0
 586 000a 2260     		str	r2, [r4]
 587              	.L56:
 430:../FreeRTOS/Source/queue.c **** 	pxNewQueue->uxItemSize = uxItemSize;
 588              		.loc 1 430 0
 589 000c E063     		str	r0, [r4, #60]
 431:../FreeRTOS/Source/queue.c **** 	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 590              		.loc 1 431 0
 591 000e 2364     		str	r3, [r4, #64]
 432:../FreeRTOS/Source/queue.c **** 
 592              		.loc 1 432 0
 593 0010 0121     		movs	r1, #1
 594              	.LVL65:
 595 0012 2046     		mov	r0, r4
 596              	.LVL66:
 597 0014 FFF7FEFF 		bl	xQueueGenericReset
 598              	.LVL67:
 436:../FreeRTOS/Source/queue.c **** 	}
 599              		.loc 1 436 0
 600 0018 84F84C50 		strb	r5, [r4, #76]
 447:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 601              		.loc 1 447 0
 602 001c 38BD     		pop	{r3, r4, r5, pc}
 603              	.LVL68:
 604              	.L58:
 420:../FreeRTOS/Source/queue.c **** 	}
 605              		.loc 1 420 0
 606 001e 2460     		str	r4, [r4]
 607 0020 F4E7     		b	.L56
 608              		.cfi_endproc
 609              	.LFE7:
 611              		.section	.text.xQueueGenericCreate,"ax",%progbits
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 57


 612              		.align	1
 613              		.global	xQueueGenericCreate
 614              		.syntax unified
 615              		.thumb
 616              		.thumb_func
 617              		.fpu fpv4-sp-d16
 619              	xQueueGenericCreate:
 620              	.LFB6:
 359:../FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 621              		.loc 1 359 0
 622              		.cfi_startproc
 623              		@ args = 0, pretend = 0, frame = 0
 624              		@ frame_needed = 0, uses_anonymous_args = 0
 625              	.LVL69:
 364:../FreeRTOS/Source/queue.c **** 
 626              		.loc 1 364 0
 627 0000 40B9     		cbnz	r0, .L60
 628              	.LBB105:
 629              	.LBB106:
 630              		.loc 2 195 0
 631              		.syntax unified
 632              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 633 0002 4FF05003 			mov r3, #80												
 634 0006 83F31188 		msr basepri, r3											
 635 000a BFF36F8F 		isb														
 636 000e BFF34F8F 		dsb														
 637              	
 638              	@ 0 "" 2
 639              	.LVL70:
 640              		.thumb
 641              		.syntax unified
 642              	.L61:
 643 0012 FEE7     		b	.L61
 644              	.L60:
 645              	.LBE106:
 646              	.LBE105:
 359:../FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 647              		.loc 1 359 0
 648 0014 F0B5     		push	{r4, r5, r6, r7, lr}
 649              	.LCFI8:
 650              		.cfi_def_cfa_offset 20
 651              		.cfi_offset 4, -20
 652              		.cfi_offset 5, -16
 653              		.cfi_offset 6, -12
 654              		.cfi_offset 7, -8
 655              		.cfi_offset 14, -4
 656 0016 83B0     		sub	sp, sp, #12
 657              	.LCFI9:
 658              		.cfi_def_cfa_offset 32
 659 0018 0546     		mov	r5, r0
 366:../FreeRTOS/Source/queue.c **** 		{
 660              		.loc 1 366 0
 661 001a 11B1     		cbz	r1, .L64
 375:../FreeRTOS/Source/queue.c **** 		}
 662              		.loc 1 375 0
 663 001c 01FB00F0 		mul	r0, r1, r0
 664              	.LVL71:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 58


 665 0020 00E0     		b	.L62
 666              	.LVL72:
 667              	.L64:
 369:../FreeRTOS/Source/queue.c **** 		}
 668              		.loc 1 369 0
 669 0022 0020     		movs	r0, #0
 670              	.LVL73:
 671              	.L62:
 672 0024 1746     		mov	r7, r2
 673 0026 0C46     		mov	r4, r1
 674              	.LVL74:
 378:../FreeRTOS/Source/queue.c **** 
 675              		.loc 1 378 0
 676 0028 5030     		adds	r0, r0, #80
 677              	.LVL75:
 678 002a FFF7FEFF 		bl	pvPortMalloc
 679              	.LVL76:
 380:../FreeRTOS/Source/queue.c **** 		{
 680              		.loc 1 380 0
 681 002e 0646     		mov	r6, r0
 682 0030 38B1     		cbz	r0, .L59
 683              	.LVL77:
 395:../FreeRTOS/Source/queue.c **** 		}
 684              		.loc 1 395 0
 685 0032 0090     		str	r0, [sp]
 686 0034 3B46     		mov	r3, r7
 687 0036 00F15002 		add	r2, r0, #80
 688              	.LVL78:
 689 003a 2146     		mov	r1, r4
 690 003c 2846     		mov	r0, r5
 691              	.LVL79:
 692 003e FFF7FEFF 		bl	prvInitialiseNewQueue
 693              	.LVL80:
 694              	.L59:
 403:../FreeRTOS/Source/queue.c **** 
 695              		.loc 1 403 0
 696 0042 3046     		mov	r0, r6
 697 0044 03B0     		add	sp, sp, #12
 698              	.LCFI10:
 699              		.cfi_def_cfa_offset 20
 700              		@ sp needed
 701 0046 F0BD     		pop	{r4, r5, r6, r7, pc}
 702              		.cfi_endproc
 703              	.LFE6:
 705              		.section	.text.xQueueCreateCountingSemaphore,"ax",%progbits
 706              		.align	1
 707              		.global	xQueueCreateCountingSemaphore
 708              		.syntax unified
 709              		.thumb
 710              		.thumb_func
 711              		.fpu fpv4-sp-d16
 713              	xQueueCreateCountingSemaphore:
 714              	.LFB12:
 700:../FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 715              		.loc 1 700 0
 716              		.cfi_startproc
 717              		@ args = 0, pretend = 0, frame = 0
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 59


 718              		@ frame_needed = 0, uses_anonymous_args = 0
 719              	.LVL81:
 703:../FreeRTOS/Source/queue.c **** 		configASSERT( uxInitialCount <= uxMaxCount );
 720              		.loc 1 703 0
 721 0000 40B9     		cbnz	r0, .L68
 722              	.LBB107:
 723              	.LBB108:
 724              		.loc 2 195 0
 725              		.syntax unified
 726              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 727 0002 4FF05003 			mov r3, #80												
 728 0006 83F31188 		msr basepri, r3											
 729 000a BFF36F8F 		isb														
 730 000e BFF34F8F 		dsb														
 731              	
 732              	@ 0 "" 2
 733              	.LVL82:
 734              		.thumb
 735              		.syntax unified
 736              	.L69:
 737 0012 FEE7     		b	.L69
 738              	.L68:
 739              	.LBE108:
 740              	.LBE107:
 704:../FreeRTOS/Source/queue.c **** 
 741              		.loc 1 704 0
 742 0014 8842     		cmp	r0, r1
 743 0016 08D2     		bcs	.L70
 744              	.LBB109:
 745              	.LBB110:
 746              		.loc 2 195 0
 747              		.syntax unified
 748              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 749 0018 4FF05003 			mov r3, #80												
 750 001c 83F31188 		msr basepri, r3											
 751 0020 BFF36F8F 		isb														
 752 0024 BFF34F8F 		dsb														
 753              	
 754              	@ 0 "" 2
 755              	.LVL83:
 756              		.thumb
 757              		.syntax unified
 758              	.L71:
 759 0028 FEE7     		b	.L71
 760              	.L70:
 761              	.LBE110:
 762              	.LBE109:
 700:../FreeRTOS/Source/queue.c **** 	QueueHandle_t xHandle;
 763              		.loc 1 700 0
 764 002a 10B5     		push	{r4, lr}
 765              	.LCFI11:
 766              		.cfi_def_cfa_offset 8
 767              		.cfi_offset 4, -8
 768              		.cfi_offset 14, -4
 769 002c 0C46     		mov	r4, r1
 706:../FreeRTOS/Source/queue.c **** 
 770              		.loc 1 706 0
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 60


 771 002e 0222     		movs	r2, #2
 772 0030 0021     		movs	r1, #0
 773              	.LVL84:
 774 0032 FFF7FEFF 		bl	xQueueGenericCreate
 775              	.LVL85:
 708:../FreeRTOS/Source/queue.c **** 		{
 776              		.loc 1 708 0
 777 0036 0346     		mov	r3, r0
 778 0038 00B1     		cbz	r0, .L67
 710:../FreeRTOS/Source/queue.c **** 
 779              		.loc 1 710 0
 780 003a 8463     		str	r4, [r0, #56]
 781              	.L67:
 720:../FreeRTOS/Source/queue.c **** 
 782              		.loc 1 720 0
 783 003c 1846     		mov	r0, r3
 784              	.LVL86:
 785 003e 10BD     		pop	{r4, pc}
 786              		.cfi_endproc
 787              	.LFE12:
 789              		.section	.text.xQueueGenericSend,"ax",%progbits
 790              		.align	1
 791              		.global	xQueueGenericSend
 792              		.syntax unified
 793              		.thumb
 794              		.thumb_func
 795              		.fpu fpv4-sp-d16
 797              	xQueueGenericSend:
 798              	.LFB13:
 726:../FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 799              		.loc 1 726 0
 800              		.cfi_startproc
 801              		@ args = 0, pretend = 0, frame = 16
 802              		@ frame_needed = 0, uses_anonymous_args = 0
 803              	.LVL87:
 804 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 805              	.LCFI12:
 806              		.cfi_def_cfa_offset 20
 807              		.cfi_offset 4, -20
 808              		.cfi_offset 5, -16
 809              		.cfi_offset 6, -12
 810              		.cfi_offset 7, -8
 811              		.cfi_offset 14, -4
 812 0002 85B0     		sub	sp, sp, #20
 813              	.LCFI13:
 814              		.cfi_def_cfa_offset 40
 815 0004 0192     		str	r2, [sp, #4]
 816              	.LVL88:
 731:../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 817              		.loc 1 731 0
 818 0006 60B1     		cbz	r0, .L100
 819 0008 0446     		mov	r4, r0
 732:../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 820              		.loc 1 732 0
 821 000a 99B9     		cbnz	r1, .L78
 732:../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 822              		.loc 1 732 0 is_stmt 0 discriminator 2
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 61


 823 000c 026C     		ldr	r2, [r0, #64]
 824              	.LVL89:
 825 000e 8AB1     		cbz	r2, .L78
 826              	.LBB111:
 827              	.LBB112:
 828              		.loc 2 195 0 is_stmt 1
 829              		.syntax unified
 830              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 831 0010 4FF05003 			mov r3, #80												
 832 0014 83F31188 		msr basepri, r3											
 833 0018 BFF36F8F 		isb														
 834 001c BFF34F8F 		dsb														
 835              	
 836              	@ 0 "" 2
 837              	.LVL90:
 838              		.thumb
 839              		.syntax unified
 840              	.L79:
 841 0020 FEE7     		b	.L79
 842              	.LVL91:
 843              	.L100:
 844              	.LBE112:
 845              	.LBE111:
 846              	.LBB113:
 847              	.LBB114:
 848              		.syntax unified
 849              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 850 0022 4FF05003 			mov r3, #80												
 851 0026 83F31188 		msr basepri, r3											
 852 002a BFF36F8F 		isb														
 853 002e BFF34F8F 		dsb														
 854              	
 855              	@ 0 "" 2
 856              	.LVL92:
 857              		.thumb
 858              		.syntax unified
 859              	.L77:
 860 0032 FEE7     		b	.L77
 861              	.LVL93:
 862              	.L78:
 863              	.LBE114:
 864              	.LBE113:
 733:../FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 865              		.loc 1 733 0
 866 0034 022B     		cmp	r3, #2
 867 0036 0BD1     		bne	.L80
 733:../FreeRTOS/Source/queue.c **** 	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
 868              		.loc 1 733 0 is_stmt 0 discriminator 2
 869 0038 E26B     		ldr	r2, [r4, #60]
 870 003a 012A     		cmp	r2, #1
 871 003c 08D0     		beq	.L80
 872              	.LBB115:
 873              	.LBB116:
 874              		.loc 2 195 0 is_stmt 1
 875              		.syntax unified
 876              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 877 003e 4FF05003 			mov r3, #80												
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 62


 878 0042 83F31188 		msr basepri, r3											
 879 0046 BFF36F8F 		isb														
 880 004a BFF34F8F 		dsb														
 881              	
 882              	@ 0 "" 2
 883              	.LVL94:
 884              		.thumb
 885              		.syntax unified
 886              	.L81:
 887 004e FEE7     		b	.L81
 888              	.LVL95:
 889              	.L80:
 890 0050 1E46     		mov	r6, r3
 891 0052 0F46     		mov	r7, r1
 892              	.LBE116:
 893              	.LBE115:
 736:../FreeRTOS/Source/queue.c **** 	}
 894              		.loc 1 736 0
 895 0054 FFF7FEFF 		bl	xTaskGetSchedulerState
 896              	.LVL96:
 897 0058 50B9     		cbnz	r0, .L97
 736:../FreeRTOS/Source/queue.c **** 	}
 898              		.loc 1 736 0 is_stmt 0 discriminator 2
 899 005a 019B     		ldr	r3, [sp, #4]
 900 005c 53B1     		cbz	r3, .L98
 901              	.LBB117:
 902              	.LBB118:
 903              		.loc 2 195 0 is_stmt 1
 904              		.syntax unified
 905              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 906 005e 4FF05003 			mov r3, #80												
 907 0062 83F31188 		msr basepri, r3											
 908 0066 BFF36F8F 		isb														
 909 006a BFF34F8F 		dsb														
 910              	
 911              	@ 0 "" 2
 912              	.LVL97:
 913              		.thumb
 914              		.syntax unified
 915              	.L83:
 916 006e FEE7     		b	.L83
 917              	.L97:
 918              	.LBE118:
 919              	.LBE117:
 920 0070 0025     		movs	r5, #0
 921 0072 3AE0     		b	.L84
 922              	.L98:
 923 0074 0025     		movs	r5, #0
 924 0076 38E0     		b	.L84
 925              	.LVL98:
 926              	.L85:
 755:../FreeRTOS/Source/queue.c **** 
 927              		.loc 1 755 0
 928 0078 3246     		mov	r2, r6
 929 007a 3946     		mov	r1, r7
 930 007c 2046     		mov	r0, r4
 931 007e FFF7FEFF 		bl	prvCopyDataToQueue
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 63


 932              	.LVL99:
 810:../FreeRTOS/Source/queue.c **** 					{
 933              		.loc 1 810 0
 934 0082 636A     		ldr	r3, [r4, #36]
 935 0084 4BB9     		cbnz	r3, .L101
 825:../FreeRTOS/Source/queue.c **** 					{
 936              		.loc 1 825 0
 937 0086 A8B1     		cbz	r0, .L88
 831:../FreeRTOS/Source/queue.c **** 					}
 938              		.loc 1 831 0
 939 0088 3B4B     		ldr	r3, .L106
 940 008a 4FF08052 		mov	r2, #268435456
 941 008e 1A60     		str	r2, [r3]
 942              		.syntax unified
 943              	@ 831 "../FreeRTOS/Source/queue.c" 1
 944 0090 BFF34F8F 		dsb
 945              	@ 0 "" 2
 946              	@ 831 "../FreeRTOS/Source/queue.c" 1
 947 0094 BFF36F8F 		isb
 948              	@ 0 "" 2
 949              		.thumb
 950              		.syntax unified
 951 0098 0CE0     		b	.L88
 952              	.L101:
 812:../FreeRTOS/Source/queue.c **** 						{
 953              		.loc 1 812 0
 954 009a 04F12400 		add	r0, r4, #36
 955              	.LVL100:
 956 009e FFF7FEFF 		bl	xTaskRemoveFromEventList
 957              	.LVL101:
 958 00a2 38B1     		cbz	r0, .L88
 818:../FreeRTOS/Source/queue.c **** 						}
 959              		.loc 1 818 0
 960 00a4 344B     		ldr	r3, .L106
 961 00a6 4FF08052 		mov	r2, #268435456
 962 00aa 1A60     		str	r2, [r3]
 963              		.syntax unified
 964              	@ 818 "../FreeRTOS/Source/queue.c" 1
 965 00ac BFF34F8F 		dsb
 966              	@ 0 "" 2
 967              	@ 818 "../FreeRTOS/Source/queue.c" 1
 968 00b0 BFF36F8F 		isb
 969              	@ 0 "" 2
 970              		.thumb
 971              		.syntax unified
 972              	.L88:
 840:../FreeRTOS/Source/queue.c **** 				return pdPASS;
 973              		.loc 1 840 0
 974 00b4 FFF7FEFF 		bl	vPortExitCritical
 975              	.LVL102:
 841:../FreeRTOS/Source/queue.c **** 			}
 976              		.loc 1 841 0
 977 00b8 0120     		movs	r0, #1
 978              	.L75:
 920:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 979              		.loc 1 920 0
 980 00ba 05B0     		add	sp, sp, #20
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 64


 981              	.LCFI14:
 982              		.cfi_remember_state
 983              		.cfi_def_cfa_offset 20
 984              		@ sp needed
 985 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 986              	.LVL103:
 987              	.L102:
 988              	.LCFI15:
 989              		.cfi_restore_state
 849:../FreeRTOS/Source/queue.c **** 
 990              		.loc 1 849 0
 991 00be FFF7FEFF 		bl	vPortExitCritical
 992              	.LVL104:
 854:../FreeRTOS/Source/queue.c **** 				}
 993              		.loc 1 854 0
 994 00c2 0020     		movs	r0, #0
 995 00c4 F9E7     		b	.L75
 996              	.L103:
 860:../FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 997              		.loc 1 860 0
 998 00c6 02A8     		add	r0, sp, #8
 999 00c8 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1000              	.LVL105:
 861:../FreeRTOS/Source/queue.c **** 				}
 1001              		.loc 1 861 0
 1002 00cc 0125     		movs	r5, #1
 1003 00ce 19E0     		b	.L91
 1004              	.LVL106:
 1005              	.L104:
 876:../FreeRTOS/Source/queue.c **** 
 1006              		.loc 1 876 0 discriminator 1
 1007 00d0 0023     		movs	r3, #0
 1008 00d2 84F84430 		strb	r3, [r4, #68]
 1009 00d6 21E0     		b	.L92
 1010              	.L105:
 876:../FreeRTOS/Source/queue.c **** 
 1011              		.loc 1 876 0 is_stmt 0 discriminator 4
 1012 00d8 0023     		movs	r3, #0
 1013 00da 84F84530 		strb	r3, [r4, #69]
 1014 00de 23E0     		b	.L93
 1015              	.L95:
 906:../FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 1016              		.loc 1 906 0 is_stmt 1
 1017 00e0 2046     		mov	r0, r4
 1018 00e2 FFF7FEFF 		bl	prvUnlockQueue
 1019              	.LVL107:
 907:../FreeRTOS/Source/queue.c **** 			}
 1020              		.loc 1 907 0
 1021 00e6 FFF7FEFF 		bl	xTaskResumeAll
 1022              	.LVL108:
 1023              	.L84:
 746:../FreeRTOS/Source/queue.c **** 		{
 1024              		.loc 1 746 0
 1025 00ea FFF7FEFF 		bl	vPortEnterCritical
 1026              	.LVL109:
 752:../FreeRTOS/Source/queue.c **** 			{
 1027              		.loc 1 752 0
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 65


 1028 00ee A26B     		ldr	r2, [r4, #56]
 1029 00f0 E36B     		ldr	r3, [r4, #60]
 1030 00f2 9A42     		cmp	r2, r3
 1031 00f4 C0D3     		bcc	.L85
 752:../FreeRTOS/Source/queue.c **** 			{
 1032              		.loc 1 752 0 is_stmt 0 discriminator 1
 1033 00f6 022E     		cmp	r6, #2
 1034 00f8 BED0     		beq	.L85
 845:../FreeRTOS/Source/queue.c **** 				{
 1035              		.loc 1 845 0 is_stmt 1
 1036 00fa 019B     		ldr	r3, [sp, #4]
 1037 00fc 002B     		cmp	r3, #0
 1038 00fe DED0     		beq	.L102
 856:../FreeRTOS/Source/queue.c **** 				{
 1039              		.loc 1 856 0
 1040 0100 002D     		cmp	r5, #0
 1041 0102 E0D0     		beq	.L103
 1042              	.LVL110:
 1043              	.L91:
 870:../FreeRTOS/Source/queue.c **** 
 1044              		.loc 1 870 0
 1045 0104 FFF7FEFF 		bl	vPortExitCritical
 1046              	.LVL111:
 875:../FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 1047              		.loc 1 875 0
 1048 0108 FFF7FEFF 		bl	vTaskSuspendAll
 1049              	.LVL112:
 876:../FreeRTOS/Source/queue.c **** 
 1050              		.loc 1 876 0
 1051 010c FFF7FEFF 		bl	vPortEnterCritical
 1052              	.LVL113:
 1053 0110 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1054 0114 5BB2     		sxtb	r3, r3
 1055 0116 B3F1FF3F 		cmp	r3, #-1
 1056 011a D9D0     		beq	.L104
 1057              	.L92:
 876:../FreeRTOS/Source/queue.c **** 
 1058              		.loc 1 876 0 is_stmt 0 discriminator 3
 1059 011c 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1060 0120 5BB2     		sxtb	r3, r3
 1061 0122 B3F1FF3F 		cmp	r3, #-1
 1062 0126 D7D0     		beq	.L105
 1063              	.L93:
 876:../FreeRTOS/Source/queue.c **** 
 1064              		.loc 1 876 0 discriminator 6
 1065 0128 FFF7FEFF 		bl	vPortExitCritical
 1066              	.LVL114:
 879:../FreeRTOS/Source/queue.c **** 		{
 1067              		.loc 1 879 0 is_stmt 1 discriminator 6
 1068 012c 01A9     		add	r1, sp, #4
 1069 012e 02A8     		add	r0, sp, #8
 1070 0130 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1071              	.LVL115:
 1072 0134 C8B9     		cbnz	r0, .L94
 881:../FreeRTOS/Source/queue.c **** 			{
 1073              		.loc 1 881 0
 1074 0136 2046     		mov	r0, r4
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 66


 1075 0138 FFF7FEFF 		bl	prvIsQueueFull
 1076              	.LVL116:
 1077 013c 0028     		cmp	r0, #0
 1078 013e CFD0     		beq	.L95
 884:../FreeRTOS/Source/queue.c **** 
 1079              		.loc 1 884 0
 1080 0140 0199     		ldr	r1, [sp, #4]
 1081 0142 04F11000 		add	r0, r4, #16
 1082 0146 FFF7FEFF 		bl	vTaskPlaceOnEventList
 1083              	.LVL117:
 891:../FreeRTOS/Source/queue.c **** 
 1084              		.loc 1 891 0
 1085 014a 2046     		mov	r0, r4
 1086 014c FFF7FEFF 		bl	prvUnlockQueue
 1087              	.LVL118:
 898:../FreeRTOS/Source/queue.c **** 				{
 1088              		.loc 1 898 0
 1089 0150 FFF7FEFF 		bl	xTaskResumeAll
 1090              	.LVL119:
 1091 0154 0028     		cmp	r0, #0
 1092 0156 C8D1     		bne	.L84
 900:../FreeRTOS/Source/queue.c **** 				}
 1093              		.loc 1 900 0
 1094 0158 074B     		ldr	r3, .L106
 1095 015a 4FF08052 		mov	r2, #268435456
 1096 015e 1A60     		str	r2, [r3]
 1097              		.syntax unified
 1098              	@ 900 "../FreeRTOS/Source/queue.c" 1
 1099 0160 BFF34F8F 		dsb
 1100              	@ 0 "" 2
 1101              	@ 900 "../FreeRTOS/Source/queue.c" 1
 1102 0164 BFF36F8F 		isb
 1103              	@ 0 "" 2
 1104              		.thumb
 1105              		.syntax unified
 1106 0168 BFE7     		b	.L84
 1107              	.L94:
 913:../FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 1108              		.loc 1 913 0
 1109 016a 2046     		mov	r0, r4
 1110 016c FFF7FEFF 		bl	prvUnlockQueue
 1111              	.LVL120:
 914:../FreeRTOS/Source/queue.c **** 
 1112              		.loc 1 914 0
 1113 0170 FFF7FEFF 		bl	xTaskResumeAll
 1114              	.LVL121:
 917:../FreeRTOS/Source/queue.c **** 		}
 1115              		.loc 1 917 0
 1116 0174 0020     		movs	r0, #0
 1117 0176 A0E7     		b	.L75
 1118              	.L107:
 1119              		.align	2
 1120              	.L106:
 1121 0178 04ED00E0 		.word	-536810236
 1122              		.cfi_endproc
 1123              	.LFE13:
 1125              		.section	.text.prvInitialiseMutex,"ax",%progbits
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 67


 1126              		.align	1
 1127              		.syntax unified
 1128              		.thumb
 1129              		.thumb_func
 1130              		.fpu fpv4-sp-d16
 1132              	prvInitialiseMutex:
 1133              	.LFB8:
 453:../FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 1134              		.loc 1 453 0
 1135              		.cfi_startproc
 1136              		@ args = 0, pretend = 0, frame = 0
 1137              		@ frame_needed = 0, uses_anonymous_args = 0
 1138              	.LVL122:
 454:../FreeRTOS/Source/queue.c **** 		{
 1139              		.loc 1 454 0
 1140 0000 48B1     		cbz	r0, .L111
 453:../FreeRTOS/Source/queue.c **** 		if( pxNewQueue != NULL )
 1141              		.loc 1 453 0
 1142 0002 08B5     		push	{r3, lr}
 1143              	.LCFI16:
 1144              		.cfi_def_cfa_offset 8
 1145              		.cfi_offset 3, -8
 1146              		.cfi_offset 14, -4
 460:../FreeRTOS/Source/queue.c **** 			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 1147              		.loc 1 460 0
 1148 0004 0021     		movs	r1, #0
 1149 0006 4160     		str	r1, [r0, #4]
 461:../FreeRTOS/Source/queue.c **** 
 1150              		.loc 1 461 0
 1151 0008 0160     		str	r1, [r0]
 464:../FreeRTOS/Source/queue.c **** 
 1152              		.loc 1 464 0
 1153 000a C160     		str	r1, [r0, #12]
 469:../FreeRTOS/Source/queue.c **** 		}
 1154              		.loc 1 469 0
 1155 000c 0B46     		mov	r3, r1
 1156 000e 0A46     		mov	r2, r1
 1157 0010 FFF7FEFF 		bl	xQueueGenericSend
 1158              	.LVL123:
 475:../FreeRTOS/Source/queue.c **** 
 1159              		.loc 1 475 0
 1160 0014 08BD     		pop	{r3, pc}
 1161              	.LVL124:
 1162              	.L111:
 1163              	.LCFI17:
 1164              		.cfi_def_cfa_offset 0
 1165              		.cfi_restore 3
 1166              		.cfi_restore 14
 1167 0016 7047     		bx	lr
 1168              		.cfi_endproc
 1169              	.LFE8:
 1171              		.section	.text.xQueueCreateMutex,"ax",%progbits
 1172              		.align	1
 1173              		.global	xQueueCreateMutex
 1174              		.syntax unified
 1175              		.thumb
 1176              		.thumb_func
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 68


 1177              		.fpu fpv4-sp-d16
 1179              	xQueueCreateMutex:
 1180              	.LFB9:
 483:../FreeRTOS/Source/queue.c **** 	Queue_t *pxNewQueue;
 1181              		.loc 1 483 0
 1182              		.cfi_startproc
 1183              		@ args = 0, pretend = 0, frame = 0
 1184              		@ frame_needed = 0, uses_anonymous_args = 0
 1185              	.LVL125:
 1186 0000 10B5     		push	{r4, lr}
 1187              	.LCFI18:
 1188              		.cfi_def_cfa_offset 8
 1189              		.cfi_offset 4, -8
 1190              		.cfi_offset 14, -4
 1191              	.LVL126:
 487:../FreeRTOS/Source/queue.c **** 		prvInitialiseMutex( pxNewQueue );
 1192              		.loc 1 487 0
 1193 0002 0246     		mov	r2, r0
 1194 0004 0021     		movs	r1, #0
 1195 0006 0120     		movs	r0, #1
 1196              	.LVL127:
 1197 0008 FFF7FEFF 		bl	xQueueGenericCreate
 1198              	.LVL128:
 1199 000c 0446     		mov	r4, r0
 1200              	.LVL129:
 488:../FreeRTOS/Source/queue.c **** 
 1201              		.loc 1 488 0
 1202 000e FFF7FEFF 		bl	prvInitialiseMutex
 1203              	.LVL130:
 491:../FreeRTOS/Source/queue.c **** 
 1204              		.loc 1 491 0
 1205 0012 2046     		mov	r0, r4
 1206 0014 10BD     		pop	{r4, pc}
 1207              		.cfi_endproc
 1208              	.LFE9:
 1210              		.section	.text.xQueueGiveMutexRecursive,"ax",%progbits
 1211              		.align	1
 1212              		.global	xQueueGiveMutexRecursive
 1213              		.syntax unified
 1214              		.thumb
 1215              		.thumb_func
 1216              		.fpu fpv4-sp-d16
 1218              	xQueueGiveMutexRecursive:
 1219              	.LFB10:
 575:../FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 1220              		.loc 1 575 0
 1221              		.cfi_startproc
 1222              		@ args = 0, pretend = 0, frame = 0
 1223              		@ frame_needed = 0, uses_anonymous_args = 0
 1224              	.LVL131:
 1225 0000 38B5     		push	{r3, r4, r5, lr}
 1226              	.LCFI19:
 1227              		.cfi_def_cfa_offset 16
 1228              		.cfi_offset 3, -16
 1229              		.cfi_offset 4, -12
 1230              		.cfi_offset 5, -8
 1231              		.cfi_offset 14, -4
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 69


 1232              	.LVL132:
 579:../FreeRTOS/Source/queue.c **** 
 1233              		.loc 1 579 0
 1234 0002 40B9     		cbnz	r0, .L117
 1235              	.LBB119:
 1236              	.LBB120:
 1237              		.loc 2 195 0
 1238              		.syntax unified
 1239              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1240 0004 4FF05003 			mov r3, #80												
 1241 0008 83F31188 		msr basepri, r3											
 1242 000c BFF36F8F 		isb														
 1243 0010 BFF34F8F 		dsb														
 1244              	
 1245              	@ 0 "" 2
 1246              	.LVL133:
 1247              		.thumb
 1248              		.syntax unified
 1249              	.L118:
 1250 0014 FEE7     		b	.L118
 1251              	.L117:
 1252 0016 0446     		mov	r4, r0
 1253              	.LBE120:
 1254              	.LBE119:
 587:../FreeRTOS/Source/queue.c **** 		{
 1255              		.loc 1 587 0
 1256 0018 4568     		ldr	r5, [r0, #4]
 1257 001a FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 1258              	.LVL134:
 1259 001e 8542     		cmp	r5, r0
 1260 0020 01D0     		beq	.L123
 616:../FreeRTOS/Source/queue.c **** 
 1261              		.loc 1 616 0
 1262 0022 0020     		movs	r0, #0
 1263              	.L116:
 622:../FreeRTOS/Source/queue.c **** 
 1264              		.loc 1 622 0
 1265 0024 38BD     		pop	{r3, r4, r5, pc}
 1266              	.LVL135:
 1267              	.L123:
 596:../FreeRTOS/Source/queue.c **** 
 1268              		.loc 1 596 0
 1269 0026 E368     		ldr	r3, [r4, #12]
 1270 0028 013B     		subs	r3, r3, #1
 1271 002a E360     		str	r3, [r4, #12]
 599:../FreeRTOS/Source/queue.c **** 			{
 1272              		.loc 1 599 0
 1273 002c 33B9     		cbnz	r3, .L121
 603:../FreeRTOS/Source/queue.c **** 			}
 1274              		.loc 1 603 0
 1275 002e 1A46     		mov	r2, r3
 1276 0030 1946     		mov	r1, r3
 1277 0032 2046     		mov	r0, r4
 1278 0034 FFF7FEFF 		bl	xQueueGenericSend
 1279              	.LVL136:
 610:../FreeRTOS/Source/queue.c **** 		}
 1280              		.loc 1 610 0
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 70


 1281 0038 0120     		movs	r0, #1
 1282 003a F3E7     		b	.L116
 1283              	.L121:
 1284 003c 0120     		movs	r0, #1
 1285              	.LVL137:
 621:../FreeRTOS/Source/queue.c **** 	}
 1286              		.loc 1 621 0
 1287 003e F1E7     		b	.L116
 1288              		.cfi_endproc
 1289              	.LFE10:
 1291              		.section	.text.xQueueGenericSendFromISR,"ax",%progbits
 1292              		.align	1
 1293              		.global	xQueueGenericSendFromISR
 1294              		.syntax unified
 1295              		.thumb
 1296              		.thumb_func
 1297              		.fpu fpv4-sp-d16
 1299              	xQueueGenericSendFromISR:
 1300              	.LFB14:
 924:../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1301              		.loc 1 924 0
 1302              		.cfi_startproc
 1303              		@ args = 0, pretend = 0, frame = 0
 1304              		@ frame_needed = 0, uses_anonymous_args = 0
 1305              	.LVL138:
 1306 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1307              	.LCFI20:
 1308              		.cfi_def_cfa_offset 32
 1309              		.cfi_offset 3, -32
 1310              		.cfi_offset 4, -28
 1311              		.cfi_offset 5, -24
 1312              		.cfi_offset 6, -20
 1313              		.cfi_offset 7, -16
 1314              		.cfi_offset 8, -12
 1315              		.cfi_offset 9, -8
 1316              		.cfi_offset 14, -4
 1317              	.LVL139:
 929:../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 1318              		.loc 1 929 0
 1319 0004 60B1     		cbz	r0, .L139
 1320 0006 0446     		mov	r4, r0
 930:../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1321              		.loc 1 930 0
 1322 0008 99B9     		cbnz	r1, .L127
 930:../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 1323              		.loc 1 930 0 is_stmt 0 discriminator 2
 1324 000a 006C     		ldr	r0, [r0, #64]
 1325              	.LVL140:
 1326 000c 88B1     		cbz	r0, .L127
 1327              	.LBB121:
 1328              	.LBB122:
 1329              		.loc 2 195 0 is_stmt 1
 1330              		.syntax unified
 1331              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1332 000e 4FF05003 			mov r3, #80												
 1333 0012 83F31188 		msr basepri, r3											
 1334 0016 BFF36F8F 		isb														
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 71


 1335 001a BFF34F8F 		dsb														
 1336              	
 1337              	@ 0 "" 2
 1338              	.LVL141:
 1339              		.thumb
 1340              		.syntax unified
 1341              	.L128:
 1342 001e FEE7     		b	.L128
 1343              	.LVL142:
 1344              	.L139:
 1345              	.LBE122:
 1346              	.LBE121:
 1347              	.LBB123:
 1348              	.LBB124:
 1349              		.syntax unified
 1350              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1351 0020 4FF05003 			mov r3, #80												
 1352 0024 83F31188 		msr basepri, r3											
 1353 0028 BFF36F8F 		isb														
 1354 002c BFF34F8F 		dsb														
 1355              	
 1356              	@ 0 "" 2
 1357              	.LVL143:
 1358              		.thumb
 1359              		.syntax unified
 1360              	.L126:
 1361 0030 FEE7     		b	.L126
 1362              	.LVL144:
 1363              	.L127:
 1364              	.LBE124:
 1365              	.LBE123:
 931:../FreeRTOS/Source/queue.c **** 
 1366              		.loc 1 931 0
 1367 0032 022B     		cmp	r3, #2
 1368 0034 0BD1     		bne	.L129
 931:../FreeRTOS/Source/queue.c **** 
 1369              		.loc 1 931 0 is_stmt 0 discriminator 2
 1370 0036 E06B     		ldr	r0, [r4, #60]
 1371 0038 0128     		cmp	r0, #1
 1372 003a 08D0     		beq	.L129
 1373              	.LBB125:
 1374              	.LBB126:
 1375              		.loc 2 195 0 is_stmt 1
 1376              		.syntax unified
 1377              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1378 003c 4FF05003 			mov r3, #80												
 1379 0040 83F31188 		msr basepri, r3											
 1380 0044 BFF36F8F 		isb														
 1381 0048 BFF34F8F 		dsb														
 1382              	
 1383              	@ 0 "" 2
 1384              	.LVL145:
 1385              		.thumb
 1386              		.syntax unified
 1387              	.L130:
 1388 004c FEE7     		b	.L130
 1389              	.LVL146:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 72


 1390              	.L129:
 1391 004e 1F46     		mov	r7, r3
 1392 0050 9046     		mov	r8, r2
 1393 0052 8946     		mov	r9, r1
 1394              	.LBE126:
 1395              	.LBE125:
 947:../FreeRTOS/Source/queue.c **** 
 1396              		.loc 1 947 0
 1397 0054 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1398              	.LVL147:
 1399              	.LBB127:
 1400              	.LBB128:
 196:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1401              		.loc 2 211 0
 1402              		.syntax unified
 1403              	@ 211 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1404 0058 EFF31186 			mrs r6, basepri											
 1405 005c 4FF05003 		mov r3, #80												
 1406 0060 83F31188 		msr basepri, r3											
 1407 0064 BFF36F8F 		isb														
 1408 0068 BFF34F8F 		dsb														
 1409              	
 1410              	@ 0 "" 2
 1411              		.thumb
 1412              		.syntax unified
 1413              	.LBE128:
 1414              	.LBE127:
 956:../FreeRTOS/Source/queue.c **** 		{
 1415              		.loc 1 956 0
 1416 006c A26B     		ldr	r2, [r4, #56]
 1417 006e E36B     		ldr	r3, [r4, #60]
 1418 0070 9A42     		cmp	r2, r3
 1419 0072 03D3     		bcc	.L131
 956:../FreeRTOS/Source/queue.c **** 		{
 1420              		.loc 1 956 0 is_stmt 0 discriminator 1
 1421 0074 022F     		cmp	r7, #2
 1422 0076 01D0     		beq	.L131
1065:../FreeRTOS/Source/queue.c **** 		}
 1423              		.loc 1 1065 0 is_stmt 1
 1424 0078 0020     		movs	r0, #0
 1425 007a 0FE0     		b	.L132
 1426              	.L131:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 73


 1427              	.LBB129:
 958:../FreeRTOS/Source/queue.c **** 
 1428              		.loc 1 958 0
 1429 007c 94F84550 		ldrb	r5, [r4, #69]	@ zero_extendqisi2
 1430 0080 6DB2     		sxtb	r5, r5
 1431              	.LVL148:
 967:../FreeRTOS/Source/queue.c **** 
 1432              		.loc 1 967 0
 1433 0082 3A46     		mov	r2, r7
 1434 0084 4946     		mov	r1, r9
 1435 0086 2046     		mov	r0, r4
 1436 0088 FFF7FEFF 		bl	prvCopyDataToQueue
 1437              	.LVL149:
 971:../FreeRTOS/Source/queue.c **** 			{
 1438              		.loc 1 971 0
 1439 008c B5F1FF3F 		cmp	r5, #-1
 1440 0090 08D0     		beq	.L140
1057:../FreeRTOS/Source/queue.c **** 			}
 1441              		.loc 1 1057 0
 1442 0092 6B1C     		adds	r3, r5, #1
 1443 0094 5BB2     		sxtb	r3, r3
 1444 0096 84F84530 		strb	r3, [r4, #69]
1060:../FreeRTOS/Source/queue.c **** 		}
 1445              		.loc 1 1060 0
 1446 009a 0120     		movs	r0, #1
 1447              	.LVL150:
 1448              	.L132:
 1449              	.LBE129:
 1450              	.LBB130:
 1451              	.LBB131:
 212:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1452              		.loc 2 229 0
 1453              		.syntax unified
 1454              	@ 229 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1455 009c 86F31188 			msr basepri, r6	
 1456              	@ 0 "" 2
 1457              	.LVL151:
 1458              		.thumb
 1459              		.syntax unified
 1460              	.LBE131:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 74


 1461              	.LBE130:
1071:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1462              		.loc 1 1071 0
 1463 00a0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1464              	.LVL152:
 1465              	.L140:
 1466              	.LBB132:
1026:../FreeRTOS/Source/queue.c **** 					{
 1467              		.loc 1 1026 0
 1468 00a4 636A     		ldr	r3, [r4, #36]
 1469 00a6 5BB1     		cbz	r3, .L135
1028:../FreeRTOS/Source/queue.c **** 						{
 1470              		.loc 1 1028 0
 1471 00a8 04F12400 		add	r0, r4, #36
 1472 00ac FFF7FEFF 		bl	xTaskRemoveFromEventList
 1473              	.LVL153:
 1474 00b0 40B1     		cbz	r0, .L136
1032:../FreeRTOS/Source/queue.c **** 							{
 1475              		.loc 1 1032 0
 1476 00b2 B8F1000F 		cmp	r8, #0
 1477 00b6 07D0     		beq	.L137
1034:../FreeRTOS/Source/queue.c **** 							}
 1478              		.loc 1 1034 0
 1479 00b8 0120     		movs	r0, #1
 1480 00ba C8F80000 		str	r0, [r8]
 1481 00be EDE7     		b	.L132
 1482              	.L135:
1060:../FreeRTOS/Source/queue.c **** 		}
 1483              		.loc 1 1060 0
 1484 00c0 0120     		movs	r0, #1
 1485 00c2 EBE7     		b	.L132
 1486              	.L136:
 1487 00c4 0120     		movs	r0, #1
 1488 00c6 E9E7     		b	.L132
 1489              	.L137:
 1490 00c8 0120     		movs	r0, #1
 1491 00ca E7E7     		b	.L132
 1492              	.LBE132:
 1493              		.cfi_endproc
 1494              	.LFE14:
 1496              		.section	.text.xQueueGiveFromISR,"ax",%progbits
 1497              		.align	1
 1498              		.global	xQueueGiveFromISR
 1499              		.syntax unified
 1500              		.thumb
 1501              		.thumb_func
 1502              		.fpu fpv4-sp-d16
 1504              	xQueueGiveFromISR:
 1505              	.LFB15:
1075:../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1506              		.loc 1 1075 0
 1507              		.cfi_startproc
 1508              		@ args = 0, pretend = 0, frame = 0
 1509              		@ frame_needed = 0, uses_anonymous_args = 0
 1510              	.LVL154:
1086:../FreeRTOS/Source/queue.c **** 
 1511              		.loc 1 1086 0
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 75


 1512 0000 60B1     		cbz	r0, .L156
1075:../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 1513              		.loc 1 1075 0
 1514 0002 70B5     		push	{r4, r5, r6, lr}
 1515              	.LCFI21:
 1516              		.cfi_def_cfa_offset 16
 1517              		.cfi_offset 4, -16
 1518              		.cfi_offset 5, -12
 1519              		.cfi_offset 6, -8
 1520              		.cfi_offset 14, -4
 1521 0004 0446     		mov	r4, r0
1090:../FreeRTOS/Source/queue.c **** 
 1522              		.loc 1 1090 0
 1523 0006 036C     		ldr	r3, [r0, #64]
 1524 0008 8BB1     		cbz	r3, .L144
 1525              	.LBB133:
 1526              	.LBB134:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1527              		.loc 2 195 0
 1528              		.syntax unified
 1529              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1530 000a 4FF05003 			mov r3, #80												
 1531 000e 83F31188 		msr basepri, r3											
 1532 0012 BFF36F8F 		isb														
 1533 0016 BFF34F8F 		dsb														
 1534              	
 1535              	@ 0 "" 2
 1536              	.LVL155:
 1537              		.thumb
 1538              		.syntax unified
 1539              	.L145:
 1540 001a FEE7     		b	.L145
 1541              	.L156:
 1542              	.LCFI22:
 1543              		.cfi_def_cfa_offset 0
 1544              		.cfi_restore 4
 1545              		.cfi_restore 5
 1546              		.cfi_restore 6
 1547              		.cfi_restore 14
 1548              	.LBE134:
 1549              	.LBE133:
 1550              	.LBB135:
 1551              	.LBB136:
 1552              		.syntax unified
 1553              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1554 001c 4FF05003 			mov r3, #80												
 1555 0020 83F31188 		msr basepri, r3											
 1556 0024 BFF36F8F 		isb														
 1557 0028 BFF34F8F 		dsb														
 1558              	
 1559              	@ 0 "" 2
 1560              	.LVL156:
 1561              		.thumb
 1562              		.syntax unified
 1563              	.L143:
 1564 002c FEE7     		b	.L143
 1565              	.L144:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 76


 1566              	.LCFI23:
 1567              		.cfi_def_cfa_offset 16
 1568              		.cfi_offset 4, -16
 1569              		.cfi_offset 5, -12
 1570              		.cfi_offset 6, -8
 1571              		.cfi_offset 14, -4
 1572              	.LBE136:
 1573              	.LBE135:
1095:../FreeRTOS/Source/queue.c **** 
 1574              		.loc 1 1095 0
 1575 002e 0368     		ldr	r3, [r0]
 1576 0030 2BB3     		cbz	r3, .L157
 1577              	.L146:
 1578 0032 0E46     		mov	r6, r1
1111:../FreeRTOS/Source/queue.c **** 
 1579              		.loc 1 1111 0
 1580 0034 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1581              	.LVL157:
 1582              	.LBB137:
 1583              	.LBB138:
 211:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1584              		.loc 2 211 0
 1585              		.syntax unified
 1586              	@ 211 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1587 0038 EFF31185 			mrs r5, basepri											
 1588 003c 4FF05003 		mov r3, #80												
 1589 0040 83F31188 		msr basepri, r3											
 1590 0044 BFF36F8F 		isb														
 1591 0048 BFF34F8F 		dsb														
 1592              	
 1593              	@ 0 "" 2
 1594              		.thumb
 1595              		.syntax unified
 1596              	.LBE138:
 1597              	.LBE137:
 1598              	.LBB139:
1115:../FreeRTOS/Source/queue.c **** 
 1599              		.loc 1 1115 0
 1600 004c A26B     		ldr	r2, [r4, #56]
 1601              	.LVL158:
1120:../FreeRTOS/Source/queue.c **** 		{
 1602              		.loc 1 1120 0
 1603 004e E36B     		ldr	r3, [r4, #60]
 1604 0050 9342     		cmp	r3, r2
 1605 0052 26D9     		bls	.L150
 1606              	.LBB140:
1122:../FreeRTOS/Source/queue.c **** 
 1607              		.loc 1 1122 0
 1608 0054 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1609 0058 5BB2     		sxtb	r3, r3
 1610              	.LVL159:
1132:../FreeRTOS/Source/queue.c **** 
 1611              		.loc 1 1132 0
 1612 005a 0132     		adds	r2, r2, #1
 1613              	.LVL160:
 1614 005c A263     		str	r2, [r4, #56]
1136:../FreeRTOS/Source/queue.c **** 			{
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 77


 1615              		.loc 1 1136 0
 1616 005e B3F1FF3F 		cmp	r3, #-1
 1617 0062 18D1     		bne	.L149
1191:../FreeRTOS/Source/queue.c **** 					{
 1618              		.loc 1 1191 0
 1619 0064 636A     		ldr	r3, [r4, #36]
 1620              	.LVL161:
 1621 0066 F3B1     		cbz	r3, .L151
1193:../FreeRTOS/Source/queue.c **** 						{
 1622              		.loc 1 1193 0
 1623 0068 04F12400 		add	r0, r4, #36
 1624 006c FFF7FEFF 		bl	xTaskRemoveFromEventList
 1625              	.LVL162:
 1626 0070 D8B1     		cbz	r0, .L152
1197:../FreeRTOS/Source/queue.c **** 							{
 1627              		.loc 1 1197 0
 1628 0072 E6B1     		cbz	r6, .L153
1199:../FreeRTOS/Source/queue.c **** 							}
 1629              		.loc 1 1199 0
 1630 0074 0120     		movs	r0, #1
 1631 0076 3060     		str	r0, [r6]
 1632              	.L148:
 1633              	.LVL163:
 1634              	.LBE140:
 1635              	.LBE139:
 1636              	.LBB143:
 1637              	.LBB144:
 1638              		.loc 2 229 0
 1639              		.syntax unified
 1640              	@ 229 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1641 0078 85F31188 			msr basepri, r5	
 1642              	@ 0 "" 2
 1643              	.LVL164:
 1644              		.thumb
 1645              		.syntax unified
 1646              	.LBE144:
 1647              	.LBE143:
1236:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1648              		.loc 1 1236 0
 1649 007c 70BD     		pop	{r4, r5, r6, pc}
 1650              	.LVL165:
 1651              	.L157:
1095:../FreeRTOS/Source/queue.c **** 
 1652              		.loc 1 1095 0 discriminator 2
 1653 007e 4368     		ldr	r3, [r0, #4]
 1654 0080 002B     		cmp	r3, #0
 1655 0082 D6D0     		beq	.L146
 1656              	.LBB145:
 1657              	.LBB146:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1658              		.loc 2 195 0
 1659              		.syntax unified
 1660              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1661 0084 4FF05003 			mov r3, #80												
 1662 0088 83F31188 		msr basepri, r3											
 1663 008c BFF36F8F 		isb														
 1664 0090 BFF34F8F 		dsb														
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 78


 1665              	
 1666              	@ 0 "" 2
 1667              	.LVL166:
 1668              		.thumb
 1669              		.syntax unified
 1670              	.L147:
 1671 0094 FEE7     		b	.L147
 1672              	.LVL167:
 1673              	.L149:
 1674              	.LBE146:
 1675              	.LBE145:
 1676              	.LBB147:
 1677              	.LBB141:
1222:../FreeRTOS/Source/queue.c **** 			}
 1678              		.loc 1 1222 0
 1679 0096 0133     		adds	r3, r3, #1
 1680              	.LVL168:
 1681 0098 5BB2     		sxtb	r3, r3
 1682              	.LVL169:
 1683 009a 84F84530 		strb	r3, [r4, #69]
1225:../FreeRTOS/Source/queue.c **** 		}
 1684              		.loc 1 1225 0
 1685 009e 0120     		movs	r0, #1
 1686 00a0 EAE7     		b	.L148
 1687              	.LVL170:
 1688              	.L150:
 1689              	.LBE141:
1230:../FreeRTOS/Source/queue.c **** 		}
 1690              		.loc 1 1230 0
 1691 00a2 0020     		movs	r0, #0
 1692 00a4 E8E7     		b	.L148
 1693              	.LVL171:
 1694              	.L151:
 1695              	.LBB142:
1225:../FreeRTOS/Source/queue.c **** 		}
 1696              		.loc 1 1225 0
 1697 00a6 0120     		movs	r0, #1
 1698 00a8 E6E7     		b	.L148
 1699              	.LVL172:
 1700              	.L152:
 1701 00aa 0120     		movs	r0, #1
 1702 00ac E4E7     		b	.L148
 1703              	.L153:
 1704 00ae 0120     		movs	r0, #1
 1705 00b0 E2E7     		b	.L148
 1706              	.LBE142:
 1707              	.LBE147:
 1708              		.cfi_endproc
 1709              	.LFE15:
 1711              		.section	.text.xQueueReceive,"ax",%progbits
 1712              		.align	1
 1713              		.global	xQueueReceive
 1714              		.syntax unified
 1715              		.thumb
 1716              		.thumb_func
 1717              		.fpu fpv4-sp-d16
 1719              	xQueueReceive:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 79


 1720              	.LFB16:
1240:../FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 1721              		.loc 1 1240 0
 1722              		.cfi_startproc
 1723              		@ args = 0, pretend = 0, frame = 16
 1724              		@ frame_needed = 0, uses_anonymous_args = 0
 1725              	.LVL173:
 1726 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1727              	.LCFI24:
 1728              		.cfi_def_cfa_offset 20
 1729              		.cfi_offset 4, -20
 1730              		.cfi_offset 5, -16
 1731              		.cfi_offset 6, -12
 1732              		.cfi_offset 7, -8
 1733              		.cfi_offset 14, -4
 1734 0002 85B0     		sub	sp, sp, #20
 1735              	.LCFI25:
 1736              		.cfi_def_cfa_offset 40
 1737 0004 0192     		str	r2, [sp, #4]
 1738              	.LVL174:
1246:../FreeRTOS/Source/queue.c **** 
 1739              		.loc 1 1246 0
 1740 0006 60B1     		cbz	r0, .L179
 1741 0008 0446     		mov	r4, r0
1250:../FreeRTOS/Source/queue.c **** 
 1742              		.loc 1 1250 0
 1743 000a 99B9     		cbnz	r1, .L161
1250:../FreeRTOS/Source/queue.c **** 
 1744              		.loc 1 1250 0 is_stmt 0 discriminator 2
 1745 000c 036C     		ldr	r3, [r0, #64]
 1746 000e 8BB1     		cbz	r3, .L161
 1747              	.LBB148:
 1748              	.LBB149:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1749              		.loc 2 195 0 is_stmt 1
 1750              		.syntax unified
 1751              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1752 0010 4FF05003 			mov r3, #80												
 1753 0014 83F31188 		msr basepri, r3											
 1754 0018 BFF36F8F 		isb														
 1755 001c BFF34F8F 		dsb														
 1756              	
 1757              	@ 0 "" 2
 1758              	.LVL175:
 1759              		.thumb
 1760              		.syntax unified
 1761              	.L162:
 1762 0020 FEE7     		b	.L162
 1763              	.L179:
 1764              	.LBE149:
 1765              	.LBE148:
 1766              	.LBB150:
 1767              	.LBB151:
 1768              		.syntax unified
 1769              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1770 0022 4FF05003 			mov r3, #80												
 1771 0026 83F31188 		msr basepri, r3											
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 80


 1772 002a BFF36F8F 		isb														
 1773 002e BFF34F8F 		dsb														
 1774              	
 1775              	@ 0 "" 2
 1776              	.LVL176:
 1777              		.thumb
 1778              		.syntax unified
 1779              	.L160:
 1780 0032 FEE7     		b	.L160
 1781              	.L161:
 1782 0034 0F46     		mov	r7, r1
 1783              	.LBE151:
 1784              	.LBE150:
1255:../FreeRTOS/Source/queue.c **** 	}
 1785              		.loc 1 1255 0
 1786 0036 FFF7FEFF 		bl	xTaskGetSchedulerState
 1787              	.LVL177:
 1788 003a 50B9     		cbnz	r0, .L176
1255:../FreeRTOS/Source/queue.c **** 	}
 1789              		.loc 1 1255 0 is_stmt 0 discriminator 2
 1790 003c 019B     		ldr	r3, [sp, #4]
 1791 003e 53B1     		cbz	r3, .L177
 1792              	.LBB152:
 1793              	.LBB153:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1794              		.loc 2 195 0 is_stmt 1
 1795              		.syntax unified
 1796              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1797 0040 4FF05003 			mov r3, #80												
 1798 0044 83F31188 		msr basepri, r3											
 1799 0048 BFF36F8F 		isb														
 1800 004c BFF34F8F 		dsb														
 1801              	
 1802              	@ 0 "" 2
 1803              	.LVL178:
 1804              		.thumb
 1805              		.syntax unified
 1806              	.L164:
 1807 0050 FEE7     		b	.L164
 1808              	.L176:
 1809              	.LBE153:
 1810              	.LBE152:
 1811 0052 0026     		movs	r6, #0
 1812 0054 3EE0     		b	.L165
 1813              	.L177:
 1814 0056 0026     		movs	r6, #0
 1815 0058 3CE0     		b	.L165
 1816              	.LVL179:
 1817              	.L182:
 1818              	.LBB154:
1275:../FreeRTOS/Source/queue.c **** 				traceQUEUE_RECEIVE( pxQueue );
 1819              		.loc 1 1275 0
 1820 005a 3946     		mov	r1, r7
 1821 005c 2046     		mov	r0, r4
 1822 005e FFF7FEFF 		bl	prvCopyDataFromQueue
 1823              	.LVL180:
1277:../FreeRTOS/Source/queue.c **** 
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 81


 1824              		.loc 1 1277 0
 1825 0062 013D     		subs	r5, r5, #1
 1826              	.LVL181:
 1827 0064 A563     		str	r5, [r4, #56]
1282:../FreeRTOS/Source/queue.c **** 				{
 1828              		.loc 1 1282 0
 1829 0066 2369     		ldr	r3, [r4, #16]
 1830 0068 23B9     		cbnz	r3, .L180
 1831              	.L167:
1298:../FreeRTOS/Source/queue.c **** 				return pdPASS;
 1832              		.loc 1 1298 0
 1833 006a FFF7FEFF 		bl	vPortExitCritical
 1834              	.LVL182:
1299:../FreeRTOS/Source/queue.c **** 			}
 1835              		.loc 1 1299 0
 1836 006e 0120     		movs	r0, #1
 1837              	.LVL183:
 1838              	.L158:
 1839              	.LBE154:
1378:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 1840              		.loc 1 1378 0
 1841 0070 05B0     		add	sp, sp, #20
 1842              	.LCFI26:
 1843              		.cfi_remember_state
 1844              		.cfi_def_cfa_offset 20
 1845              		@ sp needed
 1846 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 1847              	.LVL184:
 1848              	.L180:
 1849              	.LCFI27:
 1850              		.cfi_restore_state
 1851              	.LBB155:
1284:../FreeRTOS/Source/queue.c **** 					{
 1852              		.loc 1 1284 0
 1853 0074 04F11000 		add	r0, r4, #16
 1854 0078 FFF7FEFF 		bl	xTaskRemoveFromEventList
 1855              	.LVL185:
 1856 007c 0028     		cmp	r0, #0
 1857 007e F4D0     		beq	.L167
1286:../FreeRTOS/Source/queue.c **** 					}
 1858              		.loc 1 1286 0
 1859 0080 344B     		ldr	r3, .L187
 1860 0082 4FF08052 		mov	r2, #268435456
 1861 0086 1A60     		str	r2, [r3]
 1862              		.syntax unified
 1863              	@ 1286 "../FreeRTOS/Source/queue.c" 1
 1864 0088 BFF34F8F 		dsb
 1865              	@ 0 "" 2
 1866              	@ 1286 "../FreeRTOS/Source/queue.c" 1
 1867 008c BFF36F8F 		isb
 1868              	@ 0 "" 2
 1869              		.thumb
 1870              		.syntax unified
 1871 0090 EBE7     		b	.L167
 1872              	.LVL186:
 1873              	.L183:
1307:../FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 82


 1874              		.loc 1 1307 0
 1875 0092 FFF7FEFF 		bl	vPortExitCritical
 1876              	.LVL187:
1309:../FreeRTOS/Source/queue.c **** 				}
 1877              		.loc 1 1309 0
 1878 0096 0020     		movs	r0, #0
 1879 0098 EAE7     		b	.L158
 1880              	.L184:
1315:../FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 1881              		.loc 1 1315 0
 1882 009a 02A8     		add	r0, sp, #8
 1883 009c FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 1884              	.LVL188:
1316:../FreeRTOS/Source/queue.c **** 				}
 1885              		.loc 1 1316 0
 1886 00a0 0126     		movs	r6, #1
 1887 00a2 21E0     		b	.L170
 1888              	.LVL189:
 1889              	.L185:
 1890              	.LBE155:
1331:../FreeRTOS/Source/queue.c **** 
 1891              		.loc 1 1331 0 discriminator 1
 1892 00a4 0023     		movs	r3, #0
 1893 00a6 84F84430 		strb	r3, [r4, #68]
 1894 00aa 29E0     		b	.L171
 1895              	.L186:
1331:../FreeRTOS/Source/queue.c **** 
 1896              		.loc 1 1331 0 is_stmt 0 discriminator 4
 1897 00ac 0023     		movs	r3, #0
 1898 00ae 84F84530 		strb	r3, [r4, #69]
 1899 00b2 2BE0     		b	.L172
 1900              	.L174:
1356:../FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 1901              		.loc 1 1356 0 is_stmt 1
 1902 00b4 2046     		mov	r0, r4
 1903 00b6 FFF7FEFF 		bl	prvUnlockQueue
 1904              	.LVL190:
1357:../FreeRTOS/Source/queue.c **** 			}
 1905              		.loc 1 1357 0
 1906 00ba FFF7FEFF 		bl	xTaskResumeAll
 1907              	.LVL191:
 1908 00be 09E0     		b	.L165
 1909              	.L173:
1364:../FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 1910              		.loc 1 1364 0
 1911 00c0 2046     		mov	r0, r4
 1912 00c2 FFF7FEFF 		bl	prvUnlockQueue
 1913              	.LVL192:
1365:../FreeRTOS/Source/queue.c **** 
 1914              		.loc 1 1365 0
 1915 00c6 FFF7FEFF 		bl	xTaskResumeAll
 1916              	.LVL193:
1367:../FreeRTOS/Source/queue.c **** 			{
 1917              		.loc 1 1367 0
 1918 00ca 2046     		mov	r0, r4
 1919 00cc FFF7FEFF 		bl	prvIsQueueEmpty
 1920              	.LVL194:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 83


 1921 00d0 0028     		cmp	r0, #0
 1922 00d2 3DD1     		bne	.L181
 1923              	.LVL195:
 1924              	.L165:
1266:../FreeRTOS/Source/queue.c **** 		{
 1925              		.loc 1 1266 0
 1926 00d4 FFF7FEFF 		bl	vPortEnterCritical
 1927              	.LVL196:
 1928              	.LBB156:
1268:../FreeRTOS/Source/queue.c **** 
 1929              		.loc 1 1268 0
 1930 00d8 A56B     		ldr	r5, [r4, #56]
 1931              	.LVL197:
1272:../FreeRTOS/Source/queue.c **** 			{
 1932              		.loc 1 1272 0
 1933 00da 002D     		cmp	r5, #0
 1934 00dc BDD1     		bne	.L182
1303:../FreeRTOS/Source/queue.c **** 				{
 1935              		.loc 1 1303 0
 1936 00de 019B     		ldr	r3, [sp, #4]
 1937 00e0 002B     		cmp	r3, #0
 1938 00e2 D6D0     		beq	.L183
1311:../FreeRTOS/Source/queue.c **** 				{
 1939              		.loc 1 1311 0
 1940 00e4 002E     		cmp	r6, #0
 1941 00e6 D8D0     		beq	.L184
 1942              	.LVL198:
 1943              	.L170:
 1944              	.LBE156:
1325:../FreeRTOS/Source/queue.c **** 
 1945              		.loc 1 1325 0
 1946 00e8 FFF7FEFF 		bl	vPortExitCritical
 1947              	.LVL199:
1330:../FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 1948              		.loc 1 1330 0
 1949 00ec FFF7FEFF 		bl	vTaskSuspendAll
 1950              	.LVL200:
1331:../FreeRTOS/Source/queue.c **** 
 1951              		.loc 1 1331 0
 1952 00f0 FFF7FEFF 		bl	vPortEnterCritical
 1953              	.LVL201:
 1954 00f4 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 1955 00f8 5BB2     		sxtb	r3, r3
 1956 00fa B3F1FF3F 		cmp	r3, #-1
 1957 00fe D1D0     		beq	.L185
 1958              	.L171:
1331:../FreeRTOS/Source/queue.c **** 
 1959              		.loc 1 1331 0 is_stmt 0 discriminator 3
 1960 0100 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 1961 0104 5BB2     		sxtb	r3, r3
 1962 0106 B3F1FF3F 		cmp	r3, #-1
 1963 010a CFD0     		beq	.L186
 1964              	.L172:
1331:../FreeRTOS/Source/queue.c **** 
 1965              		.loc 1 1331 0 discriminator 6
 1966 010c FFF7FEFF 		bl	vPortExitCritical
 1967              	.LVL202:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 84


1334:../FreeRTOS/Source/queue.c **** 		{
 1968              		.loc 1 1334 0 is_stmt 1 discriminator 6
 1969 0110 01A9     		add	r1, sp, #4
 1970 0112 02A8     		add	r0, sp, #8
 1971 0114 FFF7FEFF 		bl	xTaskCheckForTimeOut
 1972              	.LVL203:
 1973 0118 0028     		cmp	r0, #0
 1974 011a D1D1     		bne	.L173
1338:../FreeRTOS/Source/queue.c **** 			{
 1975              		.loc 1 1338 0
 1976 011c 2046     		mov	r0, r4
 1977 011e FFF7FEFF 		bl	prvIsQueueEmpty
 1978              	.LVL204:
 1979 0122 0028     		cmp	r0, #0
 1980 0124 C6D0     		beq	.L174
1341:../FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 1981              		.loc 1 1341 0
 1982 0126 0199     		ldr	r1, [sp, #4]
 1983 0128 04F12400 		add	r0, r4, #36
 1984 012c FFF7FEFF 		bl	vTaskPlaceOnEventList
 1985              	.LVL205:
1342:../FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 1986              		.loc 1 1342 0
 1987 0130 2046     		mov	r0, r4
 1988 0132 FFF7FEFF 		bl	prvUnlockQueue
 1989              	.LVL206:
1343:../FreeRTOS/Source/queue.c **** 				{
 1990              		.loc 1 1343 0
 1991 0136 FFF7FEFF 		bl	xTaskResumeAll
 1992              	.LVL207:
 1993 013a 0028     		cmp	r0, #0
 1994 013c CAD1     		bne	.L165
1345:../FreeRTOS/Source/queue.c **** 				}
 1995              		.loc 1 1345 0
 1996 013e 054B     		ldr	r3, .L187
 1997 0140 4FF08052 		mov	r2, #268435456
 1998 0144 1A60     		str	r2, [r3]
 1999              		.syntax unified
 2000              	@ 1345 "../FreeRTOS/Source/queue.c" 1
 2001 0146 BFF34F8F 		dsb
 2002              	@ 0 "" 2
 2003              	@ 1345 "../FreeRTOS/Source/queue.c" 1
 2004 014a BFF36F8F 		isb
 2005              	@ 0 "" 2
 2006              		.thumb
 2007              		.syntax unified
 2008 014e C1E7     		b	.L165
 2009              	.L181:
1370:../FreeRTOS/Source/queue.c **** 			}
 2010              		.loc 1 1370 0
 2011 0150 0020     		movs	r0, #0
 2012 0152 8DE7     		b	.L158
 2013              	.L188:
 2014              		.align	2
 2015              	.L187:
 2016 0154 04ED00E0 		.word	-536810236
 2017              		.cfi_endproc
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 85


 2018              	.LFE16:
 2020              		.section	.text.xQueueSemaphoreTake,"ax",%progbits
 2021              		.align	1
 2022              		.global	xQueueSemaphoreTake
 2023              		.syntax unified
 2024              		.thumb
 2025              		.thumb_func
 2026              		.fpu fpv4-sp-d16
 2028              	xQueueSemaphoreTake:
 2029              	.LFB17:
1382:../FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2030              		.loc 1 1382 0
 2031              		.cfi_startproc
 2032              		@ args = 0, pretend = 0, frame = 16
 2033              		@ frame_needed = 0, uses_anonymous_args = 0
 2034              	.LVL208:
 2035 0000 70B5     		push	{r4, r5, r6, lr}
 2036              	.LCFI28:
 2037              		.cfi_def_cfa_offset 16
 2038              		.cfi_offset 4, -16
 2039              		.cfi_offset 5, -12
 2040              		.cfi_offset 6, -8
 2041              		.cfi_offset 14, -4
 2042 0002 84B0     		sub	sp, sp, #16
 2043              	.LCFI29:
 2044              		.cfi_def_cfa_offset 32
 2045 0004 0191     		str	r1, [sp, #4]
 2046              	.LVL209:
1392:../FreeRTOS/Source/queue.c **** 
 2047              		.loc 1 1392 0
 2048 0006 40B9     		cbnz	r0, .L190
 2049              	.LBB157:
 2050              	.LBB158:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2051              		.loc 2 195 0
 2052              		.syntax unified
 2053              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2054 0008 4FF05003 			mov r3, #80												
 2055 000c 83F31188 		msr basepri, r3											
 2056 0010 BFF36F8F 		isb														
 2057 0014 BFF34F8F 		dsb														
 2058              	
 2059              	@ 0 "" 2
 2060              	.LVL210:
 2061              		.thumb
 2062              		.syntax unified
 2063              	.L191:
 2064 0018 FEE7     		b	.L191
 2065              	.L190:
 2066 001a 0446     		mov	r4, r0
 2067              	.LBE158:
 2068              	.LBE157:
1396:../FreeRTOS/Source/queue.c **** 
 2069              		.loc 1 1396 0
 2070 001c 036C     		ldr	r3, [r0, #64]
 2071 001e 43B1     		cbz	r3, .L192
 2072              	.LBB159:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 86


 2073              	.LBB160:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2074              		.loc 2 195 0
 2075              		.syntax unified
 2076              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2077 0020 4FF05003 			mov r3, #80												
 2078 0024 83F31188 		msr basepri, r3											
 2079 0028 BFF36F8F 		isb														
 2080 002c BFF34F8F 		dsb														
 2081              	
 2082              	@ 0 "" 2
 2083              	.LVL211:
 2084              		.thumb
 2085              		.syntax unified
 2086              	.L193:
 2087 0030 FEE7     		b	.L193
 2088              	.L192:
 2089              	.LBE160:
 2090              	.LBE159:
1401:../FreeRTOS/Source/queue.c **** 	}
 2091              		.loc 1 1401 0
 2092 0032 FFF7FEFF 		bl	xTaskGetSchedulerState
 2093              	.LVL212:
 2094 0036 50B9     		cbnz	r0, .L211
1401:../FreeRTOS/Source/queue.c **** 	}
 2095              		.loc 1 1401 0 is_stmt 0 discriminator 2
 2096 0038 019B     		ldr	r3, [sp, #4]
 2097 003a 5BB1     		cbz	r3, .L212
 2098              	.LBB161:
 2099              	.LBB162:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2100              		.loc 2 195 0 is_stmt 1
 2101              		.syntax unified
 2102              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2103 003c 4FF05003 			mov r3, #80												
 2104 0040 83F31188 		msr basepri, r3											
 2105 0044 BFF36F8F 		isb														
 2106 0048 BFF34F8F 		dsb														
 2107              	
 2108              	@ 0 "" 2
 2109              	.LVL213:
 2110              		.thumb
 2111              		.syntax unified
 2112              	.L195:
 2113 004c FEE7     		b	.L195
 2114              	.L211:
 2115              	.LBE162:
 2116              	.LBE161:
 2117 004e 0025     		movs	r5, #0
 2118 0050 2E46     		mov	r6, r5
 2119 0052 51E0     		b	.L196
 2120              	.L212:
 2121 0054 0025     		movs	r5, #0
 2122 0056 2E46     		mov	r6, r5
 2123 0058 4EE0     		b	.L196
 2124              	.LVL214:
 2125              	.L215:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 87


 2126              	.LBB163:
1426:../FreeRTOS/Source/queue.c **** 
 2127              		.loc 1 1426 0
 2128 005a 013B     		subs	r3, r3, #1
 2129              	.LVL215:
 2130 005c A363     		str	r3, [r4, #56]
1430:../FreeRTOS/Source/queue.c **** 					{
 2131              		.loc 1 1430 0
 2132 005e 2368     		ldr	r3, [r4]
 2133              	.LVL216:
 2134 0060 13B9     		cbnz	r3, .L198
1434:../FreeRTOS/Source/queue.c **** 					}
 2135              		.loc 1 1434 0
 2136 0062 FFF7FEFF 		bl	pvTaskIncrementMutexHeldCount
 2137              	.LVL217:
 2138 0066 6060     		str	r0, [r4, #4]
 2139              	.L198:
1445:../FreeRTOS/Source/queue.c **** 				{
 2140              		.loc 1 1445 0
 2141 0068 2369     		ldr	r3, [r4, #16]
 2142 006a 63B1     		cbz	r3, .L199
1447:../FreeRTOS/Source/queue.c **** 					{
 2143              		.loc 1 1447 0
 2144 006c 04F11000 		add	r0, r4, #16
 2145 0070 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2146              	.LVL218:
 2147 0074 38B1     		cbz	r0, .L199
1449:../FreeRTOS/Source/queue.c **** 					}
 2148              		.loc 1 1449 0
 2149 0076 484B     		ldr	r3, .L221
 2150 0078 4FF08052 		mov	r2, #268435456
 2151 007c 1A60     		str	r2, [r3]
 2152              		.syntax unified
 2153              	@ 1449 "../FreeRTOS/Source/queue.c" 1
 2154 007e BFF34F8F 		dsb
 2155              	@ 0 "" 2
 2156              	@ 1449 "../FreeRTOS/Source/queue.c" 1
 2157 0082 BFF36F8F 		isb
 2158              	@ 0 "" 2
 2159              		.thumb
 2160              		.syntax unified
 2161              	.L199:
1461:../FreeRTOS/Source/queue.c **** 				return pdPASS;
 2162              		.loc 1 1461 0
 2163 0086 FFF7FEFF 		bl	vPortExitCritical
 2164              	.LVL219:
1462:../FreeRTOS/Source/queue.c **** 			}
 2165              		.loc 1 1462 0
 2166 008a 0125     		movs	r5, #1
 2167              	.LVL220:
 2168              	.L189:
 2169              	.LBE163:
1597:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2170              		.loc 1 1597 0
 2171 008c 2846     		mov	r0, r5
 2172 008e 04B0     		add	sp, sp, #16
 2173              	.LCFI30:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 88


 2174              		.cfi_remember_state
 2175              		.cfi_def_cfa_offset 16
 2176              		@ sp needed
 2177 0090 70BD     		pop	{r4, r5, r6, pc}
 2178              	.LVL221:
 2179              	.L216:
 2180              	.LCFI31:
 2181              		.cfi_restore_state
 2182              	.LBB166:
1473:../FreeRTOS/Source/queue.c **** 					}
 2183              		.loc 1 1473 0
 2184 0092 45B1     		cbz	r5, .L202
 2185              	.LBB164:
 2186              	.LBB165:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2187              		.loc 2 195 0
 2188              		.syntax unified
 2189              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2190 0094 4FF05003 			mov r3, #80												
 2191 0098 83F31188 		msr basepri, r3											
 2192 009c BFF36F8F 		isb														
 2193 00a0 BFF34F8F 		dsb														
 2194              	
 2195              	@ 0 "" 2
 2196              	.LVL222:
 2197              		.thumb
 2198              		.syntax unified
 2199              	.L203:
 2200 00a4 FEE7     		b	.L203
 2201              	.L202:
 2202              	.LBE165:
 2203              	.LBE164:
1479:../FreeRTOS/Source/queue.c **** 					traceQUEUE_RECEIVE_FAILED( pxQueue );
 2204              		.loc 1 1479 0
 2205 00a6 FFF7FEFF 		bl	vPortExitCritical
 2206              	.LVL223:
1481:../FreeRTOS/Source/queue.c **** 				}
 2207              		.loc 1 1481 0
 2208 00aa EFE7     		b	.L189
 2209              	.L217:
1487:../FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 2210              		.loc 1 1487 0
 2211 00ac 02A8     		add	r0, sp, #8
 2212 00ae FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2213              	.LVL224:
1488:../FreeRTOS/Source/queue.c **** 				}
 2214              		.loc 1 1488 0
 2215 00b2 0126     		movs	r6, #1
 2216 00b4 2AE0     		b	.L204
 2217              	.LVL225:
 2218              	.L218:
 2219              	.LBE166:
1503:../FreeRTOS/Source/queue.c **** 
 2220              		.loc 1 1503 0 discriminator 1
 2221 00b6 0023     		movs	r3, #0
 2222 00b8 84F84430 		strb	r3, [r4, #68]
 2223 00bc 32E0     		b	.L205
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 89


 2224              	.L219:
1503:../FreeRTOS/Source/queue.c **** 
 2225              		.loc 1 1503 0 is_stmt 0 discriminator 4
 2226 00be 0023     		movs	r3, #0
 2227 00c0 84F84530 		strb	r3, [r4, #69]
 2228 00c4 34E0     		b	.L206
 2229              	.L220:
1520:../FreeRTOS/Source/queue.c **** 						{
 2230              		.loc 1 1520 0 is_stmt 1
 2231 00c6 FFF7FEFF 		bl	vPortEnterCritical
 2232              	.LVL226:
1522:../FreeRTOS/Source/queue.c **** 						}
 2233              		.loc 1 1522 0
 2234 00ca 6068     		ldr	r0, [r4, #4]
 2235 00cc FFF7FEFF 		bl	xTaskPriorityInherit
 2236              	.LVL227:
 2237 00d0 0546     		mov	r5, r0
 2238              	.LVL228:
1524:../FreeRTOS/Source/queue.c **** 					}
 2239              		.loc 1 1524 0
 2240 00d2 FFF7FEFF 		bl	vPortExitCritical
 2241              	.LVL229:
 2242 00d6 3BE0     		b	.L209
 2243              	.L208:
1548:../FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 2244              		.loc 1 1548 0
 2245 00d8 2046     		mov	r0, r4
 2246 00da FFF7FEFF 		bl	prvUnlockQueue
 2247              	.LVL230:
1549:../FreeRTOS/Source/queue.c **** 			}
 2248              		.loc 1 1549 0
 2249 00de FFF7FEFF 		bl	xTaskResumeAll
 2250              	.LVL231:
 2251 00e2 09E0     		b	.L196
 2252              	.L207:
1555:../FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 2253              		.loc 1 1555 0
 2254 00e4 2046     		mov	r0, r4
 2255 00e6 FFF7FEFF 		bl	prvUnlockQueue
 2256              	.LVL232:
1556:../FreeRTOS/Source/queue.c **** 
 2257              		.loc 1 1556 0
 2258 00ea FFF7FEFF 		bl	xTaskResumeAll
 2259              	.LVL233:
1562:../FreeRTOS/Source/queue.c **** 			{
 2260              		.loc 1 1562 0
 2261 00ee 2046     		mov	r0, r4
 2262 00f0 FFF7FEFF 		bl	prvIsQueueEmpty
 2263              	.LVL234:
 2264 00f4 0028     		cmp	r0, #0
 2265 00f6 40D1     		bne	.L214
 2266              	.LVL235:
 2267              	.L196:
1412:../FreeRTOS/Source/queue.c **** 		{
 2268              		.loc 1 1412 0
 2269 00f8 FFF7FEFF 		bl	vPortEnterCritical
 2270              	.LVL236:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 90


 2271              	.LBB167:
1416:../FreeRTOS/Source/queue.c **** 
 2272              		.loc 1 1416 0
 2273 00fc A36B     		ldr	r3, [r4, #56]
 2274              	.LVL237:
1420:../FreeRTOS/Source/queue.c **** 			{
 2275              		.loc 1 1420 0
 2276 00fe 002B     		cmp	r3, #0
 2277 0100 ABD1     		bne	.L215
1466:../FreeRTOS/Source/queue.c **** 				{
 2278              		.loc 1 1466 0
 2279 0102 019B     		ldr	r3, [sp, #4]
 2280              	.LVL238:
 2281 0104 002B     		cmp	r3, #0
 2282 0106 C4D0     		beq	.L216
1483:../FreeRTOS/Source/queue.c **** 				{
 2283              		.loc 1 1483 0
 2284 0108 002E     		cmp	r6, #0
 2285 010a CFD0     		beq	.L217
 2286              	.LVL239:
 2287              	.L204:
 2288              	.LBE167:
1497:../FreeRTOS/Source/queue.c **** 
 2289              		.loc 1 1497 0
 2290 010c FFF7FEFF 		bl	vPortExitCritical
 2291              	.LVL240:
1502:../FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 2292              		.loc 1 1502 0
 2293 0110 FFF7FEFF 		bl	vTaskSuspendAll
 2294              	.LVL241:
1503:../FreeRTOS/Source/queue.c **** 
 2295              		.loc 1 1503 0
 2296 0114 FFF7FEFF 		bl	vPortEnterCritical
 2297              	.LVL242:
 2298 0118 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2299 011c 5BB2     		sxtb	r3, r3
 2300 011e B3F1FF3F 		cmp	r3, #-1
 2301 0122 C8D0     		beq	.L218
 2302              	.L205:
1503:../FreeRTOS/Source/queue.c **** 
 2303              		.loc 1 1503 0 is_stmt 0 discriminator 3
 2304 0124 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2305 0128 5BB2     		sxtb	r3, r3
 2306 012a B3F1FF3F 		cmp	r3, #-1
 2307 012e C6D0     		beq	.L219
 2308              	.L206:
1503:../FreeRTOS/Source/queue.c **** 
 2309              		.loc 1 1503 0 discriminator 6
 2310 0130 FFF7FEFF 		bl	vPortExitCritical
 2311              	.LVL243:
1506:../FreeRTOS/Source/queue.c **** 		{
 2312              		.loc 1 1506 0 is_stmt 1 discriminator 6
 2313 0134 01A9     		add	r1, sp, #4
 2314 0136 02A8     		add	r0, sp, #8
 2315 0138 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2316              	.LVL244:
 2317 013c 0028     		cmp	r0, #0
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 91


 2318 013e D1D1     		bne	.L207
1512:../FreeRTOS/Source/queue.c **** 			{
 2319              		.loc 1 1512 0
 2320 0140 2046     		mov	r0, r4
 2321 0142 FFF7FEFF 		bl	prvIsQueueEmpty
 2322              	.LVL245:
 2323 0146 0028     		cmp	r0, #0
 2324 0148 C6D0     		beq	.L208
1518:../FreeRTOS/Source/queue.c **** 					{
 2325              		.loc 1 1518 0
 2326 014a 2368     		ldr	r3, [r4]
 2327 014c 002B     		cmp	r3, #0
 2328 014e BAD0     		beq	.L220
 2329              	.L209:
1533:../FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2330              		.loc 1 1533 0
 2331 0150 0199     		ldr	r1, [sp, #4]
 2332 0152 04F12400 		add	r0, r4, #36
 2333 0156 FFF7FEFF 		bl	vTaskPlaceOnEventList
 2334              	.LVL246:
1534:../FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2335              		.loc 1 1534 0
 2336 015a 2046     		mov	r0, r4
 2337 015c FFF7FEFF 		bl	prvUnlockQueue
 2338              	.LVL247:
1535:../FreeRTOS/Source/queue.c **** 				{
 2339              		.loc 1 1535 0
 2340 0160 FFF7FEFF 		bl	xTaskResumeAll
 2341              	.LVL248:
 2342 0164 0028     		cmp	r0, #0
 2343 0166 C7D1     		bne	.L196
1537:../FreeRTOS/Source/queue.c **** 				}
 2344              		.loc 1 1537 0
 2345 0168 0B4B     		ldr	r3, .L221
 2346 016a 4FF08052 		mov	r2, #268435456
 2347 016e 1A60     		str	r2, [r3]
 2348              		.syntax unified
 2349              	@ 1537 "../FreeRTOS/Source/queue.c" 1
 2350 0170 BFF34F8F 		dsb
 2351              	@ 0 "" 2
 2352              	@ 1537 "../FreeRTOS/Source/queue.c" 1
 2353 0174 BFF36F8F 		isb
 2354              	@ 0 "" 2
 2355              		.thumb
 2356              		.syntax unified
 2357 0178 BEE7     		b	.L196
 2358              	.L214:
1569:../FreeRTOS/Source/queue.c **** 					{
 2359              		.loc 1 1569 0
 2360 017a 002D     		cmp	r5, #0
 2361 017c 86D0     		beq	.L189
1571:../FreeRTOS/Source/queue.c **** 						{
 2362              		.loc 1 1571 0
 2363 017e FFF7FEFF 		bl	vPortEnterCritical
 2364              	.LVL249:
 2365              	.LBB168:
1580:../FreeRTOS/Source/queue.c **** 							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPrio
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 92


 2366              		.loc 1 1580 0
 2367 0182 2046     		mov	r0, r4
 2368 0184 FFF7FEFF 		bl	prvGetDisinheritPriorityAfterTimeout
 2369              	.LVL250:
1581:../FreeRTOS/Source/queue.c **** 						}
 2370              		.loc 1 1581 0
 2371 0188 0146     		mov	r1, r0
 2372 018a 6068     		ldr	r0, [r4, #4]
 2373              	.LVL251:
 2374 018c FFF7FEFF 		bl	vTaskPriorityDisinheritAfterTimeout
 2375              	.LVL252:
 2376              	.LBE168:
1583:../FreeRTOS/Source/queue.c **** 					}
 2377              		.loc 1 1583 0
 2378 0190 FFF7FEFF 		bl	vPortExitCritical
 2379              	.LVL253:
1589:../FreeRTOS/Source/queue.c **** 			}
 2380              		.loc 1 1589 0
 2381 0194 0025     		movs	r5, #0
 2382              	.LVL254:
 2383 0196 79E7     		b	.L189
 2384              	.L222:
 2385              		.align	2
 2386              	.L221:
 2387 0198 04ED00E0 		.word	-536810236
 2388              		.cfi_endproc
 2389              	.LFE17:
 2391              		.section	.text.xQueueTakeMutexRecursive,"ax",%progbits
 2392              		.align	1
 2393              		.global	xQueueTakeMutexRecursive
 2394              		.syntax unified
 2395              		.thumb
 2396              		.thumb_func
 2397              		.fpu fpv4-sp-d16
 2399              	xQueueTakeMutexRecursive:
 2400              	.LFB11:
 630:../FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 2401              		.loc 1 630 0
 2402              		.cfi_startproc
 2403              		@ args = 0, pretend = 0, frame = 0
 2404              		@ frame_needed = 0, uses_anonymous_args = 0
 2405              	.LVL255:
 634:../FreeRTOS/Source/queue.c **** 
 2406              		.loc 1 634 0
 2407 0000 40B9     		cbnz	r0, .L224
 2408              	.LBB169:
 2409              	.LBB170:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2410              		.loc 2 195 0
 2411              		.syntax unified
 2412              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2413 0002 4FF05003 			mov r3, #80												
 2414 0006 83F31188 		msr basepri, r3											
 2415 000a BFF36F8F 		isb														
 2416 000e BFF34F8F 		dsb														
 2417              	
 2418              	@ 0 "" 2
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 93


 2419              	.LVL256:
 2420              		.thumb
 2421              		.syntax unified
 2422              	.L225:
 2423 0012 FEE7     		b	.L225
 2424              	.L224:
 2425              	.LBE170:
 2426              	.LBE169:
 630:../FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
 2427              		.loc 1 630 0
 2428 0014 70B5     		push	{r4, r5, r6, lr}
 2429              	.LCFI32:
 2430              		.cfi_def_cfa_offset 16
 2431              		.cfi_offset 4, -16
 2432              		.cfi_offset 5, -12
 2433              		.cfi_offset 6, -8
 2434              		.cfi_offset 14, -4
 2435 0016 0446     		mov	r4, r0
 2436 0018 0D46     		mov	r5, r1
 641:../FreeRTOS/Source/queue.c **** 		{
 2437              		.loc 1 641 0
 2438 001a 4668     		ldr	r6, [r0, #4]
 2439 001c FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 2440              	.LVL257:
 2441 0020 8642     		cmp	r6, r0
 2442 0022 09D0     		beq	.L230
 648:../FreeRTOS/Source/queue.c **** 
 2443              		.loc 1 648 0
 2444 0024 2946     		mov	r1, r5
 2445 0026 2046     		mov	r0, r4
 2446 0028 FFF7FEFF 		bl	xQueueSemaphoreTake
 2447              	.LVL258:
 653:../FreeRTOS/Source/queue.c **** 			{
 2448              		.loc 1 653 0
 2449 002c 0246     		mov	r2, r0
 2450 002e 38B1     		cbz	r0, .L223
 655:../FreeRTOS/Source/queue.c **** 			}
 2451              		.loc 1 655 0
 2452 0030 E368     		ldr	r3, [r4, #12]
 2453 0032 0133     		adds	r3, r3, #1
 2454 0034 E360     		str	r3, [r4, #12]
 663:../FreeRTOS/Source/queue.c **** 	}
 2455              		.loc 1 663 0
 2456 0036 03E0     		b	.L223
 2457              	.LVL259:
 2458              	.L230:
 643:../FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
 2459              		.loc 1 643 0
 2460 0038 E368     		ldr	r3, [r4, #12]
 2461 003a 0133     		adds	r3, r3, #1
 2462 003c E360     		str	r3, [r4, #12]
 2463              	.LVL260:
 644:../FreeRTOS/Source/queue.c **** 		}
 2464              		.loc 1 644 0
 2465 003e 0122     		movs	r2, #1
 2466              	.LVL261:
 2467              	.L223:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 94


 664:../FreeRTOS/Source/queue.c **** 
 2468              		.loc 1 664 0
 2469 0040 1046     		mov	r0, r2
 2470 0042 70BD     		pop	{r4, r5, r6, pc}
 2471              		.cfi_endproc
 2472              	.LFE11:
 2474              		.section	.text.xQueuePeek,"ax",%progbits
 2475              		.align	1
 2476              		.global	xQueuePeek
 2477              		.syntax unified
 2478              		.thumb
 2479              		.thumb_func
 2480              		.fpu fpv4-sp-d16
 2482              	xQueuePeek:
 2483              	.LFB18:
1601:../FreeRTOS/Source/queue.c **** BaseType_t xEntryTimeSet = pdFALSE;
 2484              		.loc 1 1601 0
 2485              		.cfi_startproc
 2486              		@ args = 0, pretend = 0, frame = 16
 2487              		@ frame_needed = 0, uses_anonymous_args = 0
 2488              	.LVL262:
 2489 0000 70B5     		push	{r4, r5, r6, lr}
 2490              	.LCFI33:
 2491              		.cfi_def_cfa_offset 16
 2492              		.cfi_offset 4, -16
 2493              		.cfi_offset 5, -12
 2494              		.cfi_offset 6, -8
 2495              		.cfi_offset 14, -4
 2496 0002 84B0     		sub	sp, sp, #16
 2497              	.LCFI34:
 2498              		.cfi_def_cfa_offset 32
 2499 0004 0192     		str	r2, [sp, #4]
 2500              	.LVL263:
1608:../FreeRTOS/Source/queue.c **** 
 2501              		.loc 1 1608 0
 2502 0006 60B1     		cbz	r0, .L252
 2503 0008 0446     		mov	r4, r0
1612:../FreeRTOS/Source/queue.c **** 
 2504              		.loc 1 1612 0
 2505 000a 99B9     		cbnz	r1, .L234
1612:../FreeRTOS/Source/queue.c **** 
 2506              		.loc 1 1612 0 is_stmt 0 discriminator 2
 2507 000c 036C     		ldr	r3, [r0, #64]
 2508 000e 8BB1     		cbz	r3, .L234
 2509              	.LBB171:
 2510              	.LBB172:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2511              		.loc 2 195 0 is_stmt 1
 2512              		.syntax unified
 2513              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2514 0010 4FF05003 			mov r3, #80												
 2515 0014 83F31188 		msr basepri, r3											
 2516 0018 BFF36F8F 		isb														
 2517 001c BFF34F8F 		dsb														
 2518              	
 2519              	@ 0 "" 2
 2520              	.LVL264:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 95


 2521              		.thumb
 2522              		.syntax unified
 2523              	.L235:
 2524 0020 FEE7     		b	.L235
 2525              	.L252:
 2526              	.LBE172:
 2527              	.LBE171:
 2528              	.LBB173:
 2529              	.LBB174:
 2530              		.syntax unified
 2531              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2532 0022 4FF05003 			mov r3, #80												
 2533 0026 83F31188 		msr basepri, r3											
 2534 002a BFF36F8F 		isb														
 2535 002e BFF34F8F 		dsb														
 2536              	
 2537              	@ 0 "" 2
 2538              	.LVL265:
 2539              		.thumb
 2540              		.syntax unified
 2541              	.L233:
 2542 0032 FEE7     		b	.L233
 2543              	.L234:
 2544 0034 0E46     		mov	r6, r1
 2545              	.LBE174:
 2546              	.LBE173:
1617:../FreeRTOS/Source/queue.c **** 	}
 2547              		.loc 1 1617 0
 2548 0036 FFF7FEFF 		bl	xTaskGetSchedulerState
 2549              	.LVL266:
 2550 003a 50B9     		cbnz	r0, .L249
1617:../FreeRTOS/Source/queue.c **** 	}
 2551              		.loc 1 1617 0 is_stmt 0 discriminator 2
 2552 003c 019B     		ldr	r3, [sp, #4]
 2553 003e 53B1     		cbz	r3, .L250
 2554              	.LBB175:
 2555              	.LBB176:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2556              		.loc 2 195 0 is_stmt 1
 2557              		.syntax unified
 2558              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2559 0040 4FF05003 			mov r3, #80												
 2560 0044 83F31188 		msr basepri, r3											
 2561 0048 BFF36F8F 		isb														
 2562 004c BFF34F8F 		dsb														
 2563              	
 2564              	@ 0 "" 2
 2565              	.LVL267:
 2566              		.thumb
 2567              		.syntax unified
 2568              	.L237:
 2569 0050 FEE7     		b	.L237
 2570              	.L249:
 2571              	.LBE176:
 2572              	.LBE175:
 2573 0052 0025     		movs	r5, #0
 2574 0054 3EE0     		b	.L238
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 96


 2575              	.L250:
 2576 0056 0025     		movs	r5, #0
 2577 0058 3CE0     		b	.L238
 2578              	.LVL268:
 2579              	.L255:
 2580              	.LBB177:
1639:../FreeRTOS/Source/queue.c **** 
 2581              		.loc 1 1639 0
 2582 005a E568     		ldr	r5, [r4, #12]
 2583              	.LVL269:
1641:../FreeRTOS/Source/queue.c **** 				traceQUEUE_PEEK( pxQueue );
 2584              		.loc 1 1641 0
 2585 005c 3146     		mov	r1, r6
 2586 005e 2046     		mov	r0, r4
 2587 0060 FFF7FEFF 		bl	prvCopyDataFromQueue
 2588              	.LVL270:
1645:../FreeRTOS/Source/queue.c **** 
 2589              		.loc 1 1645 0
 2590 0064 E560     		str	r5, [r4, #12]
1649:../FreeRTOS/Source/queue.c **** 				{
 2591              		.loc 1 1649 0
 2592 0066 636A     		ldr	r3, [r4, #36]
 2593 0068 23B9     		cbnz	r3, .L253
 2594              	.L240:
1666:../FreeRTOS/Source/queue.c **** 				return pdPASS;
 2595              		.loc 1 1666 0
 2596 006a FFF7FEFF 		bl	vPortExitCritical
 2597              	.LVL271:
1667:../FreeRTOS/Source/queue.c **** 			}
 2598              		.loc 1 1667 0
 2599 006e 0120     		movs	r0, #1
 2600              	.LVL272:
 2601              	.L231:
 2602              	.LBE177:
1747:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2603              		.loc 1 1747 0
 2604 0070 04B0     		add	sp, sp, #16
 2605              	.LCFI35:
 2606              		.cfi_remember_state
 2607              		.cfi_def_cfa_offset 16
 2608              		@ sp needed
 2609 0072 70BD     		pop	{r4, r5, r6, pc}
 2610              	.LVL273:
 2611              	.L253:
 2612              	.LCFI36:
 2613              		.cfi_restore_state
 2614              	.LBB178:
1651:../FreeRTOS/Source/queue.c **** 					{
 2615              		.loc 1 1651 0
 2616 0074 04F12400 		add	r0, r4, #36
 2617 0078 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2618              	.LVL274:
 2619 007c 0028     		cmp	r0, #0
 2620 007e F4D0     		beq	.L240
1654:../FreeRTOS/Source/queue.c **** 					}
 2621              		.loc 1 1654 0
 2622 0080 344B     		ldr	r3, .L260
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 97


 2623 0082 4FF08052 		mov	r2, #268435456
 2624 0086 1A60     		str	r2, [r3]
 2625              		.syntax unified
 2626              	@ 1654 "../FreeRTOS/Source/queue.c" 1
 2627 0088 BFF34F8F 		dsb
 2628              	@ 0 "" 2
 2629              	@ 1654 "../FreeRTOS/Source/queue.c" 1
 2630 008c BFF36F8F 		isb
 2631              	@ 0 "" 2
 2632              		.thumb
 2633              		.syntax unified
 2634 0090 EBE7     		b	.L240
 2635              	.LVL275:
 2636              	.L256:
1675:../FreeRTOS/Source/queue.c **** 					traceQUEUE_PEEK_FAILED( pxQueue );
 2637              		.loc 1 1675 0
 2638 0092 FFF7FEFF 		bl	vPortExitCritical
 2639              	.LVL276:
1677:../FreeRTOS/Source/queue.c **** 				}
 2640              		.loc 1 1677 0
 2641 0096 0020     		movs	r0, #0
 2642 0098 EAE7     		b	.L231
 2643              	.L257:
1684:../FreeRTOS/Source/queue.c **** 					xEntryTimeSet = pdTRUE;
 2644              		.loc 1 1684 0
 2645 009a 02A8     		add	r0, sp, #8
 2646 009c FFF7FEFF 		bl	vTaskInternalSetTimeOutState
 2647              	.LVL277:
1685:../FreeRTOS/Source/queue.c **** 				}
 2648              		.loc 1 1685 0
 2649 00a0 0125     		movs	r5, #1
 2650 00a2 21E0     		b	.L243
 2651              	.LVL278:
 2652              	.L258:
 2653              	.LBE178:
1700:../FreeRTOS/Source/queue.c **** 
 2654              		.loc 1 1700 0 discriminator 1
 2655 00a4 0023     		movs	r3, #0
 2656 00a6 84F84430 		strb	r3, [r4, #68]
 2657 00aa 29E0     		b	.L244
 2658              	.L259:
1700:../FreeRTOS/Source/queue.c **** 
 2659              		.loc 1 1700 0 is_stmt 0 discriminator 4
 2660 00ac 0023     		movs	r3, #0
 2661 00ae 84F84530 		strb	r3, [r4, #69]
 2662 00b2 2BE0     		b	.L245
 2663              	.L247:
1725:../FreeRTOS/Source/queue.c **** 				( void ) xTaskResumeAll();
 2664              		.loc 1 1725 0 is_stmt 1
 2665 00b4 2046     		mov	r0, r4
 2666 00b6 FFF7FEFF 		bl	prvUnlockQueue
 2667              	.LVL279:
1726:../FreeRTOS/Source/queue.c **** 			}
 2668              		.loc 1 1726 0
 2669 00ba FFF7FEFF 		bl	xTaskResumeAll
 2670              	.LVL280:
 2671 00be 09E0     		b	.L238
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 98


 2672              	.L246:
1733:../FreeRTOS/Source/queue.c **** 			( void ) xTaskResumeAll();
 2673              		.loc 1 1733 0
 2674 00c0 2046     		mov	r0, r4
 2675 00c2 FFF7FEFF 		bl	prvUnlockQueue
 2676              	.LVL281:
1734:../FreeRTOS/Source/queue.c **** 
 2677              		.loc 1 1734 0
 2678 00c6 FFF7FEFF 		bl	xTaskResumeAll
 2679              	.LVL282:
1736:../FreeRTOS/Source/queue.c **** 			{
 2680              		.loc 1 1736 0
 2681 00ca 2046     		mov	r0, r4
 2682 00cc FFF7FEFF 		bl	prvIsQueueEmpty
 2683              	.LVL283:
 2684 00d0 0028     		cmp	r0, #0
 2685 00d2 3DD1     		bne	.L254
 2686              	.LVL284:
 2687              	.L238:
1628:../FreeRTOS/Source/queue.c **** 		{
 2688              		.loc 1 1628 0
 2689 00d4 FFF7FEFF 		bl	vPortEnterCritical
 2690              	.LVL285:
 2691              	.LBB179:
1630:../FreeRTOS/Source/queue.c **** 
 2692              		.loc 1 1630 0
 2693 00d8 A36B     		ldr	r3, [r4, #56]
 2694              	.LVL286:
1634:../FreeRTOS/Source/queue.c **** 			{
 2695              		.loc 1 1634 0
 2696 00da 002B     		cmp	r3, #0
 2697 00dc BDD1     		bne	.L255
1671:../FreeRTOS/Source/queue.c **** 				{
 2698              		.loc 1 1671 0
 2699 00de 019B     		ldr	r3, [sp, #4]
 2700              	.LVL287:
 2701 00e0 002B     		cmp	r3, #0
 2702 00e2 D6D0     		beq	.L256
1679:../FreeRTOS/Source/queue.c **** 				{
 2703              		.loc 1 1679 0
 2704 00e4 002D     		cmp	r5, #0
 2705 00e6 D8D0     		beq	.L257
 2706              	.LVL288:
 2707              	.L243:
 2708              	.LBE179:
1694:../FreeRTOS/Source/queue.c **** 
 2709              		.loc 1 1694 0
 2710 00e8 FFF7FEFF 		bl	vPortExitCritical
 2711              	.LVL289:
1699:../FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 2712              		.loc 1 1699 0
 2713 00ec FFF7FEFF 		bl	vTaskSuspendAll
 2714              	.LVL290:
1700:../FreeRTOS/Source/queue.c **** 
 2715              		.loc 1 1700 0
 2716 00f0 FFF7FEFF 		bl	vPortEnterCritical
 2717              	.LVL291:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 99


 2718 00f4 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 2719 00f8 5BB2     		sxtb	r3, r3
 2720 00fa B3F1FF3F 		cmp	r3, #-1
 2721 00fe D1D0     		beq	.L258
 2722              	.L244:
1700:../FreeRTOS/Source/queue.c **** 
 2723              		.loc 1 1700 0 is_stmt 0 discriminator 3
 2724 0100 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 2725 0104 5BB2     		sxtb	r3, r3
 2726 0106 B3F1FF3F 		cmp	r3, #-1
 2727 010a CFD0     		beq	.L259
 2728              	.L245:
1700:../FreeRTOS/Source/queue.c **** 
 2729              		.loc 1 1700 0 discriminator 6
 2730 010c FFF7FEFF 		bl	vPortExitCritical
 2731              	.LVL292:
1703:../FreeRTOS/Source/queue.c **** 		{
 2732              		.loc 1 1703 0 is_stmt 1 discriminator 6
 2733 0110 01A9     		add	r1, sp, #4
 2734 0112 02A8     		add	r0, sp, #8
 2735 0114 FFF7FEFF 		bl	xTaskCheckForTimeOut
 2736              	.LVL293:
 2737 0118 0028     		cmp	r0, #0
 2738 011a D1D1     		bne	.L246
1707:../FreeRTOS/Source/queue.c **** 			{
 2739              		.loc 1 1707 0
 2740 011c 2046     		mov	r0, r4
 2741 011e FFF7FEFF 		bl	prvIsQueueEmpty
 2742              	.LVL294:
 2743 0122 0028     		cmp	r0, #0
 2744 0124 C6D0     		beq	.L247
1710:../FreeRTOS/Source/queue.c **** 				prvUnlockQueue( pxQueue );
 2745              		.loc 1 1710 0
 2746 0126 0199     		ldr	r1, [sp, #4]
 2747 0128 04F12400 		add	r0, r4, #36
 2748 012c FFF7FEFF 		bl	vTaskPlaceOnEventList
 2749              	.LVL295:
1711:../FreeRTOS/Source/queue.c **** 				if( xTaskResumeAll() == pdFALSE )
 2750              		.loc 1 1711 0
 2751 0130 2046     		mov	r0, r4
 2752 0132 FFF7FEFF 		bl	prvUnlockQueue
 2753              	.LVL296:
1712:../FreeRTOS/Source/queue.c **** 				{
 2754              		.loc 1 1712 0
 2755 0136 FFF7FEFF 		bl	xTaskResumeAll
 2756              	.LVL297:
 2757 013a 0028     		cmp	r0, #0
 2758 013c CAD1     		bne	.L238
1714:../FreeRTOS/Source/queue.c **** 				}
 2759              		.loc 1 1714 0
 2760 013e 054B     		ldr	r3, .L260
 2761 0140 4FF08052 		mov	r2, #268435456
 2762 0144 1A60     		str	r2, [r3]
 2763              		.syntax unified
 2764              	@ 1714 "../FreeRTOS/Source/queue.c" 1
 2765 0146 BFF34F8F 		dsb
 2766              	@ 0 "" 2
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 100


 2767              	@ 1714 "../FreeRTOS/Source/queue.c" 1
 2768 014a BFF36F8F 		isb
 2769              	@ 0 "" 2
 2770              		.thumb
 2771              		.syntax unified
 2772 014e C1E7     		b	.L238
 2773              	.L254:
1739:../FreeRTOS/Source/queue.c **** 			}
 2774              		.loc 1 1739 0
 2775 0150 0020     		movs	r0, #0
 2776 0152 8DE7     		b	.L231
 2777              	.L261:
 2778              		.align	2
 2779              	.L260:
 2780 0154 04ED00E0 		.word	-536810236
 2781              		.cfi_endproc
 2782              	.LFE18:
 2784              		.section	.text.xQueueReceiveFromISR,"ax",%progbits
 2785              		.align	1
 2786              		.global	xQueueReceiveFromISR
 2787              		.syntax unified
 2788              		.thumb
 2789              		.thumb_func
 2790              		.fpu fpv4-sp-d16
 2792              	xQueueReceiveFromISR:
 2793              	.LFB19:
1751:../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 2794              		.loc 1 1751 0
 2795              		.cfi_startproc
 2796              		@ args = 0, pretend = 0, frame = 0
 2797              		@ frame_needed = 0, uses_anonymous_args = 0
 2798              	.LVL298:
 2799 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2800              	.LCFI37:
 2801              		.cfi_def_cfa_offset 32
 2802              		.cfi_offset 3, -32
 2803              		.cfi_offset 4, -28
 2804              		.cfi_offset 5, -24
 2805              		.cfi_offset 6, -20
 2806              		.cfi_offset 7, -16
 2807              		.cfi_offset 8, -12
 2808              		.cfi_offset 9, -8
 2809              		.cfi_offset 14, -4
 2810              	.LVL299:
1756:../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2811              		.loc 1 1756 0
 2812 0004 60B1     		cbz	r0, .L274
 2813 0006 0446     		mov	r4, r0
1757:../FreeRTOS/Source/queue.c **** 
 2814              		.loc 1 1757 0
 2815 0008 99B9     		cbnz	r1, .L265
1757:../FreeRTOS/Source/queue.c **** 
 2816              		.loc 1 1757 0 is_stmt 0 discriminator 2
 2817 000a 036C     		ldr	r3, [r0, #64]
 2818 000c 8BB1     		cbz	r3, .L265
 2819              	.LBB180:
 2820              	.LBB181:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 101


 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2821              		.loc 2 195 0 is_stmt 1
 2822              		.syntax unified
 2823              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2824 000e 4FF05003 			mov r3, #80												
 2825 0012 83F31188 		msr basepri, r3											
 2826 0016 BFF36F8F 		isb														
 2827 001a BFF34F8F 		dsb														
 2828              	
 2829              	@ 0 "" 2
 2830              	.LVL300:
 2831              		.thumb
 2832              		.syntax unified
 2833              	.L266:
 2834 001e FEE7     		b	.L266
 2835              	.L274:
 2836              	.LBE181:
 2837              	.LBE180:
 2838              	.LBB182:
 2839              	.LBB183:
 2840              		.syntax unified
 2841              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2842 0020 4FF05003 			mov r3, #80												
 2843 0024 83F31188 		msr basepri, r3											
 2844 0028 BFF36F8F 		isb														
 2845 002c BFF34F8F 		dsb														
 2846              	
 2847              	@ 0 "" 2
 2848              	.LVL301:
 2849              		.thumb
 2850              		.syntax unified
 2851              	.L264:
 2852 0030 FEE7     		b	.L264
 2853              	.L265:
 2854 0032 1746     		mov	r7, r2
 2855 0034 8946     		mov	r9, r1
 2856              	.LBE183:
 2857              	.LBE182:
1773:../FreeRTOS/Source/queue.c **** 
 2858              		.loc 1 1773 0
 2859 0036 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2860              	.LVL302:
 2861              	.LBB184:
 2862              	.LBB185:
 211:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2863              		.loc 2 211 0
 2864              		.syntax unified
 2865              	@ 211 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2866 003a EFF31186 			mrs r6, basepri											
 2867 003e 4FF05003 		mov r3, #80												
 2868 0042 83F31188 		msr basepri, r3											
 2869 0046 BFF36F8F 		isb														
 2870 004a BFF34F8F 		dsb														
 2871              	
 2872              	@ 0 "" 2
 2873              		.thumb
 2874              		.syntax unified
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 102


 2875              	.LBE185:
 2876              	.LBE184:
 2877              	.LBB186:
1777:../FreeRTOS/Source/queue.c **** 
 2878              		.loc 1 1777 0
 2879 004e D4F83880 		ldr	r8, [r4, #56]
 2880              	.LVL303:
1780:../FreeRTOS/Source/queue.c **** 		{
 2881              		.loc 1 1780 0
 2882 0052 B8F1000F 		cmp	r8, #0
 2883 0056 1DD0     		beq	.L269
 2884              	.LBB187:
1782:../FreeRTOS/Source/queue.c **** 
 2885              		.loc 1 1782 0
 2886 0058 94F84450 		ldrb	r5, [r4, #68]	@ zero_extendqisi2
 2887 005c 6DB2     		sxtb	r5, r5
 2888              	.LVL304:
1786:../FreeRTOS/Source/queue.c **** 			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 2889              		.loc 1 1786 0
 2890 005e 4946     		mov	r1, r9
 2891 0060 2046     		mov	r0, r4
 2892 0062 FFF7FEFF 		bl	prvCopyDataFromQueue
 2893              	.LVL305:
1787:../FreeRTOS/Source/queue.c **** 
 2894              		.loc 1 1787 0
 2895 0066 08F1FF33 		add	r3, r8, #-1
 2896 006a A363     		str	r3, [r4, #56]
1793:../FreeRTOS/Source/queue.c **** 			{
 2897              		.loc 1 1793 0
 2898 006c B5F1FF3F 		cmp	r5, #-1
 2899 0070 05D0     		beq	.L275
1824:../FreeRTOS/Source/queue.c **** 			}
 2900              		.loc 1 1824 0
 2901 0072 6B1C     		adds	r3, r5, #1
 2902 0074 5BB2     		sxtb	r3, r3
 2903 0076 84F84430 		strb	r3, [r4, #68]
1827:../FreeRTOS/Source/queue.c **** 		}
 2904              		.loc 1 1827 0
 2905 007a 0120     		movs	r0, #1
 2906 007c 0BE0     		b	.L267
 2907              	.L275:
1795:../FreeRTOS/Source/queue.c **** 				{
 2908              		.loc 1 1795 0
 2909 007e 2369     		ldr	r3, [r4, #16]
 2910 0080 6BB1     		cbz	r3, .L270
1797:../FreeRTOS/Source/queue.c **** 					{
 2911              		.loc 1 1797 0
 2912 0082 04F11000 		add	r0, r4, #16
 2913 0086 FFF7FEFF 		bl	xTaskRemoveFromEventList
 2914              	.LVL306:
 2915 008a 50B1     		cbz	r0, .L271
1801:../FreeRTOS/Source/queue.c **** 						{
 2916              		.loc 1 1801 0
 2917 008c 5FB1     		cbz	r7, .L272
1803:../FreeRTOS/Source/queue.c **** 						}
 2918              		.loc 1 1803 0
 2919 008e 0120     		movs	r0, #1
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 103


 2920 0090 3860     		str	r0, [r7]
 2921 0092 00E0     		b	.L267
 2922              	.LVL307:
 2923              	.L269:
 2924              	.LBE187:
1831:../FreeRTOS/Source/queue.c **** 			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 2925              		.loc 1 1831 0
 2926 0094 0020     		movs	r0, #0
 2927              	.L267:
 2928              	.LVL308:
 2929              	.LBE186:
 2930              	.LBB189:
 2931              	.LBB190:
 2932              		.loc 2 229 0
 2933              		.syntax unified
 2934              	@ 229 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2935 0096 86F31188 			msr basepri, r6	
 2936              	@ 0 "" 2
 2937              	.LVL309:
 2938              		.thumb
 2939              		.syntax unified
 2940              	.LBE190:
 2941              	.LBE189:
1838:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 2942              		.loc 1 1838 0
 2943 009a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2944              	.LVL310:
 2945              	.L270:
 2946              	.LBB191:
 2947              	.LBB188:
1827:../FreeRTOS/Source/queue.c **** 		}
 2948              		.loc 1 1827 0
 2949 009e 0120     		movs	r0, #1
 2950 00a0 F9E7     		b	.L267
 2951              	.L271:
 2952 00a2 0120     		movs	r0, #1
 2953 00a4 F7E7     		b	.L267
 2954              	.L272:
 2955 00a6 0120     		movs	r0, #1
 2956 00a8 F5E7     		b	.L267
 2957              	.LBE188:
 2958              	.LBE191:
 2959              		.cfi_endproc
 2960              	.LFE19:
 2962              		.section	.text.xQueuePeekFromISR,"ax",%progbits
 2963              		.align	1
 2964              		.global	xQueuePeekFromISR
 2965              		.syntax unified
 2966              		.thumb
 2967              		.thumb_func
 2968              		.fpu fpv4-sp-d16
 2970              	xQueuePeekFromISR:
 2971              	.LFB20:
1842:../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 2972              		.loc 1 1842 0
 2973              		.cfi_startproc
 2974              		@ args = 0, pretend = 0, frame = 0
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 104


 2975              		@ frame_needed = 0, uses_anonymous_args = 0
 2976              	.LVL311:
 2977 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2978              	.LCFI38:
 2979              		.cfi_def_cfa_offset 24
 2980              		.cfi_offset 3, -24
 2981              		.cfi_offset 4, -20
 2982              		.cfi_offset 5, -16
 2983              		.cfi_offset 6, -12
 2984              		.cfi_offset 7, -8
 2985              		.cfi_offset 14, -4
 2986              	.LVL312:
1848:../FreeRTOS/Source/queue.c **** 	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 2987              		.loc 1 1848 0
 2988 0002 60B1     		cbz	r0, .L286
 2989 0004 0446     		mov	r4, r0
1849:../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2990              		.loc 1 1849 0
 2991 0006 99B9     		cbnz	r1, .L279
1849:../FreeRTOS/Source/queue.c **** 	configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 2992              		.loc 1 1849 0 is_stmt 0 discriminator 2
 2993 0008 036C     		ldr	r3, [r0, #64]
 2994 000a 8BB1     		cbz	r3, .L279
 2995              	.LBB192:
 2996              	.LBB193:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2997              		.loc 2 195 0 is_stmt 1
 2998              		.syntax unified
 2999              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3000 000c 4FF05003 			mov r3, #80												
 3001 0010 83F31188 		msr basepri, r3											
 3002 0014 BFF36F8F 		isb														
 3003 0018 BFF34F8F 		dsb														
 3004              	
 3005              	@ 0 "" 2
 3006              	.LVL313:
 3007              		.thumb
 3008              		.syntax unified
 3009              	.L280:
 3010 001c FEE7     		b	.L280
 3011              	.L286:
 3012              	.LBE193:
 3013              	.LBE192:
 3014              	.LBB194:
 3015              	.LBB195:
 3016              		.syntax unified
 3017              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3018 001e 4FF05003 			mov r3, #80												
 3019 0022 83F31188 		msr basepri, r3											
 3020 0026 BFF36F8F 		isb														
 3021 002a BFF34F8F 		dsb														
 3022              	
 3023              	@ 0 "" 2
 3024              	.LVL314:
 3025              		.thumb
 3026              		.syntax unified
 3027              	.L278:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 105


 3028 002e FEE7     		b	.L278
 3029              	.L279:
 3030              	.LBE195:
 3031              	.LBE194:
1850:../FreeRTOS/Source/queue.c **** 
 3032              		.loc 1 1850 0
 3033 0030 236C     		ldr	r3, [r4, #64]
 3034 0032 43B9     		cbnz	r3, .L281
 3035              	.LBB196:
 3036              	.LBB197:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3037              		.loc 2 195 0
 3038              		.syntax unified
 3039              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3040 0034 4FF05003 			mov r3, #80												
 3041 0038 83F31188 		msr basepri, r3											
 3042 003c BFF36F8F 		isb														
 3043 0040 BFF34F8F 		dsb														
 3044              	
 3045              	@ 0 "" 2
 3046              	.LVL315:
 3047              		.thumb
 3048              		.syntax unified
 3049              	.L282:
 3050 0044 FEE7     		b	.L282
 3051              	.L281:
 3052 0046 0D46     		mov	r5, r1
 3053              	.LBE197:
 3054              	.LBE196:
1866:../FreeRTOS/Source/queue.c **** 
 3055              		.loc 1 1866 0
 3056 0048 FFF7FEFF 		bl	vPortValidateInterruptPriority
 3057              	.LVL316:
 3058              	.LBB198:
 3059              	.LBB199:
 211:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3060              		.loc 2 211 0
 3061              		.syntax unified
 3062              	@ 211 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3063 004c EFF31186 			mrs r6, basepri											
 3064 0050 4FF05003 		mov r3, #80												
 3065 0054 83F31188 		msr basepri, r3											
 3066 0058 BFF36F8F 		isb														
 3067 005c BFF34F8F 		dsb														
 3068              	
 3069              	@ 0 "" 2
 3070              		.thumb
 3071              		.syntax unified
 3072              	.LBE199:
 3073              	.LBE198:
1871:../FreeRTOS/Source/queue.c **** 		{
 3074              		.loc 1 1871 0
 3075 0060 A36B     		ldr	r3, [r4, #56]
 3076 0062 4BB1     		cbz	r3, .L284
1877:../FreeRTOS/Source/queue.c **** 			prvCopyDataFromQueue( pxQueue, pvBuffer );
 3077              		.loc 1 1877 0
 3078 0064 E768     		ldr	r7, [r4, #12]
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 106


 3079              	.LVL317:
1878:../FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 3080              		.loc 1 1878 0
 3081 0066 2946     		mov	r1, r5
 3082 0068 2046     		mov	r0, r4
 3083 006a FFF7FEFF 		bl	prvCopyDataFromQueue
 3084              	.LVL318:
1879:../FreeRTOS/Source/queue.c **** 
 3085              		.loc 1 1879 0
 3086 006e E760     		str	r7, [r4, #12]
 3087              	.LVL319:
1881:../FreeRTOS/Source/queue.c **** 		}
 3088              		.loc 1 1881 0
 3089 0070 0120     		movs	r0, #1
 3090              	.LVL320:
 3091              	.L283:
 3092              	.LBB200:
 3093              	.LBB201:
 3094              		.loc 2 229 0
 3095              		.syntax unified
 3096              	@ 229 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3097 0072 86F31188 			msr basepri, r6	
 3098              	@ 0 "" 2
 3099              	.LVL321:
 3100              		.thumb
 3101              		.syntax unified
 3102              	.LBE201:
 3103              	.LBE200:
1892:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3104              		.loc 1 1892 0
 3105 0076 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3106              	.LVL322:
 3107              	.L284:
1885:../FreeRTOS/Source/queue.c **** 			traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
 3108              		.loc 1 1885 0
 3109 0078 0020     		movs	r0, #0
 3110 007a FAE7     		b	.L283
 3111              		.cfi_endproc
 3112              	.LFE20:
 3114              		.section	.text.uxQueueMessagesWaiting,"ax",%progbits
 3115              		.align	1
 3116              		.global	uxQueueMessagesWaiting
 3117              		.syntax unified
 3118              		.thumb
 3119              		.thumb_func
 3120              		.fpu fpv4-sp-d16
 3122              	uxQueueMessagesWaiting:
 3123              	.LFB21:
1896:../FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 3124              		.loc 1 1896 0
 3125              		.cfi_startproc
 3126              		@ args = 0, pretend = 0, frame = 0
 3127              		@ frame_needed = 0, uses_anonymous_args = 0
 3128              	.LVL323:
1899:../FreeRTOS/Source/queue.c **** 
 3129              		.loc 1 1899 0
 3130 0000 40B9     		cbnz	r0, .L288
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 107


 3131              	.LBB202:
 3132              	.LBB203:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3133              		.loc 2 195 0
 3134              		.syntax unified
 3135              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3136 0002 4FF05003 			mov r3, #80												
 3137 0006 83F31188 		msr basepri, r3											
 3138 000a BFF36F8F 		isb														
 3139 000e BFF34F8F 		dsb														
 3140              	
 3141              	@ 0 "" 2
 3142              	.LVL324:
 3143              		.thumb
 3144              		.syntax unified
 3145              	.L289:
 3146 0012 FEE7     		b	.L289
 3147              	.L288:
 3148              	.LBE203:
 3149              	.LBE202:
1896:../FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 3150              		.loc 1 1896 0
 3151 0014 10B5     		push	{r4, lr}
 3152              	.LCFI39:
 3153              		.cfi_def_cfa_offset 8
 3154              		.cfi_offset 4, -8
 3155              		.cfi_offset 14, -4
 3156 0016 0446     		mov	r4, r0
1901:../FreeRTOS/Source/queue.c **** 	{
 3157              		.loc 1 1901 0
 3158 0018 FFF7FEFF 		bl	vPortEnterCritical
 3159              	.LVL325:
1903:../FreeRTOS/Source/queue.c **** 	}
 3160              		.loc 1 1903 0
 3161 001c A46B     		ldr	r4, [r4, #56]
 3162              	.LVL326:
1905:../FreeRTOS/Source/queue.c **** 
 3163              		.loc 1 1905 0
 3164 001e FFF7FEFF 		bl	vPortExitCritical
 3165              	.LVL327:
1908:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3166              		.loc 1 1908 0
 3167 0022 2046     		mov	r0, r4
 3168 0024 10BD     		pop	{r4, pc}
 3169              		.cfi_endproc
 3170              	.LFE21:
 3172              		.section	.text.uxQueueSpacesAvailable,"ax",%progbits
 3173              		.align	1
 3174              		.global	uxQueueSpacesAvailable
 3175              		.syntax unified
 3176              		.thumb
 3177              		.thumb_func
 3178              		.fpu fpv4-sp-d16
 3180              	uxQueueSpacesAvailable:
 3181              	.LFB22:
1912:../FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 3182              		.loc 1 1912 0
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 108


 3183              		.cfi_startproc
 3184              		@ args = 0, pretend = 0, frame = 0
 3185              		@ frame_needed = 0, uses_anonymous_args = 0
 3186              	.LVL328:
1917:../FreeRTOS/Source/queue.c **** 
 3187              		.loc 1 1917 0
 3188 0000 40B9     		cbnz	r0, .L293
 3189              	.LBB204:
 3190              	.LBB205:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3191              		.loc 2 195 0
 3192              		.syntax unified
 3193              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3194 0002 4FF05003 			mov r3, #80												
 3195 0006 83F31188 		msr basepri, r3											
 3196 000a BFF36F8F 		isb														
 3197 000e BFF34F8F 		dsb														
 3198              	
 3199              	@ 0 "" 2
 3200              	.LVL329:
 3201              		.thumb
 3202              		.syntax unified
 3203              	.L294:
 3204 0012 FEE7     		b	.L294
 3205              	.L293:
 3206              	.LBE205:
 3207              	.LBE204:
1912:../FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 3208              		.loc 1 1912 0
 3209 0014 10B5     		push	{r4, lr}
 3210              	.LCFI40:
 3211              		.cfi_def_cfa_offset 8
 3212              		.cfi_offset 4, -8
 3213              		.cfi_offset 14, -4
 3214 0016 0446     		mov	r4, r0
1919:../FreeRTOS/Source/queue.c **** 	{
 3215              		.loc 1 1919 0
 3216 0018 FFF7FEFF 		bl	vPortEnterCritical
 3217              	.LVL330:
1921:../FreeRTOS/Source/queue.c **** 	}
 3218              		.loc 1 1921 0
 3219 001c E36B     		ldr	r3, [r4, #60]
 3220 001e A46B     		ldr	r4, [r4, #56]
 3221              	.LVL331:
 3222 0020 1C1B     		subs	r4, r3, r4
 3223              	.LVL332:
1923:../FreeRTOS/Source/queue.c **** 
 3224              		.loc 1 1923 0
 3225 0022 FFF7FEFF 		bl	vPortExitCritical
 3226              	.LVL333:
1926:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3227              		.loc 1 1926 0
 3228 0026 2046     		mov	r0, r4
 3229 0028 10BD     		pop	{r4, pc}
 3230              		.cfi_endproc
 3231              	.LFE22:
 3233              		.section	.text.uxQueueMessagesWaitingFromISR,"ax",%progbits
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 109


 3234              		.align	1
 3235              		.global	uxQueueMessagesWaitingFromISR
 3236              		.syntax unified
 3237              		.thumb
 3238              		.thumb_func
 3239              		.fpu fpv4-sp-d16
 3241              	uxQueueMessagesWaitingFromISR:
 3242              	.LFB23:
1930:../FreeRTOS/Source/queue.c **** UBaseType_t uxReturn;
 3243              		.loc 1 1930 0
 3244              		.cfi_startproc
 3245              		@ args = 0, pretend = 0, frame = 0
 3246              		@ frame_needed = 0, uses_anonymous_args = 0
 3247              		@ link register save eliminated.
 3248              	.LVL334:
1933:../FreeRTOS/Source/queue.c **** 
 3249              		.loc 1 1933 0
 3250 0000 08B1     		cbz	r0, .L300
1935:../FreeRTOS/Source/queue.c **** 
 3251              		.loc 1 1935 0
 3252 0002 806B     		ldr	r0, [r0, #56]
 3253              	.LVL335:
1938:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3254              		.loc 1 1938 0
 3255 0004 7047     		bx	lr
 3256              	.LVL336:
 3257              	.L300:
 3258              	.LBB206:
 3259              	.LBB207:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3260              		.loc 2 195 0
 3261              		.syntax unified
 3262              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3263 0006 4FF05003 			mov r3, #80												
 3264 000a 83F31188 		msr basepri, r3											
 3265 000e BFF36F8F 		isb														
 3266 0012 BFF34F8F 		dsb														
 3267              	
 3268              	@ 0 "" 2
 3269              	.LVL337:
 3270              		.thumb
 3271              		.syntax unified
 3272              	.L299:
 3273 0016 FEE7     		b	.L299
 3274              	.LBE207:
 3275              	.LBE206:
 3276              		.cfi_endproc
 3277              	.LFE23:
 3279              		.section	.text.uxQueueGetQueueNumber,"ax",%progbits
 3280              		.align	1
 3281              		.global	uxQueueGetQueueNumber
 3282              		.syntax unified
 3283              		.thumb
 3284              		.thumb_func
 3285              		.fpu fpv4-sp-d16
 3287              	uxQueueGetQueueNumber:
 3288              	.LFB25:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 110


1986:../FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 3289              		.loc 1 1986 0
 3290              		.cfi_startproc
 3291              		@ args = 0, pretend = 0, frame = 0
 3292              		@ frame_needed = 0, uses_anonymous_args = 0
 3293              		@ link register save eliminated.
 3294              	.LVL338:
1988:../FreeRTOS/Source/queue.c **** 
 3295              		.loc 1 1988 0
 3296 0000 806C     		ldr	r0, [r0, #72]
 3297              	.LVL339:
 3298 0002 7047     		bx	lr
 3299              		.cfi_endproc
 3300              	.LFE25:
 3302              		.section	.text.vQueueSetQueueNumber,"ax",%progbits
 3303              		.align	1
 3304              		.global	vQueueSetQueueNumber
 3305              		.syntax unified
 3306              		.thumb
 3307              		.thumb_func
 3308              		.fpu fpv4-sp-d16
 3310              	vQueueSetQueueNumber:
 3311              	.LFB26:
1996:../FreeRTOS/Source/queue.c **** 		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 3312              		.loc 1 1996 0
 3313              		.cfi_startproc
 3314              		@ args = 0, pretend = 0, frame = 0
 3315              		@ frame_needed = 0, uses_anonymous_args = 0
 3316              		@ link register save eliminated.
 3317              	.LVL340:
1997:../FreeRTOS/Source/queue.c **** 	}
 3318              		.loc 1 1997 0
 3319 0000 8164     		str	r1, [r0, #72]
1998:../FreeRTOS/Source/queue.c **** 
 3320              		.loc 1 1998 0
 3321 0002 7047     		bx	lr
 3322              		.cfi_endproc
 3323              	.LFE26:
 3325              		.section	.text.ucQueueGetQueueType,"ax",%progbits
 3326              		.align	1
 3327              		.global	ucQueueGetQueueType
 3328              		.syntax unified
 3329              		.thumb
 3330              		.thumb_func
 3331              		.fpu fpv4-sp-d16
 3333              	ucQueueGetQueueType:
 3334              	.LFB27:
2006:../FreeRTOS/Source/queue.c **** 		return ( ( Queue_t * ) xQueue )->ucQueueType;
 3335              		.loc 1 2006 0
 3336              		.cfi_startproc
 3337              		@ args = 0, pretend = 0, frame = 0
 3338              		@ frame_needed = 0, uses_anonymous_args = 0
 3339              		@ link register save eliminated.
 3340              	.LVL341:
2008:../FreeRTOS/Source/queue.c **** 
 3341              		.loc 1 2008 0
 3342 0000 90F84C00 		ldrb	r0, [r0, #76]	@ zero_extendqisi2
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 111


 3343              	.LVL342:
 3344 0004 7047     		bx	lr
 3345              		.cfi_endproc
 3346              	.LFE27:
 3348              		.section	.text.xQueueIsQueueEmptyFromISR,"ax",%progbits
 3349              		.align	1
 3350              		.global	xQueueIsQueueEmptyFromISR
 3351              		.syntax unified
 3352              		.thumb
 3353              		.thumb_func
 3354              		.fpu fpv4-sp-d16
 3356              	xQueueIsQueueEmptyFromISR:
 3357              	.LFB33:
2279:../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
 3358              		.loc 1 2279 0
 3359              		.cfi_startproc
 3360              		@ args = 0, pretend = 0, frame = 0
 3361              		@ frame_needed = 0, uses_anonymous_args = 0
 3362              		@ link register save eliminated.
 3363              	.LVL343:
2282:../FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( UBaseType_t ) 0 )
 3364              		.loc 1 2282 0
 3365 0000 18B1     		cbz	r0, .L309
2283:../FreeRTOS/Source/queue.c **** 	{
 3366              		.loc 1 2283 0
 3367 0002 836B     		ldr	r3, [r0, #56]
 3368 0004 53B9     		cbnz	r3, .L308
2285:../FreeRTOS/Source/queue.c **** 	}
 3369              		.loc 1 2285 0
 3370 0006 0120     		movs	r0, #1
 3371              	.LVL344:
 3372 0008 7047     		bx	lr
 3373              	.LVL345:
 3374              	.L309:
 3375              	.LBB208:
 3376              	.LBB209:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3377              		.loc 2 195 0
 3378              		.syntax unified
 3379              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3380 000a 4FF05003 			mov r3, #80												
 3381 000e 83F31188 		msr basepri, r3											
 3382 0012 BFF36F8F 		isb														
 3383 0016 BFF34F8F 		dsb														
 3384              	
 3385              	@ 0 "" 2
 3386              	.LVL346:
 3387              		.thumb
 3388              		.syntax unified
 3389              	.L306:
 3390 001a FEE7     		b	.L306
 3391              	.L308:
 3392              	.LBE209:
 3393              	.LBE208:
2289:../FreeRTOS/Source/queue.c **** 	}
 3394              		.loc 1 2289 0
 3395 001c 0020     		movs	r0, #0
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 112


 3396              	.LVL347:
2293:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3397              		.loc 1 2293 0
 3398 001e 7047     		bx	lr
 3399              		.cfi_endproc
 3400              	.LFE33:
 3402              		.section	.text.xQueueIsQueueFullFromISR,"ax",%progbits
 3403              		.align	1
 3404              		.global	xQueueIsQueueFullFromISR
 3405              		.syntax unified
 3406              		.thumb
 3407              		.thumb_func
 3408              		.fpu fpv4-sp-d16
 3410              	xQueueIsQueueFullFromISR:
 3411              	.LFB35:
2315:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2316:../FreeRTOS/Source/queue.c **** 
2317:../FreeRTOS/Source/queue.c **** BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
2318:../FreeRTOS/Source/queue.c **** {
 3412              		.loc 1 2318 0
 3413              		.cfi_startproc
 3414              		@ args = 0, pretend = 0, frame = 0
 3415              		@ frame_needed = 0, uses_anonymous_args = 0
 3416              		@ link register save eliminated.
 3417              	.LVL348:
2319:../FreeRTOS/Source/queue.c **** BaseType_t xReturn;
2320:../FreeRTOS/Source/queue.c **** 
2321:../FreeRTOS/Source/queue.c **** 	configASSERT( xQueue );
 3418              		.loc 1 2321 0
 3419 0000 28B1     		cbz	r0, .L315
2322:../FreeRTOS/Source/queue.c **** 	if( ( ( Queue_t * ) xQueue )->uxMessagesWaiting == ( ( Queue_t * ) xQueue )->uxLength )
 3420              		.loc 1 2322 0
 3421 0002 826B     		ldr	r2, [r0, #56]
 3422 0004 C36B     		ldr	r3, [r0, #60]
 3423 0006 9A42     		cmp	r2, r3
 3424 0008 0AD1     		bne	.L314
2323:../FreeRTOS/Source/queue.c **** 	{
2324:../FreeRTOS/Source/queue.c **** 		xReturn = pdTRUE;
 3425              		.loc 1 2324 0
 3426 000a 0120     		movs	r0, #1
 3427              	.LVL349:
 3428 000c 7047     		bx	lr
 3429              	.LVL350:
 3430              	.L315:
 3431              	.LBB210:
 3432              	.LBB211:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3433              		.loc 2 195 0
 3434              		.syntax unified
 3435              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3436 000e 4FF05003 			mov r3, #80												
 3437 0012 83F31188 		msr basepri, r3											
 3438 0016 BFF36F8F 		isb														
 3439 001a BFF34F8F 		dsb														
 3440              	
 3441              	@ 0 "" 2
 3442              	.LVL351:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 113


 3443              		.thumb
 3444              		.syntax unified
 3445              	.L312:
 3446 001e FEE7     		b	.L312
 3447              	.L314:
 3448              	.LBE211:
 3449              	.LBE210:
2325:../FreeRTOS/Source/queue.c **** 	}
2326:../FreeRTOS/Source/queue.c **** 	else
2327:../FreeRTOS/Source/queue.c **** 	{
2328:../FreeRTOS/Source/queue.c **** 		xReturn = pdFALSE;
 3450              		.loc 1 2328 0
 3451 0020 0020     		movs	r0, #0
 3452              	.LVL352:
2329:../FreeRTOS/Source/queue.c **** 	}
2330:../FreeRTOS/Source/queue.c **** 
2331:../FreeRTOS/Source/queue.c **** 	return xReturn;
2332:../FreeRTOS/Source/queue.c **** } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3453              		.loc 1 2332 0
 3454 0022 7047     		bx	lr
 3455              		.cfi_endproc
 3456              	.LFE35:
 3458              		.section	.text.vQueueAddToRegistry,"ax",%progbits
 3459              		.align	1
 3460              		.global	vQueueAddToRegistry
 3461              		.syntax unified
 3462              		.thumb
 3463              		.thumb_func
 3464              		.fpu fpv4-sp-d16
 3466              	vQueueAddToRegistry:
 3467              	.LFB36:
2333:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2334:../FreeRTOS/Source/queue.c **** 
2335:../FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2336:../FreeRTOS/Source/queue.c **** 
2337:../FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSend( QueueHandle_t xQueue, const void *pvItemToQueue, TickType_t xTicksToWait 
2338:../FreeRTOS/Source/queue.c **** 	{
2339:../FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2340:../FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2341:../FreeRTOS/Source/queue.c **** 
2342:../FreeRTOS/Source/queue.c **** 		/* If the queue is already full we may have to block.  A critical section
2343:../FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt removing something from the queue
2344:../FreeRTOS/Source/queue.c **** 		between the check to see if the queue is full and blocking on the queue. */
2345:../FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2346:../FreeRTOS/Source/queue.c **** 		{
2347:../FreeRTOS/Source/queue.c **** 			if( prvIsQueueFull( pxQueue ) != pdFALSE )
2348:../FreeRTOS/Source/queue.c **** 			{
2349:../FreeRTOS/Source/queue.c **** 				/* The queue is full - do we want to block or just leave without
2350:../FreeRTOS/Source/queue.c **** 				posting? */
2351:../FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2352:../FreeRTOS/Source/queue.c **** 				{
2353:../FreeRTOS/Source/queue.c **** 					/* As this is called from a coroutine we cannot block directly, but
2354:../FreeRTOS/Source/queue.c **** 					return indicating that we need to block. */
2355:../FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToSend ) );
2356:../FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2357:../FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2358:../FreeRTOS/Source/queue.c **** 				}
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 114


2359:../FreeRTOS/Source/queue.c **** 				else
2360:../FreeRTOS/Source/queue.c **** 				{
2361:../FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2362:../FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2363:../FreeRTOS/Source/queue.c **** 				}
2364:../FreeRTOS/Source/queue.c **** 			}
2365:../FreeRTOS/Source/queue.c **** 		}
2366:../FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2367:../FreeRTOS/Source/queue.c **** 
2368:../FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2369:../FreeRTOS/Source/queue.c **** 		{
2370:../FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2371:../FreeRTOS/Source/queue.c **** 			{
2372:../FreeRTOS/Source/queue.c **** 				/* There is room in the queue, copy the data into the queue. */
2373:../FreeRTOS/Source/queue.c **** 				prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2374:../FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2375:../FreeRTOS/Source/queue.c **** 
2376:../FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for data to become available? */
2377:../FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2378:../FreeRTOS/Source/queue.c **** 				{
2379:../FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2380:../FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
2381:../FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2382:../FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2383:../FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2384:../FreeRTOS/Source/queue.c **** 					{
2385:../FreeRTOS/Source/queue.c **** 						/* The co-routine waiting has a higher priority so record
2386:../FreeRTOS/Source/queue.c **** 						that a yield might be appropriate. */
2387:../FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2388:../FreeRTOS/Source/queue.c **** 					}
2389:../FreeRTOS/Source/queue.c **** 					else
2390:../FreeRTOS/Source/queue.c **** 					{
2391:../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2392:../FreeRTOS/Source/queue.c **** 					}
2393:../FreeRTOS/Source/queue.c **** 				}
2394:../FreeRTOS/Source/queue.c **** 				else
2395:../FreeRTOS/Source/queue.c **** 				{
2396:../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2397:../FreeRTOS/Source/queue.c **** 				}
2398:../FreeRTOS/Source/queue.c **** 			}
2399:../FreeRTOS/Source/queue.c **** 			else
2400:../FreeRTOS/Source/queue.c **** 			{
2401:../FreeRTOS/Source/queue.c **** 				xReturn = errQUEUE_FULL;
2402:../FreeRTOS/Source/queue.c **** 			}
2403:../FreeRTOS/Source/queue.c **** 		}
2404:../FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2405:../FreeRTOS/Source/queue.c **** 
2406:../FreeRTOS/Source/queue.c **** 		return xReturn;
2407:../FreeRTOS/Source/queue.c **** 	}
2408:../FreeRTOS/Source/queue.c **** 
2409:../FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2410:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2411:../FreeRTOS/Source/queue.c **** 
2412:../FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2413:../FreeRTOS/Source/queue.c **** 
2414:../FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceive( QueueHandle_t xQueue, void *pvBuffer, TickType_t xTicksToWait )
2415:../FreeRTOS/Source/queue.c **** 	{
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 115


2416:../FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2417:../FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2418:../FreeRTOS/Source/queue.c **** 
2419:../FreeRTOS/Source/queue.c **** 		/* If the queue is already empty we may have to block.  A critical section
2420:../FreeRTOS/Source/queue.c **** 		is required to prevent an interrupt adding something to the queue
2421:../FreeRTOS/Source/queue.c **** 		between the check to see if the queue is empty and blocking on the queue. */
2422:../FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2423:../FreeRTOS/Source/queue.c **** 		{
2424:../FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
2425:../FreeRTOS/Source/queue.c **** 			{
2426:../FreeRTOS/Source/queue.c **** 				/* There are no messages in the queue, do we want to block or just
2427:../FreeRTOS/Source/queue.c **** 				leave with nothing? */
2428:../FreeRTOS/Source/queue.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
2429:../FreeRTOS/Source/queue.c **** 				{
2430:../FreeRTOS/Source/queue.c **** 					/* As this is a co-routine we cannot block directly, but return
2431:../FreeRTOS/Source/queue.c **** 					indicating that we need to block. */
2432:../FreeRTOS/Source/queue.c **** 					vCoRoutineAddToDelayedList( xTicksToWait, &( pxQueue->xTasksWaitingToReceive ) );
2433:../FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2434:../FreeRTOS/Source/queue.c **** 					return errQUEUE_BLOCKED;
2435:../FreeRTOS/Source/queue.c **** 				}
2436:../FreeRTOS/Source/queue.c **** 				else
2437:../FreeRTOS/Source/queue.c **** 				{
2438:../FreeRTOS/Source/queue.c **** 					portENABLE_INTERRUPTS();
2439:../FreeRTOS/Source/queue.c **** 					return errQUEUE_FULL;
2440:../FreeRTOS/Source/queue.c **** 				}
2441:../FreeRTOS/Source/queue.c **** 			}
2442:../FreeRTOS/Source/queue.c **** 			else
2443:../FreeRTOS/Source/queue.c **** 			{
2444:../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2445:../FreeRTOS/Source/queue.c **** 			}
2446:../FreeRTOS/Source/queue.c **** 		}
2447:../FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2448:../FreeRTOS/Source/queue.c **** 
2449:../FreeRTOS/Source/queue.c **** 		portDISABLE_INTERRUPTS();
2450:../FreeRTOS/Source/queue.c **** 		{
2451:../FreeRTOS/Source/queue.c **** 			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2452:../FreeRTOS/Source/queue.c **** 			{
2453:../FreeRTOS/Source/queue.c **** 				/* Data is available from the queue. */
2454:../FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2455:../FreeRTOS/Source/queue.c **** 				if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2456:../FreeRTOS/Source/queue.c **** 				{
2457:../FreeRTOS/Source/queue.c **** 					pxQueue->u.pcReadFrom = pxQueue->pcHead;
2458:../FreeRTOS/Source/queue.c **** 				}
2459:../FreeRTOS/Source/queue.c **** 				else
2460:../FreeRTOS/Source/queue.c **** 				{
2461:../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2462:../FreeRTOS/Source/queue.c **** 				}
2463:../FreeRTOS/Source/queue.c **** 				--( pxQueue->uxMessagesWaiting );
2464:../FreeRTOS/Source/queue.c **** 				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->u
2465:../FreeRTOS/Source/queue.c **** 
2466:../FreeRTOS/Source/queue.c **** 				xReturn = pdPASS;
2467:../FreeRTOS/Source/queue.c **** 
2468:../FreeRTOS/Source/queue.c **** 				/* Were any co-routines waiting for space to become available? */
2469:../FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2470:../FreeRTOS/Source/queue.c **** 				{
2471:../FreeRTOS/Source/queue.c **** 					/* In this instance the co-routine could be placed directly
2472:../FreeRTOS/Source/queue.c **** 					into the ready list as we are within a critical section.
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 116


2473:../FreeRTOS/Source/queue.c **** 					Instead the same pending ready list mechanism is used as if
2474:../FreeRTOS/Source/queue.c **** 					the event were caused from within an interrupt. */
2475:../FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2476:../FreeRTOS/Source/queue.c **** 					{
2477:../FreeRTOS/Source/queue.c **** 						xReturn = errQUEUE_YIELD;
2478:../FreeRTOS/Source/queue.c **** 					}
2479:../FreeRTOS/Source/queue.c **** 					else
2480:../FreeRTOS/Source/queue.c **** 					{
2481:../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2482:../FreeRTOS/Source/queue.c **** 					}
2483:../FreeRTOS/Source/queue.c **** 				}
2484:../FreeRTOS/Source/queue.c **** 				else
2485:../FreeRTOS/Source/queue.c **** 				{
2486:../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2487:../FreeRTOS/Source/queue.c **** 				}
2488:../FreeRTOS/Source/queue.c **** 			}
2489:../FreeRTOS/Source/queue.c **** 			else
2490:../FreeRTOS/Source/queue.c **** 			{
2491:../FreeRTOS/Source/queue.c **** 				xReturn = pdFAIL;
2492:../FreeRTOS/Source/queue.c **** 			}
2493:../FreeRTOS/Source/queue.c **** 		}
2494:../FreeRTOS/Source/queue.c **** 		portENABLE_INTERRUPTS();
2495:../FreeRTOS/Source/queue.c **** 
2496:../FreeRTOS/Source/queue.c **** 		return xReturn;
2497:../FreeRTOS/Source/queue.c **** 	}
2498:../FreeRTOS/Source/queue.c **** 
2499:../FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2500:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2501:../FreeRTOS/Source/queue.c **** 
2502:../FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2503:../FreeRTOS/Source/queue.c **** 
2504:../FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRSendFromISR( QueueHandle_t xQueue, const void *pvItemToQueue, BaseType_t xCoRou
2505:../FreeRTOS/Source/queue.c **** 	{
2506:../FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2507:../FreeRTOS/Source/queue.c **** 
2508:../FreeRTOS/Source/queue.c **** 		/* Cannot block within an ISR so if there is no space on the queue then
2509:../FreeRTOS/Source/queue.c **** 		exit without doing anything. */
2510:../FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
2511:../FreeRTOS/Source/queue.c **** 		{
2512:../FreeRTOS/Source/queue.c **** 			prvCopyDataToQueue( pxQueue, pvItemToQueue, queueSEND_TO_BACK );
2513:../FreeRTOS/Source/queue.c **** 
2514:../FreeRTOS/Source/queue.c **** 			/* We only want to wake one co-routine per ISR, so check that a
2515:../FreeRTOS/Source/queue.c **** 			co-routine has not already been woken. */
2516:../FreeRTOS/Source/queue.c **** 			if( xCoRoutinePreviouslyWoken == pdFALSE )
2517:../FreeRTOS/Source/queue.c **** 			{
2518:../FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
2519:../FreeRTOS/Source/queue.c **** 				{
2520:../FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
2521:../FreeRTOS/Source/queue.c **** 					{
2522:../FreeRTOS/Source/queue.c **** 						return pdTRUE;
2523:../FreeRTOS/Source/queue.c **** 					}
2524:../FreeRTOS/Source/queue.c **** 					else
2525:../FreeRTOS/Source/queue.c **** 					{
2526:../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2527:../FreeRTOS/Source/queue.c **** 					}
2528:../FreeRTOS/Source/queue.c **** 				}
2529:../FreeRTOS/Source/queue.c **** 				else
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 117


2530:../FreeRTOS/Source/queue.c **** 				{
2531:../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2532:../FreeRTOS/Source/queue.c **** 				}
2533:../FreeRTOS/Source/queue.c **** 			}
2534:../FreeRTOS/Source/queue.c **** 			else
2535:../FreeRTOS/Source/queue.c **** 			{
2536:../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2537:../FreeRTOS/Source/queue.c **** 			}
2538:../FreeRTOS/Source/queue.c **** 		}
2539:../FreeRTOS/Source/queue.c **** 		else
2540:../FreeRTOS/Source/queue.c **** 		{
2541:../FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2542:../FreeRTOS/Source/queue.c **** 		}
2543:../FreeRTOS/Source/queue.c **** 
2544:../FreeRTOS/Source/queue.c **** 		return xCoRoutinePreviouslyWoken;
2545:../FreeRTOS/Source/queue.c **** 	}
2546:../FreeRTOS/Source/queue.c **** 
2547:../FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2548:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2549:../FreeRTOS/Source/queue.c **** 
2550:../FreeRTOS/Source/queue.c **** #if ( configUSE_CO_ROUTINES == 1 )
2551:../FreeRTOS/Source/queue.c **** 
2552:../FreeRTOS/Source/queue.c **** 	BaseType_t xQueueCRReceiveFromISR( QueueHandle_t xQueue, void *pvBuffer, BaseType_t *pxCoRoutineWo
2553:../FreeRTOS/Source/queue.c **** 	{
2554:../FreeRTOS/Source/queue.c **** 	BaseType_t xReturn;
2555:../FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2556:../FreeRTOS/Source/queue.c **** 
2557:../FreeRTOS/Source/queue.c **** 		/* We cannot block from an ISR, so check there is data available. If
2558:../FreeRTOS/Source/queue.c **** 		not then just leave without doing anything. */
2559:../FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
2560:../FreeRTOS/Source/queue.c **** 		{
2561:../FreeRTOS/Source/queue.c **** 			/* Copy the data from the queue. */
2562:../FreeRTOS/Source/queue.c **** 			pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
2563:../FreeRTOS/Source/queue.c **** 			if( pxQueue->u.pcReadFrom >= pxQueue->pcTail )
2564:../FreeRTOS/Source/queue.c **** 			{
2565:../FreeRTOS/Source/queue.c **** 				pxQueue->u.pcReadFrom = pxQueue->pcHead;
2566:../FreeRTOS/Source/queue.c **** 			}
2567:../FreeRTOS/Source/queue.c **** 			else
2568:../FreeRTOS/Source/queue.c **** 			{
2569:../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2570:../FreeRTOS/Source/queue.c **** 			}
2571:../FreeRTOS/Source/queue.c **** 			--( pxQueue->uxMessagesWaiting );
2572:../FreeRTOS/Source/queue.c **** 			( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->ux
2573:../FreeRTOS/Source/queue.c **** 
2574:../FreeRTOS/Source/queue.c **** 			if( ( *pxCoRoutineWoken ) == pdFALSE )
2575:../FreeRTOS/Source/queue.c **** 			{
2576:../FreeRTOS/Source/queue.c **** 				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
2577:../FreeRTOS/Source/queue.c **** 				{
2578:../FreeRTOS/Source/queue.c **** 					if( xCoRoutineRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
2579:../FreeRTOS/Source/queue.c **** 					{
2580:../FreeRTOS/Source/queue.c **** 						*pxCoRoutineWoken = pdTRUE;
2581:../FreeRTOS/Source/queue.c **** 					}
2582:../FreeRTOS/Source/queue.c **** 					else
2583:../FreeRTOS/Source/queue.c **** 					{
2584:../FreeRTOS/Source/queue.c **** 						mtCOVERAGE_TEST_MARKER();
2585:../FreeRTOS/Source/queue.c **** 					}
2586:../FreeRTOS/Source/queue.c **** 				}
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 118


2587:../FreeRTOS/Source/queue.c **** 				else
2588:../FreeRTOS/Source/queue.c **** 				{
2589:../FreeRTOS/Source/queue.c **** 					mtCOVERAGE_TEST_MARKER();
2590:../FreeRTOS/Source/queue.c **** 				}
2591:../FreeRTOS/Source/queue.c **** 			}
2592:../FreeRTOS/Source/queue.c **** 			else
2593:../FreeRTOS/Source/queue.c **** 			{
2594:../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2595:../FreeRTOS/Source/queue.c **** 			}
2596:../FreeRTOS/Source/queue.c **** 
2597:../FreeRTOS/Source/queue.c **** 			xReturn = pdPASS;
2598:../FreeRTOS/Source/queue.c **** 		}
2599:../FreeRTOS/Source/queue.c **** 		else
2600:../FreeRTOS/Source/queue.c **** 		{
2601:../FreeRTOS/Source/queue.c **** 			xReturn = pdFAIL;
2602:../FreeRTOS/Source/queue.c **** 		}
2603:../FreeRTOS/Source/queue.c **** 
2604:../FreeRTOS/Source/queue.c **** 		return xReturn;
2605:../FreeRTOS/Source/queue.c **** 	}
2606:../FreeRTOS/Source/queue.c **** 
2607:../FreeRTOS/Source/queue.c **** #endif /* configUSE_CO_ROUTINES */
2608:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2609:../FreeRTOS/Source/queue.c **** 
2610:../FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2611:../FreeRTOS/Source/queue.c **** 
2612:../FreeRTOS/Source/queue.c **** 	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified
2613:../FreeRTOS/Source/queue.c **** 	{
 3468              		.loc 1 2613 0
 3469              		.cfi_startproc
 3470              		@ args = 0, pretend = 0, frame = 0
 3471              		@ frame_needed = 0, uses_anonymous_args = 0
 3472              		@ link register save eliminated.
 3473              	.LVL353:
2614:../FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2615:../FreeRTOS/Source/queue.c **** 
2616:../FreeRTOS/Source/queue.c **** 		/* See if there is an empty space in the registry.  A NULL name denotes
2617:../FreeRTOS/Source/queue.c **** 		a free slot. */
2618:../FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3474              		.loc 1 2618 0
 3475 0000 0023     		movs	r3, #0
 3476              	.LVL354:
 3477              	.L317:
 3478              		.loc 1 2618 0 is_stmt 0 discriminator 1
 3479 0002 072B     		cmp	r3, #7
 3480 0004 0CD8     		bhi	.L321
2619:../FreeRTOS/Source/queue.c **** 		{
2620:../FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 3481              		.loc 1 2620 0 is_stmt 1
 3482 0006 074A     		ldr	r2, .L323
 3483 0008 52F83320 		ldr	r2, [r2, r3, lsl #3]
 3484 000c 0AB1     		cbz	r2, .L322
2618:../FreeRTOS/Source/queue.c **** 		{
 3485              		.loc 1 2618 0 discriminator 2
 3486 000e 0133     		adds	r3, r3, #1
 3487              	.LVL355:
 3488 0010 F7E7     		b	.L317
 3489              	.L322:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 119


2621:../FreeRTOS/Source/queue.c **** 			{
2622:../FreeRTOS/Source/queue.c **** 				/* Store the information on this queue. */
2623:../FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 3490              		.loc 1 2623 0
 3491 0012 044A     		ldr	r2, .L323
 3492 0014 42F83310 		str	r1, [r2, r3, lsl #3]
2624:../FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = xQueue;
 3493              		.loc 1 2624 0
 3494 0018 02EBC303 		add	r3, r2, r3, lsl #3
 3495              	.LVL356:
 3496 001c 5860     		str	r0, [r3, #4]
2625:../FreeRTOS/Source/queue.c **** 
2626:../FreeRTOS/Source/queue.c **** 				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
2627:../FreeRTOS/Source/queue.c **** 				break;
 3497              		.loc 1 2627 0
 3498 001e 7047     		bx	lr
 3499              	.LVL357:
 3500              	.L321:
2628:../FreeRTOS/Source/queue.c **** 			}
2629:../FreeRTOS/Source/queue.c **** 			else
2630:../FreeRTOS/Source/queue.c **** 			{
2631:../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2632:../FreeRTOS/Source/queue.c **** 			}
2633:../FreeRTOS/Source/queue.c **** 		}
2634:../FreeRTOS/Source/queue.c **** 	}
 3501              		.loc 1 2634 0
 3502 0020 7047     		bx	lr
 3503              	.L324:
 3504 0022 00BF     		.align	2
 3505              	.L323:
 3506 0024 00000000 		.word	xQueueRegistry
 3507              		.cfi_endproc
 3508              	.LFE36:
 3510              		.section	.text.pcQueueGetName,"ax",%progbits
 3511              		.align	1
 3512              		.global	pcQueueGetName
 3513              		.syntax unified
 3514              		.thumb
 3515              		.thumb_func
 3516              		.fpu fpv4-sp-d16
 3518              	pcQueueGetName:
 3519              	.LFB37:
2635:../FreeRTOS/Source/queue.c **** 
2636:../FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2637:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2638:../FreeRTOS/Source/queue.c **** 
2639:../FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2640:../FreeRTOS/Source/queue.c **** 
2641:../FreeRTOS/Source/queue.c **** 	const char *pcQueueGetName( QueueHandle_t xQueue ) /*lint !e971 Unqualified char types are allowed
2642:../FreeRTOS/Source/queue.c **** 	{
 3520              		.loc 1 2642 0
 3521              		.cfi_startproc
 3522              		@ args = 0, pretend = 0, frame = 0
 3523              		@ frame_needed = 0, uses_anonymous_args = 0
 3524              		@ link register save eliminated.
 3525              	.LVL358:
2643:../FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 120


2644:../FreeRTOS/Source/queue.c **** 	const char *pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and singl
2645:../FreeRTOS/Source/queue.c **** 
2646:../FreeRTOS/Source/queue.c **** 		/* Note there is nothing here to protect against another task adding or
2647:../FreeRTOS/Source/queue.c **** 		removing entries from the registry while it is being searched. */
2648:../FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3526              		.loc 1 2648 0
 3527 0000 0023     		movs	r3, #0
 3528              	.LVL359:
 3529              	.L326:
 3530              		.loc 1 2648 0 is_stmt 0 discriminator 1
 3531 0002 072B     		cmp	r3, #7
 3532 0004 0BD8     		bhi	.L330
2649:../FreeRTOS/Source/queue.c **** 		{
2650:../FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3533              		.loc 1 2650 0 is_stmt 1
 3534 0006 074A     		ldr	r2, .L332
 3535 0008 02EBC302 		add	r2, r2, r3, lsl #3
 3536 000c 5268     		ldr	r2, [r2, #4]
 3537 000e 8242     		cmp	r2, r0
 3538 0010 01D0     		beq	.L331
2648:../FreeRTOS/Source/queue.c **** 		{
 3539              		.loc 1 2648 0 discriminator 2
 3540 0012 0133     		adds	r3, r3, #1
 3541              	.LVL360:
 3542 0014 F5E7     		b	.L326
 3543              	.L331:
2651:../FreeRTOS/Source/queue.c **** 			{
2652:../FreeRTOS/Source/queue.c **** 				pcReturn = xQueueRegistry[ ux ].pcQueueName;
 3544              		.loc 1 2652 0
 3545 0016 034A     		ldr	r2, .L332
 3546 0018 52F83300 		ldr	r0, [r2, r3, lsl #3]
 3547              	.LVL361:
2653:../FreeRTOS/Source/queue.c **** 				break;
 3548              		.loc 1 2653 0
 3549 001c 7047     		bx	lr
 3550              	.LVL362:
 3551              	.L330:
2644:../FreeRTOS/Source/queue.c **** 
 3552              		.loc 1 2644 0
 3553 001e 0020     		movs	r0, #0
 3554              	.LVL363:
2654:../FreeRTOS/Source/queue.c **** 			}
2655:../FreeRTOS/Source/queue.c **** 			else
2656:../FreeRTOS/Source/queue.c **** 			{
2657:../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2658:../FreeRTOS/Source/queue.c **** 			}
2659:../FreeRTOS/Source/queue.c **** 		}
2660:../FreeRTOS/Source/queue.c **** 
2661:../FreeRTOS/Source/queue.c **** 		return pcReturn;
2662:../FreeRTOS/Source/queue.c **** 	} /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 3555              		.loc 1 2662 0
 3556 0020 7047     		bx	lr
 3557              	.L333:
 3558 0022 00BF     		.align	2
 3559              	.L332:
 3560 0024 00000000 		.word	xQueueRegistry
 3561              		.cfi_endproc
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 121


 3562              	.LFE37:
 3564              		.section	.text.vQueueUnregisterQueue,"ax",%progbits
 3565              		.align	1
 3566              		.global	vQueueUnregisterQueue
 3567              		.syntax unified
 3568              		.thumb
 3569              		.thumb_func
 3570              		.fpu fpv4-sp-d16
 3572              	vQueueUnregisterQueue:
 3573              	.LFB38:
2663:../FreeRTOS/Source/queue.c **** 
2664:../FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2665:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2666:../FreeRTOS/Source/queue.c **** 
2667:../FreeRTOS/Source/queue.c **** #if ( configQUEUE_REGISTRY_SIZE > 0 )
2668:../FreeRTOS/Source/queue.c **** 
2669:../FreeRTOS/Source/queue.c **** 	void vQueueUnregisterQueue( QueueHandle_t xQueue )
2670:../FreeRTOS/Source/queue.c **** 	{
 3574              		.loc 1 2670 0
 3575              		.cfi_startproc
 3576              		@ args = 0, pretend = 0, frame = 0
 3577              		@ frame_needed = 0, uses_anonymous_args = 0
 3578              		@ link register save eliminated.
 3579              	.LVL364:
2671:../FreeRTOS/Source/queue.c **** 	UBaseType_t ux;
2672:../FreeRTOS/Source/queue.c **** 
2673:../FreeRTOS/Source/queue.c **** 		/* See if the handle of the queue being unregistered in actually in the
2674:../FreeRTOS/Source/queue.c **** 		registry. */
2675:../FreeRTOS/Source/queue.c **** 		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 3580              		.loc 1 2675 0
 3581 0000 0023     		movs	r3, #0
 3582              	.LVL365:
 3583              	.L335:
 3584              		.loc 1 2675 0 is_stmt 0 discriminator 1
 3585 0002 072B     		cmp	r3, #7
 3586 0004 0FD8     		bhi	.L339
2676:../FreeRTOS/Source/queue.c **** 		{
2677:../FreeRTOS/Source/queue.c **** 			if( xQueueRegistry[ ux ].xHandle == xQueue )
 3587              		.loc 1 2677 0 is_stmt 1
 3588 0006 084A     		ldr	r2, .L341
 3589 0008 02EBC302 		add	r2, r2, r3, lsl #3
 3590 000c 5268     		ldr	r2, [r2, #4]
 3591 000e 8242     		cmp	r2, r0
 3592 0010 01D0     		beq	.L340
2675:../FreeRTOS/Source/queue.c **** 		{
 3593              		.loc 1 2675 0 discriminator 2
 3594 0012 0133     		adds	r3, r3, #1
 3595              	.LVL366:
 3596 0014 F5E7     		b	.L335
 3597              	.L340:
2678:../FreeRTOS/Source/queue.c **** 			{
2679:../FreeRTOS/Source/queue.c **** 				/* Set the name to NULL to show that this slot if free again. */
2680:../FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].pcQueueName = NULL;
 3598              		.loc 1 2680 0
 3599 0016 044A     		ldr	r2, .L341
 3600 0018 0021     		movs	r1, #0
 3601 001a 42F83310 		str	r1, [r2, r3, lsl #3]
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 122


2681:../FreeRTOS/Source/queue.c **** 
2682:../FreeRTOS/Source/queue.c **** 				/* Set the handle to NULL to ensure the same queue handle cannot
2683:../FreeRTOS/Source/queue.c **** 				appear in the registry twice if it is added, removed, then
2684:../FreeRTOS/Source/queue.c **** 				added again. */
2685:../FreeRTOS/Source/queue.c **** 				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 3602              		.loc 1 2685 0
 3603 001e 02EBC303 		add	r3, r2, r3, lsl #3
 3604              	.LVL367:
 3605 0022 5960     		str	r1, [r3, #4]
2686:../FreeRTOS/Source/queue.c **** 				break;
 3606              		.loc 1 2686 0
 3607 0024 7047     		bx	lr
 3608              	.LVL368:
 3609              	.L339:
2687:../FreeRTOS/Source/queue.c **** 			}
2688:../FreeRTOS/Source/queue.c **** 			else
2689:../FreeRTOS/Source/queue.c **** 			{
2690:../FreeRTOS/Source/queue.c **** 				mtCOVERAGE_TEST_MARKER();
2691:../FreeRTOS/Source/queue.c **** 			}
2692:../FreeRTOS/Source/queue.c **** 		}
2693:../FreeRTOS/Source/queue.c **** 
2694:../FreeRTOS/Source/queue.c **** 	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 3610              		.loc 1 2694 0
 3611 0026 7047     		bx	lr
 3612              	.L342:
 3613              		.align	2
 3614              	.L341:
 3615 0028 00000000 		.word	xQueueRegistry
 3616              		.cfi_endproc
 3617              	.LFE38:
 3619              		.section	.text.vQueueDelete,"ax",%progbits
 3620              		.align	1
 3621              		.global	vQueueDelete
 3622              		.syntax unified
 3623              		.thumb
 3624              		.thumb_func
 3625              		.fpu fpv4-sp-d16
 3627              	vQueueDelete:
 3628              	.LFB24:
1942:../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 3629              		.loc 1 1942 0
 3630              		.cfi_startproc
 3631              		@ args = 0, pretend = 0, frame = 0
 3632              		@ frame_needed = 0, uses_anonymous_args = 0
 3633              	.LVL369:
1945:../FreeRTOS/Source/queue.c **** 	traceQUEUE_DELETE( pxQueue );
 3634              		.loc 1 1945 0
 3635 0000 40B9     		cbnz	r0, .L344
 3636              	.LBB212:
 3637              	.LBB213:
 195:../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3638              		.loc 2 195 0
 3639              		.syntax unified
 3640              	@ 195 "../FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3641 0002 4FF05003 			mov r3, #80												
 3642 0006 83F31188 		msr basepri, r3											
 3643 000a BFF36F8F 		isb														
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 123


 3644 000e BFF34F8F 		dsb														
 3645              	
 3646              	@ 0 "" 2
 3647              	.LVL370:
 3648              		.thumb
 3649              		.syntax unified
 3650              	.L345:
 3651 0012 FEE7     		b	.L345
 3652              	.L344:
 3653              	.LBE213:
 3654              	.LBE212:
1942:../FreeRTOS/Source/queue.c **** Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 3655              		.loc 1 1942 0
 3656 0014 10B5     		push	{r4, lr}
 3657              	.LCFI41:
 3658              		.cfi_def_cfa_offset 8
 3659              		.cfi_offset 4, -8
 3660              		.cfi_offset 14, -4
 3661 0016 0446     		mov	r4, r0
1950:../FreeRTOS/Source/queue.c **** 	}
 3662              		.loc 1 1950 0
 3663 0018 FFF7FEFF 		bl	vQueueUnregisterQueue
 3664              	.LVL371:
1958:../FreeRTOS/Source/queue.c **** 	}
 3665              		.loc 1 1958 0
 3666 001c 2046     		mov	r0, r4
 3667 001e FFF7FEFF 		bl	vPortFree
 3668              	.LVL372:
1980:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
 3669              		.loc 1 1980 0
 3670 0022 10BD     		pop	{r4, pc}
 3671              		.cfi_endproc
 3672              	.LFE24:
 3674              		.section	.text.vQueueWaitForMessageRestricted,"ax",%progbits
 3675              		.align	1
 3676              		.global	vQueueWaitForMessageRestricted
 3677              		.syntax unified
 3678              		.thumb
 3679              		.thumb_func
 3680              		.fpu fpv4-sp-d16
 3682              	vQueueWaitForMessageRestricted:
 3683              	.LFB39:
2695:../FreeRTOS/Source/queue.c **** 
2696:../FreeRTOS/Source/queue.c **** #endif /* configQUEUE_REGISTRY_SIZE */
2697:../FreeRTOS/Source/queue.c **** /*-----------------------------------------------------------*/
2698:../FreeRTOS/Source/queue.c **** 
2699:../FreeRTOS/Source/queue.c **** #if ( configUSE_TIMERS == 1 )
2700:../FreeRTOS/Source/queue.c **** 
2701:../FreeRTOS/Source/queue.c **** 	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType
2702:../FreeRTOS/Source/queue.c **** 	{
 3684              		.loc 1 2702 0
 3685              		.cfi_startproc
 3686              		@ args = 0, pretend = 0, frame = 0
 3687              		@ frame_needed = 0, uses_anonymous_args = 0
 3688              	.LVL373:
 3689 0000 70B5     		push	{r4, r5, r6, lr}
 3690              	.LCFI42:
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 124


 3691              		.cfi_def_cfa_offset 16
 3692              		.cfi_offset 4, -16
 3693              		.cfi_offset 5, -12
 3694              		.cfi_offset 6, -8
 3695              		.cfi_offset 14, -4
 3696 0002 0446     		mov	r4, r0
 3697 0004 0D46     		mov	r5, r1
 3698 0006 1646     		mov	r6, r2
 3699              	.LVL374:
2703:../FreeRTOS/Source/queue.c **** 	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
2704:../FreeRTOS/Source/queue.c **** 
2705:../FreeRTOS/Source/queue.c **** 		/* This function should not be called by application code hence the
2706:../FreeRTOS/Source/queue.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2707:../FreeRTOS/Source/queue.c **** 		designed for use by kernel code, and has special calling requirements.
2708:../FreeRTOS/Source/queue.c **** 		It can result in vListInsert() being called on a list that can only
2709:../FreeRTOS/Source/queue.c **** 		possibly ever have one item in it, so the list will be fast, but even
2710:../FreeRTOS/Source/queue.c **** 		so it should be called with the scheduler locked and not from a critical
2711:../FreeRTOS/Source/queue.c **** 		section. */
2712:../FreeRTOS/Source/queue.c **** 
2713:../FreeRTOS/Source/queue.c **** 		/* Only do anything if there are no messages in the queue.  This function
2714:../FreeRTOS/Source/queue.c **** 		will not actually cause the task to block, just place it on a blocked
2715:../FreeRTOS/Source/queue.c **** 		list.  It will not block until the scheduler is unlocked - at which
2716:../FreeRTOS/Source/queue.c **** 		time a yield will be performed.  If an item is added to the queue while
2717:../FreeRTOS/Source/queue.c **** 		the queue is locked, and the calling task blocks on the queue, then the
2718:../FreeRTOS/Source/queue.c **** 		calling task will be immediately unblocked when the queue is unlocked. */
2719:../FreeRTOS/Source/queue.c **** 		prvLockQueue( pxQueue );
 3700              		.loc 1 2719 0
 3701 0008 FFF7FEFF 		bl	vPortEnterCritical
 3702              	.LVL375:
 3703 000c 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 3704 0010 5BB2     		sxtb	r3, r3
 3705 0012 B3F1FF3F 		cmp	r3, #-1
 3706 0016 0DD0     		beq	.L353
 3707              	.L349:
 3708              		.loc 1 2719 0 is_stmt 0 discriminator 3
 3709 0018 94F84530 		ldrb	r3, [r4, #69]	@ zero_extendqisi2
 3710 001c 5BB2     		sxtb	r3, r3
 3711 001e B3F1FF3F 		cmp	r3, #-1
 3712 0022 0BD0     		beq	.L354
 3713              	.L350:
 3714              		.loc 1 2719 0 discriminator 6
 3715 0024 FFF7FEFF 		bl	vPortExitCritical
 3716              	.LVL376:
2720:../FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3717              		.loc 1 2720 0 is_stmt 1 discriminator 6
 3718 0028 A36B     		ldr	r3, [r4, #56]
 3719 002a 5BB1     		cbz	r3, .L355
 3720              	.L351:
2721:../FreeRTOS/Source/queue.c **** 		{
2722:../FreeRTOS/Source/queue.c **** 			/* There is nothing in the queue, block for the specified period. */
2723:../FreeRTOS/Source/queue.c **** 			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefi
2724:../FreeRTOS/Source/queue.c **** 		}
2725:../FreeRTOS/Source/queue.c **** 		else
2726:../FreeRTOS/Source/queue.c **** 		{
2727:../FreeRTOS/Source/queue.c **** 			mtCOVERAGE_TEST_MARKER();
2728:../FreeRTOS/Source/queue.c **** 		}
2729:../FreeRTOS/Source/queue.c **** 		prvUnlockQueue( pxQueue );
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 125


 3721              		.loc 1 2729 0
 3722 002c 2046     		mov	r0, r4
 3723 002e FFF7FEFF 		bl	prvUnlockQueue
 3724              	.LVL377:
2730:../FreeRTOS/Source/queue.c **** 	}
 3725              		.loc 1 2730 0
 3726 0032 70BD     		pop	{r4, r5, r6, pc}
 3727              	.LVL378:
 3728              	.L353:
2719:../FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3729              		.loc 1 2719 0 discriminator 1
 3730 0034 0023     		movs	r3, #0
 3731 0036 84F84430 		strb	r3, [r4, #68]
 3732 003a EDE7     		b	.L349
 3733              	.L354:
2719:../FreeRTOS/Source/queue.c **** 		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 3734              		.loc 1 2719 0 is_stmt 0 discriminator 4
 3735 003c 0023     		movs	r3, #0
 3736 003e 84F84530 		strb	r3, [r4, #69]
 3737 0042 EFE7     		b	.L350
 3738              	.L355:
2723:../FreeRTOS/Source/queue.c **** 		}
 3739              		.loc 1 2723 0 is_stmt 1
 3740 0044 3246     		mov	r2, r6
 3741 0046 2946     		mov	r1, r5
 3742 0048 04F12400 		add	r0, r4, #36
 3743 004c FFF7FEFF 		bl	vTaskPlaceOnEventListRestricted
 3744              	.LVL379:
 3745 0050 ECE7     		b	.L351
 3746              		.cfi_endproc
 3747              	.LFE39:
 3749              		.comm	xQueueRegistry,64,4
 3750              		.text
 3751              	.Letext0:
 3752              		.file 3 "c:\\tools\\gcc7_2017-q4-major\\lib\\gcc\\arm-none-eabi\\7.2.1\\include\\stddef.h"
 3753              		.file 4 "c:\\tools\\gcc7_2017-q4-major\\arm-none-eabi\\include\\machine\\_default_types.h"
 3754              		.file 5 "c:\\tools\\gcc7_2017-q4-major\\arm-none-eabi\\include\\sys\\lock.h"
 3755              		.file 6 "c:\\tools\\gcc7_2017-q4-major\\arm-none-eabi\\include\\sys\\_types.h"
 3756              		.file 7 "c:\\tools\\gcc7_2017-q4-major\\arm-none-eabi\\include\\sys\\reent.h"
 3757              		.file 8 "c:\\tools\\gcc7_2017-q4-major\\arm-none-eabi\\include\\stdlib.h"
 3758              		.file 9 "c:\\tools\\gcc7_2017-q4-major\\arm-none-eabi\\include\\sys\\_stdint.h"
 3759              		.file 10 "../FreeRTOS/Source/include/list.h"
 3760              		.file 11 "../FreeRTOS/Source/include/task.h"
 3761              		.file 12 "../FreeRTOS/Source/include/queue.h"
 3762              		.file 13 "../FreeRTOS/Source/include/portable.h"
 3763              		.file 14 "<built-in>"
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 126


DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
E:\msys32\tmp\cclWuynL.s:18     .text.prvGetDisinheritPriorityAfterTimeout:00000000 $t
E:\msys32\tmp\cclWuynL.s:24     .text.prvGetDisinheritPriorityAfterTimeout:00000000 prvGetDisinheritPriorityAfterTimeout
E:\msys32\tmp\cclWuynL.s:54     .text.prvIsQueueFull:00000000 $t
E:\msys32\tmp\cclWuynL.s:60     .text.prvIsQueueFull:00000000 prvIsQueueFull
E:\msys32\tmp\cclWuynL.s:101    .text.prvIsQueueEmpty:00000000 $t
E:\msys32\tmp\cclWuynL.s:107    .text.prvIsQueueEmpty:00000000 prvIsQueueEmpty
E:\msys32\tmp\cclWuynL.s:146    .text.prvCopyDataToQueue:00000000 $t
E:\msys32\tmp\cclWuynL.s:152    .text.prvCopyDataToQueue:00000000 prvCopyDataToQueue
E:\msys32\tmp\cclWuynL.s:271    .text.prvCopyDataFromQueue:00000000 $t
E:\msys32\tmp\cclWuynL.s:277    .text.prvCopyDataFromQueue:00000000 prvCopyDataFromQueue
E:\msys32\tmp\cclWuynL.s:326    .text.prvUnlockQueue:00000000 $t
E:\msys32\tmp\cclWuynL.s:332    .text.prvUnlockQueue:00000000 prvUnlockQueue
E:\msys32\tmp\cclWuynL.s:438    .text.xQueueGenericReset:00000000 $t
E:\msys32\tmp\cclWuynL.s:445    .text.xQueueGenericReset:00000000 xQueueGenericReset
E:\msys32\tmp\cclWuynL.s:554    .text.xQueueGenericReset:00000080 $d
E:\msys32\tmp\cclWuynL.s:559    .text.prvInitialiseNewQueue:00000000 $t
E:\msys32\tmp\cclWuynL.s:565    .text.prvInitialiseNewQueue:00000000 prvInitialiseNewQueue
E:\msys32\tmp\cclWuynL.s:612    .text.xQueueGenericCreate:00000000 $t
E:\msys32\tmp\cclWuynL.s:619    .text.xQueueGenericCreate:00000000 xQueueGenericCreate
E:\msys32\tmp\cclWuynL.s:706    .text.xQueueCreateCountingSemaphore:00000000 $t
E:\msys32\tmp\cclWuynL.s:713    .text.xQueueCreateCountingSemaphore:00000000 xQueueCreateCountingSemaphore
E:\msys32\tmp\cclWuynL.s:790    .text.xQueueGenericSend:00000000 $t
E:\msys32\tmp\cclWuynL.s:797    .text.xQueueGenericSend:00000000 xQueueGenericSend
E:\msys32\tmp\cclWuynL.s:1121   .text.xQueueGenericSend:00000178 $d
E:\msys32\tmp\cclWuynL.s:1126   .text.prvInitialiseMutex:00000000 $t
E:\msys32\tmp\cclWuynL.s:1132   .text.prvInitialiseMutex:00000000 prvInitialiseMutex
E:\msys32\tmp\cclWuynL.s:1172   .text.xQueueCreateMutex:00000000 $t
E:\msys32\tmp\cclWuynL.s:1179   .text.xQueueCreateMutex:00000000 xQueueCreateMutex
E:\msys32\tmp\cclWuynL.s:1211   .text.xQueueGiveMutexRecursive:00000000 $t
E:\msys32\tmp\cclWuynL.s:1218   .text.xQueueGiveMutexRecursive:00000000 xQueueGiveMutexRecursive
E:\msys32\tmp\cclWuynL.s:1292   .text.xQueueGenericSendFromISR:00000000 $t
E:\msys32\tmp\cclWuynL.s:1299   .text.xQueueGenericSendFromISR:00000000 xQueueGenericSendFromISR
E:\msys32\tmp\cclWuynL.s:1497   .text.xQueueGiveFromISR:00000000 $t
E:\msys32\tmp\cclWuynL.s:1504   .text.xQueueGiveFromISR:00000000 xQueueGiveFromISR
E:\msys32\tmp\cclWuynL.s:1712   .text.xQueueReceive:00000000 $t
E:\msys32\tmp\cclWuynL.s:1719   .text.xQueueReceive:00000000 xQueueReceive
E:\msys32\tmp\cclWuynL.s:2016   .text.xQueueReceive:00000154 $d
E:\msys32\tmp\cclWuynL.s:2021   .text.xQueueSemaphoreTake:00000000 $t
E:\msys32\tmp\cclWuynL.s:2028   .text.xQueueSemaphoreTake:00000000 xQueueSemaphoreTake
E:\msys32\tmp\cclWuynL.s:2387   .text.xQueueSemaphoreTake:00000198 $d
E:\msys32\tmp\cclWuynL.s:2392   .text.xQueueTakeMutexRecursive:00000000 $t
E:\msys32\tmp\cclWuynL.s:2399   .text.xQueueTakeMutexRecursive:00000000 xQueueTakeMutexRecursive
E:\msys32\tmp\cclWuynL.s:2475   .text.xQueuePeek:00000000 $t
E:\msys32\tmp\cclWuynL.s:2482   .text.xQueuePeek:00000000 xQueuePeek
E:\msys32\tmp\cclWuynL.s:2780   .text.xQueuePeek:00000154 $d
E:\msys32\tmp\cclWuynL.s:2785   .text.xQueueReceiveFromISR:00000000 $t
E:\msys32\tmp\cclWuynL.s:2792   .text.xQueueReceiveFromISR:00000000 xQueueReceiveFromISR
E:\msys32\tmp\cclWuynL.s:2963   .text.xQueuePeekFromISR:00000000 $t
E:\msys32\tmp\cclWuynL.s:2970   .text.xQueuePeekFromISR:00000000 xQueuePeekFromISR
E:\msys32\tmp\cclWuynL.s:3115   .text.uxQueueMessagesWaiting:00000000 $t
E:\msys32\tmp\cclWuynL.s:3122   .text.uxQueueMessagesWaiting:00000000 uxQueueMessagesWaiting
E:\msys32\tmp\cclWuynL.s:3173   .text.uxQueueSpacesAvailable:00000000 $t
E:\msys32\tmp\cclWuynL.s:3180   .text.uxQueueSpacesAvailable:00000000 uxQueueSpacesAvailable
E:\msys32\tmp\cclWuynL.s:3234   .text.uxQueueMessagesWaitingFromISR:00000000 $t
E:\msys32\tmp\cclWuynL.s:3241   .text.uxQueueMessagesWaitingFromISR:00000000 uxQueueMessagesWaitingFromISR
ARM GAS  E:\msys32\tmp\cclWuynL.s 			page 127


E:\msys32\tmp\cclWuynL.s:3280   .text.uxQueueGetQueueNumber:00000000 $t
E:\msys32\tmp\cclWuynL.s:3287   .text.uxQueueGetQueueNumber:00000000 uxQueueGetQueueNumber
E:\msys32\tmp\cclWuynL.s:3303   .text.vQueueSetQueueNumber:00000000 $t
E:\msys32\tmp\cclWuynL.s:3310   .text.vQueueSetQueueNumber:00000000 vQueueSetQueueNumber
E:\msys32\tmp\cclWuynL.s:3326   .text.ucQueueGetQueueType:00000000 $t
E:\msys32\tmp\cclWuynL.s:3333   .text.ucQueueGetQueueType:00000000 ucQueueGetQueueType
E:\msys32\tmp\cclWuynL.s:3349   .text.xQueueIsQueueEmptyFromISR:00000000 $t
E:\msys32\tmp\cclWuynL.s:3356   .text.xQueueIsQueueEmptyFromISR:00000000 xQueueIsQueueEmptyFromISR
E:\msys32\tmp\cclWuynL.s:3403   .text.xQueueIsQueueFullFromISR:00000000 $t
E:\msys32\tmp\cclWuynL.s:3410   .text.xQueueIsQueueFullFromISR:00000000 xQueueIsQueueFullFromISR
E:\msys32\tmp\cclWuynL.s:3459   .text.vQueueAddToRegistry:00000000 $t
E:\msys32\tmp\cclWuynL.s:3466   .text.vQueueAddToRegistry:00000000 vQueueAddToRegistry
E:\msys32\tmp\cclWuynL.s:3506   .text.vQueueAddToRegistry:00000024 $d
                            *COM*:00000040 xQueueRegistry
E:\msys32\tmp\cclWuynL.s:3511   .text.pcQueueGetName:00000000 $t
E:\msys32\tmp\cclWuynL.s:3518   .text.pcQueueGetName:00000000 pcQueueGetName
E:\msys32\tmp\cclWuynL.s:3560   .text.pcQueueGetName:00000024 $d
E:\msys32\tmp\cclWuynL.s:3565   .text.vQueueUnregisterQueue:00000000 $t
E:\msys32\tmp\cclWuynL.s:3572   .text.vQueueUnregisterQueue:00000000 vQueueUnregisterQueue
E:\msys32\tmp\cclWuynL.s:3615   .text.vQueueUnregisterQueue:00000028 $d
E:\msys32\tmp\cclWuynL.s:3620   .text.vQueueDelete:00000000 $t
E:\msys32\tmp\cclWuynL.s:3627   .text.vQueueDelete:00000000 vQueueDelete
E:\msys32\tmp\cclWuynL.s:3675   .text.vQueueWaitForMessageRestricted:00000000 $t
E:\msys32\tmp\cclWuynL.s:3682   .text.vQueueWaitForMessageRestricted:00000000 vQueueWaitForMessageRestricted

UNDEFINED SYMBOLS
vPortEnterCritical
vPortExitCritical
xTaskPriorityDisinherit
memcpy
vTaskMissedYield
xTaskRemoveFromEventList
vListInitialise
pvPortMalloc
xTaskGetSchedulerState
vTaskInternalSetTimeOutState
xTaskResumeAll
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskGetCurrentTaskHandle
vPortValidateInterruptPriority
pvTaskIncrementMutexHeldCount
xTaskPriorityInherit
vTaskPriorityDisinheritAfterTimeout
vPortFree
vTaskPlaceOnEventListRestricted
